/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as p from "react";
import u from "prop-types";
import { validatePackage as w, getLicenseMessage as b, Navigation as R, disableNavigatableContainer as y, getActiveElement as f, focusFirstFocusableChild as h, enableNavigatableContainer as E, classNames as F, WatermarkOverlay as k } from "@progress/kendo-react-common";
import { Group as C } from "./Group.mjs";
import { packageMetadata as g } from "../package-metadata.mjs";
const a = {
  // Group selectors
  andButton: "button.k-group-start",
  orButton: "button.k-group-end",
  addFilterButton: 'button[title="Add Expression"]',
  addGroupButton: 'button[title="Add Group"]',
  removeButton: 'button[title="Remove"]',
  // Expression selectors
  filterFieldWrapper: ".k-filter-field",
  filterOperatorWrapper: ".k-filter-operator",
  filterValueWrapper: ".k-filter-value",
  toolbarElement: ".k-toolbar"
}, d = class d extends p.Component {
  constructor(o) {
    super(o), this.wrapperRef = p.createRef(), this.showLicenseWatermark = !1, this.onFilterChange = (r) => {
      const t = {
        filter: r.nextFilter,
        syntheticEvent: r.syntheticEvent,
        nativeEvent: r.nativeEvent,
        target: this
      };
      this.props.onChange.call(void 0, t);
    }, this.onGroupRemove = (r) => {
      const t = {
        filter: { ...this.props.value, filters: [] },
        syntheticEvent: r.syntheticEvent,
        nativeEvent: r.nativeEvent,
        target: this
      };
      this.props.onChange.call(void 0, t);
    }, this.onKeyDown = (r) => {
      var t;
      (t = this.navigation) == null || t.triggerKeyboardEvent(r);
    }, this.showLicenseWatermark = !w(g, { component: "Filter" }), this.licenseMessage = b(g);
  }
  /**
   * @hidden
   */
  componentDidMount() {
    this.wrapperRef && (this.navigation = new R({
      tabIndex: 0,
      root: this.wrapperRef,
      selectors: [".k-filter"],
      keyboardEvents: {
        keydown: {
          Tab: (o, r, t) => {
            const e = o.getElementsByClassName("k-filter-lines")[0];
            e && y(e);
          },
          ArrowUp: (o, r, t) => {
            t.preventDefault();
            const e = f(document), s = e == null ? void 0 : e.closest(a.toolbarElement), n = o.getElementsByClassName("k-toolbar"), i = Array.from(n).findIndex((m) => m === s) - 1, c = n[i];
            o.getElementsByClassName("k-filter-lines")[0] && h(c);
          },
          ArrowDown: (o, r, t) => {
            t.preventDefault();
            const e = f(document), s = e == null ? void 0 : e.closest(a.toolbarElement), n = o.getElementsByClassName("k-toolbar"), i = Array.from(n).findIndex((m) => m === s) + 1, c = n[i], l = o.getElementsByClassName("k-filter-lines")[0];
            l && (E(l, [
              a.filterFieldWrapper,
              a.filterOperatorWrapper,
              a.filterValueWrapper
            ]), h(c));
          },
          ArrowRight: (o, r, t) => {
            t.preventDefault();
            const e = f(document), s = e == null ? void 0 : e.nextElementSibling, n = e == null ? void 0 : e.closest(a.toolbarElement), i = o.querySelector('[aria-label="Filter toolbar"]');
            e && s && !(n === i) && s.focus();
          },
          ArrowLeft: (o, r, t) => {
            t.preventDefault();
            const e = f(document), s = e == null ? void 0 : e.previousElementSibling, n = e == null ? void 0 : e.closest(a.toolbarElement), i = o.querySelector('[aria-label="Filter toolbar"]');
            e && s && !(n === i) && s.focus();
          },
          Enter: (o, r, t) => {
            t.preventDefault();
            const e = f(document), s = o.querySelector(a.removeButton), n = e == null ? void 0 : e.closest(a.toolbarElement), i = o.getElementsByClassName("k-toolbar"), c = Array.from(i).findIndex((l) => l === n) - 1;
            if (n === i[0]) {
              const l = n.lastElementChild;
              l && l.click();
            }
            if (n !== i[0]) {
              const l = i[c].lastElementChild;
              e && e.title === s.title && l && (e.click(), l.focus());
            }
          }
        }
      }
    }));
  }
  /**
   * @hidden
   */
  render() {
    return /* @__PURE__ */ p.createElement(
      "div",
      {
        className: F("k-filter", this.props.className),
        style: this.props.style,
        ref: this.wrapperRef,
        onKeyDown: this.onKeyDown
      },
      /* @__PURE__ */ p.createElement("ul", { role: "tree", className: "k-filter-container", "aria-label": this.props.ariaLabel }, /* @__PURE__ */ p.createElement("li", { role: "treeitem", className: "k-filter-group-main" }, /* @__PURE__ */ p.createElement(
        C,
        {
          filter: this.props.value,
          fields: this.props.fields,
          ariaLabel: this.props.ariaLabelGroup,
          ariaLabelExpression: this.props.ariaLabelExpression,
          onChange: this.onFilterChange,
          onRemove: this.onGroupRemove,
          defaultGroupFilter: this.props.defaultGroupFilter || { logic: "and", filters: [] }
        }
      ))),
      this.showLicenseWatermark && /* @__PURE__ */ p.createElement(k, { message: this.licenseMessage })
    );
  }
};
d.propTypes = {
  className: u.string,
  style: u.object,
  fields: function(o, r) {
    const t = o[r];
    if (t === void 0)
      return new Error(`Property '${r}' is missing.`);
    if (Array.isArray(t)) {
      if (Object.keys(t.reduce((e, s) => ({ ...e, [s.name]: 1 }), {})).length !== t.length)
        return new Error(`Property '${r}' needs to contain objects with unique 'name' field.`);
    } else return new Error(`Property '${r}' needs to be Array<FieldSettings>.`);
    return null;
  },
  ariaLabelGroup: u.string,
  ariaLabelExpression: u.string,
  value: u.object.isRequired,
  onChange: u.func.isRequired
};
let v = d;
export {
  v as Filter,
  a as selectors
};
