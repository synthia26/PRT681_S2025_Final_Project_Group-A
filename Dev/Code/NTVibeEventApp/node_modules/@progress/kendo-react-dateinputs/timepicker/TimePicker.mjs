/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as n from "react";
import e from "prop-types";
import { Popup as Z } from "@progress/kendo-react-popup";
import { cloneDate as y } from "@progress/kendo-date-math";
import { classNames as c, uTimePicker as g, Keys as u, validatePackage as J, getLicenseMessage as Q, canUseDOM as C, AsyncFocusBlur as Y, WatermarkOverlay as $, createPropsContext as ee, withIdHOC as te, withPropsContext as ie, withUnstyledHOC as se, withAdaptiveModeContext as oe } from "@progress/kendo-react-common";
import { clockIcon as ne } from "@progress/kendo-svg-icons";
import { provideLocalizationService as ae, registerForLocalization as re } from "@progress/kendo-react-intl";
import { packageMetadata as I } from "../package-metadata.mjs";
import { toggleClock as f, messages as d, timePickerCancel as le, timePickerSet as M, toggleTimeSelector as T } from "../messages/index.mjs";
import { DateInput as he } from "../dateinput/DateInput.mjs";
import { TimeSelector as ue } from "./TimeSelector.mjs";
import { MAX_TIME as de, MIN_TIME as pe, setTime as O, MIDNIGHT_DATE as me } from "../utils.mjs";
import { isInRange as ce, isBiggerThanMax as ge, isSmallerThanMin as fe } from "./utils.mjs";
import { PickerFloatingLabel as ve } from "../hooks/usePickerFloatingLabel.mjs";
import { Button as we } from "@progress/kendo-react-buttons";
import { AdaptiveMode as be } from "../common/AdaptiveMode.mjs";
import { ActionSheetContent as Se } from "@progress/kendo-react-layout";
const a = class a extends n.Component {
  constructor(i) {
    super(i), this._element = null, this._dateInput = n.createRef(), this._timeSelector = null, this.shouldFocusDateInput = !1, this.prevShow = !1, this.showLicenseWatermark = !1, this.focus = () => {
      this.dateInput && this.dateInput.focus();
    }, this.renderTimeSelector = () => {
      const { smoothScroll: t, cancelButton: s, nowButton: o, disabled: l, format: h, steps: r, unstyled: m } = this.props;
      return /* @__PURE__ */ n.createElement(
        ue,
        {
          ref: this.setTimeSelectorRef,
          mobileMode: this.mobileMode,
          show: this.show,
          cancelButton: s,
          disabled: l,
          nowButton: o,
          format: h,
          min: this.min,
          max: this.max,
          steps: r,
          smoothScroll: t,
          value: this.value,
          footer: !this.mobileMode,
          handleTimeChange: this.mobileMode && this.handleTimeChange,
          onChange: this.handleValueChange,
          onReject: this.handleValueReject,
          unstyled: m
        }
      );
    }, this.renderPopup = () => {
      const { popupClass: t, ...s } = this.popupSettings, { unstyled: o } = this.props, l = o && o.uTimePicker, h = c(t), r = {
        popupClass: g.popup({ c: l }),
        show: this.show,
        animate: this.element !== null,
        anchor: this.element,
        className: h,
        id: this._popupId,
        anchorAlign: {
          horizontal: "left",
          vertical: "bottom"
        },
        popupAlign: {
          horizontal: "left",
          vertical: "top"
        },
        ...s
      };
      return this.props.popup ? /* @__PURE__ */ n.createElement(this.props.popup, { ...r }, this.renderTimeSelector()) : /* @__PURE__ */ n.createElement(Z, { ...r }, this.renderTimeSelector());
    }, this.renderAdaptivePopup = () => {
      const { windowWidth: t = 0 } = this.state, s = {
        expand: this.show,
        onClose: this.handleBlur,
        title: this.props.adaptiveTitle || this.props.label,
        subTitle: this.props.adaptiveSubtitle,
        windowWidth: t,
        footer: {
          cancelText: this.localizationService.toLanguageString(f, d[le]),
          onCancel: this.handleValueReject,
          applyText: this.localizationService.toLanguageString(M, d[M]),
          onApply: (o) => this.handleValueChange(o)
        }
      };
      return /* @__PURE__ */ n.createElement(be, { ...s }, /* @__PURE__ */ n.createElement(Se, null, this.renderTimeSelector()));
    }, this.setTimeSelectorRef = (t) => {
      this._timeSelector = t;
    }, this.nextValue = (t, s) => t.value !== void 0 ? t.value : s.value, this.nextShow = (t, s) => t.show !== void 0 ? t.show : s.show, this.handleInputValueChange = (t) => {
      const s = this.mergeTime(t.value);
      this.handleValueChange({ ...t, value: s });
    }, this.handleTimeChange = (t) => {
      this.setState({ candidate: t.time });
    }, this.handleValueChange = (t) => {
      this.setState({
        value: y(t.value || this.state.candidate)
      }), this.valueDuringOnChange = t.value, this.showDuringOnChange = !1, this.shouldFocusDateInput = !0;
      const { onChange: s } = this.props, o = this.state.candidate || this.value;
      s && s.call(void 0, {
        syntheticEvent: t.syntheticEvent,
        nativeEvent: t.nativeEvent,
        value: o,
        show: this.show,
        target: this
      }), this.valueDuringOnChange = void 0, this.showDuringOnChange = void 0, this.setShow(!1);
    }, this.handleFocus = () => {
      this.setState({ focused: !0 });
    }, this.handleBlur = () => {
      this.setState({ focused: !1 }), this.setShow(!1);
    }, this.handleValueReject = (t) => {
      this.setShow(!1);
    }, this.handleClick = (t) => {
      this.props.disabled || (this.shouldFocusDateInput = !0, this.setShow(!this.show));
    }, this.handleIconMouseDown = (t) => {
      t.preventDefault();
    }, this.handleKeyDown = (t) => {
      const { altKey: s, keyCode: o } = t;
      if (o === u.esc) {
        this.shouldFocusDateInput = !0, this.setShow(!1);
        return;
      }
      s && (o === u.up || o === u.down) && (t.preventDefault(), t.stopPropagation(), this.shouldFocusDateInput = o === u.up, this.setShow(o === u.down));
    }, this.showLicenseWatermark = !J(I, { component: "TimePicker" }), this.licenseMessage = Q(I), this.state = {
      value: this.props.defaultValue || a.defaultProps.defaultValue,
      show: this.props.defaultShow || a.defaultProps.defaultShow,
      focused: !1,
      candidate: null
    }, this.normalizeTime = this.normalizeTime.bind(this), this.setShow = this.setShow.bind(this), this.mergeTime = this.mergeTime.bind(this);
  }
  get _popupId() {
    return this.props.id + "-popup-id";
  }
  get document() {
    if (C)
      return this.element && this.element.ownerDocument || document;
  }
  /**
   * Gets the wrapping element of the TimePicker.
   */
  get element() {
    return this._element;
  }
  /**
   * Gets the DateInput component inside the TimePicker component.
   */
  get dateInput() {
    return this._dateInput.current;
  }
  /**
   * Gets the TimeSelector component inside the TimePicker component.
   */
  get timeSelector() {
    return this._timeSelector;
  }
  /**
   * Gets the value of the TimePicker.
   */
  get value() {
    const i = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
    return i !== null ? y(i) : null;
  }
  /**
   * Gets the popup state of the TimeSelector.
   */
  get show() {
    return this.showDuringOnChange !== void 0 ? this.showDuringOnChange : this.props.show !== void 0 ? this.props.show : this.state.show;
  }
  /**
   * Gets the `name` property of the TimePicker.
   */
  get name() {
    return this.props.name;
  }
  /**
   * Represents the validity state into which the TimePicker is set.
   */
  get validity() {
    const i = this.value && this.normalizeTime(this.value), t = this.normalizeTime(this.min), s = this.normalizeTime(this.max), o = ce(i, t, s), l = this.props.validationMessage !== void 0, h = (!this.required || this.value !== null) && o, r = this.props.valid !== void 0 ? this.props.valid : h;
    return {
      customError: l,
      rangeOverflow: ge(i, s),
      rangeUnderflow: fe(i, t),
      valid: r,
      valueMissing: this.value === null
    };
  }
  /**
   * Returns a boolean value indicating whether the TimePicker is in mobile mode.
   */
  get mobileMode() {
    var t;
    return !!(this.state.windowWidth && this.props._adaptiveMode && this.state.windowWidth <= ((t = this.props._adaptiveMode) == null ? void 0 : t.medium) && this.props.adaptive);
  }
  /**
   * @hidden
   */
  get validityStyles() {
    return this.props.validityStyles !== void 0 ? this.props.validityStyles : a.defaultProps.validityStyles;
  }
  /**
   * @hidden
   */
  get required() {
    return this.props.required !== void 0 ? this.props.required : !1;
  }
  get popupSettings() {
    return this.props.popupSettings || a.defaultProps.popupSettings;
  }
  get min() {
    return this.props.min !== void 0 ? this.props.min : a.defaultProps.min;
  }
  get max() {
    return this.props.max !== void 0 ? this.props.max : a.defaultProps.max;
  }
  get dateInputComp() {
    return this.props.dateInput || a.defaultProps.dateInput;
  }
  get localizationService() {
    return ae(this);
  }
  /**
   * @hidden
   */
  componentDidMount() {
    var i;
    this.observerResize = C && window.ResizeObserver && new window.ResizeObserver(this.calculateMedia.bind(this)), this.show && this.forceUpdate(), (i = this.document) != null && i.body && this.observerResize && this.observerResize.observe(this.document.body);
  }
  /**
   * @hidden
   */
  componentDidUpdate() {
    this._timeSelector && this.show && !this.prevShow && this._timeSelector.focusActiveList(), this.mobileMode && this.show && !this.prevShow && setTimeout(() => {
      this._timeSelector && this._timeSelector.focusActiveList();
    }, 300), this.dateInput && this.dateInput.element && !this.show && this.shouldFocusDateInput && this.dateInput.element.focus({ preventScroll: !0 }), this.prevShow = this.show, this.shouldFocusDateInput = !1;
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    var i;
    (i = this.document) != null && i.body && this.observerResize && this.observerResize.disconnect();
  }
  /**
   * @hidden
   */
  render() {
    const {
      size: i = a.defaultProps.size,
      rounded: t = a.defaultProps.rounded,
      fillMode: s = a.defaultProps.fillMode,
      disabled: o,
      tabIndex: l,
      title: h,
      id: r,
      className: m,
      format: D,
      formatPlaceholder: P,
      width: z,
      name: k,
      steps: x,
      validationMessage: E,
      required: R,
      validityStyles: B,
      ariaLabelledBy: A,
      ariaDescribedBy: F,
      unstyled: v,
      enableMouseWheel: V,
      autoCorrectParts: L,
      autoSwitchParts: N,
      autoSwitchKeys: _,
      allowCaretMode: q,
      inputAttributes: K
    } = this.props, w = v && v.uTimePicker, b = !this.validityStyles || this.validity.valid, W = {
      disabled: o,
      format: D,
      formatPlaceholder: P,
      id: r,
      ariaLabelledBy: A,
      ariaDescribedBy: F,
      max: this.normalizeTime(this.max),
      min: this.normalizeTime(this.min),
      name: k,
      onChange: this.handleInputValueChange,
      required: R,
      steps: x,
      tabIndex: this.show ? -1 : l,
      title: h,
      valid: this.validity.valid,
      validationMessage: E,
      validityStyles: B,
      value: this.value && this.normalizeTime(this.value),
      label: void 0,
      placeholder: this.state.focused ? null : this.props.placeholder,
      ariaHasPopup: "dialog",
      ariaExpanded: this.show,
      size: null,
      fillMode: null,
      rounded: null,
      enableMouseWheel: V,
      autoCorrectParts: L,
      autoSwitchParts: N,
      autoSwitchKeys: _,
      allowCaretMode: q,
      inputAttributes: K
    }, U = this.localizationService.toLanguageString(f, d[f]), j = this.localizationService.toLanguageString(
      T,
      d[T]
    ), S = /* @__PURE__ */ n.createElement(
      Y,
      {
        onFocus: this.handleFocus,
        onBlur: this.mobileMode ? void 0 : this.handleBlur,
        onSyncBlur: this.props.onBlur,
        onSyncFocus: this.props.onFocus
      },
      ({ onFocus: H, onBlur: G }) => /* @__PURE__ */ n.createElement(n.Fragment, null, /* @__PURE__ */ n.createElement(
        "span",
        {
          ref: (X) => {
            this._element = X;
          },
          className: c(
            g.wrapper({
              c: w,
              size: i,
              rounded: t,
              fillMode: s,
              invalid: !b,
              required: this.required,
              disabled: o
            }),
            m
          ),
          onKeyDown: this.handleKeyDown,
          style: { width: z },
          onFocus: this.mobileMode ? this.handleClick : H,
          onBlur: G,
          onClick: this.mobileMode ? this.handleClick : void 0
        },
        /* @__PURE__ */ n.createElement(
          this.dateInputComp,
          {
            _ref: this._dateInput,
            ariaRole: "combobox",
            ariaControls: this._popupId,
            ...W
          }
        ),
        /* @__PURE__ */ n.createElement(
          we,
          {
            tabIndex: -1,
            type: "button",
            icon: "clock",
            svgIcon: ne,
            onMouseDown: this.handleIconMouseDown,
            onClick: this.mobileMode ? void 0 : this.handleClick,
            title: j,
            className: c(g.inputButton({ c: w })),
            rounded: null,
            fillMode: s,
            "aria-label": U
          }
        ),
        !this.mobileMode && this.renderPopup()
      ), this.mobileMode && this.renderAdaptivePopup(), this.showLicenseWatermark && /* @__PURE__ */ n.createElement($, { message: this.licenseMessage }))
    );
    return this.props.label ? /* @__PURE__ */ n.createElement(
      ve,
      {
        dateInput: this._dateInput,
        label: this.props.label,
        editorId: r,
        editorValid: b,
        editorDisabled: this.props.disabled,
        children: S,
        style: { width: this.props.width }
      }
    ) : S;
  }
  normalizeTime(i) {
    return O(me, i);
  }
  setShow(i) {
    const { onOpen: t, onClose: s } = this.props;
    this.show !== i && (this.setState({ show: i }), i && t && t.call(void 0, {
      target: this
    }), !i && s && s.call(void 0, {
      target: this
    }));
  }
  mergeTime(i) {
    return this.value && i ? O(this.value, i) : i;
  }
  calculateMedia(i) {
    for (const t of i)
      this.setState({ windowWidth: t.target.clientWidth });
  }
};
a.displayName = "TimePicker", a.propTypes = {
  className: e.string,
  cancelButton: e.bool,
  nowButton: e.bool,
  defaultShow: e.bool,
  defaultValue: e.instanceOf(Date),
  disabled: e.bool,
  format: e.oneOfType([
    e.string,
    e.shape({
      skeleton: e.string,
      pattern: e.string,
      date: e.oneOf(["short", "medium", "long", "full"]),
      time: e.oneOf(["short", "medium", "long", "full"]),
      datetime: e.oneOf(["short", "medium", "long", "full"]),
      era: e.oneOf(["narrow", "short", "long"]),
      year: e.oneOf(["numeric", "2-digit"]),
      month: e.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
      day: e.oneOf(["numeric", "2-digit"]),
      weekday: e.oneOf(["narrow", "short", "long"]),
      hour: e.oneOf(["numeric", "2-digit"]),
      hour12: e.bool,
      minute: e.oneOf(["numeric", "2-digit"]),
      second: e.oneOf(["numeric", "2-digit"]),
      timeZoneName: e.oneOf(["short", "long"])
    })
  ]),
  formatPlaceholder: e.oneOfType([
    e.oneOf([
      "wide",
      "narrow",
      "short",
      "formatPattern"
    ]),
    e.shape({
      year: e.string,
      month: e.string,
      day: e.string,
      hour: e.string,
      minute: e.string,
      second: e.string
    })
  ]),
  id: e.string,
  ariaLabelledBy: e.string,
  ariaDescribedBy: e.string,
  min: e.instanceOf(Date),
  max: e.instanceOf(Date),
  name: e.string,
  popupSettings: e.shape({
    animate: e.bool,
    appendTo: e.any,
    popupClass: e.string
  }),
  show: e.bool,
  steps: e.shape({
    hour: e.number,
    minute: e.number,
    second: e.number
  }),
  smoothScroll: e.bool,
  tabIndex: e.number,
  title: e.string,
  value: e.instanceOf(Date),
  width: e.oneOfType([e.number, e.string]),
  validationMessage: e.string,
  required: e.bool,
  validate: e.bool,
  valid: e.bool,
  size: e.oneOf([null, "small", "medium", "large"]),
  rounded: e.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: e.oneOf([null, "solid", "flat", "outline"]),
  inputAttributes: e.object
}, a.defaultProps = {
  defaultShow: !1,
  defaultValue: null,
  disabled: !1,
  format: "t",
  max: de,
  min: pe,
  popupSettings: {},
  tabIndex: 0,
  steps: {},
  validityStyles: !0,
  dateInput: he,
  size: "medium",
  rounded: "medium",
  fillMode: "solid"
};
let p = a;
const ye = ee(), Ce = te(
  ie(
    ye,
    se(oe(p))
  )
);
Ce.displayName = "KendoReactTimePicker";
re(p);
export {
  Ce as TimePicker,
  ye as TimePickerPropsContext,
  p as TimePickerWithoutContext
};
