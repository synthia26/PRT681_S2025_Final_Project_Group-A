"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIOS = exports.isValidDate = exports.areDatePartsEqualTo = exports.millisecondStepFor = exports.millisecondDigitsInFormat = exports.setYears = exports.cropTwoDigitYear = exports.isFunction = exports.noop = exports.deepExtend = exports.extend = exports.clamp = exports.isParseableToInt = exports.parseToInt = exports.isNumber = exports.isDocumentAvailable = exports.isPresent = void 0;
var tslib_1 = require("tslib");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var isObject = function (value) { return value && typeof (value) === "object" && !Array.isArray(value); };
var isHtmlElement = function (element) { return element instanceof HTMLElement; };
var dateSetter = function (method) { return function (date, value) {
    var clone = (0, kendo_date_math_1.cloneDate)(date);
    clone[method](value);
    return clone;
}; };
/**
 * @hidden
 */
var isPresent = function (value) { return value !== undefined && value !== null; };
exports.isPresent = isPresent;
/**
 * @hidden
 */
var isDocumentAvailable = function () { return !!document; };
exports.isDocumentAvailable = isDocumentAvailable;
/**
 * @hidden
 */
var isNumber = function (value) { return (0, exports.isPresent)(value) && typeof (value) === "number" && !Number.isNaN(value); };
exports.isNumber = isNumber;
/**
 * @hidden
 */
var parseToInt = function (value) { return parseInt(value, 10); };
exports.parseToInt = parseToInt;
/**
 * @hidden
 */
var isParseableToInt = function (value) { return (0, exports.isNumber)((0, exports.parseToInt)(value)) && /^[0-9]+$/.test(value); };
exports.isParseableToInt = isParseableToInt;
/**
 * @hidden
 */
var clamp = function (value, min, max) { return Math.min(max, Math.max(min, value)); };
exports.clamp = clamp;
/**
 * @hidden
 */
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
var extend = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return Object.assign.apply(Object, args);
};
exports.extend = extend;
/**
 * @hidden
 */
var deepExtend = function (target) {
    var _a, _b;
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (!sources.length) {
        return target;
    }
    var source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for (var key in source) {
            if (!Object.prototype.hasOwnProperty.call(source, key) ||
                key === "__proto__" ||
                key === "constructor" ||
                key === "prototype") {
                continue;
            }
            if (isHtmlElement(source[key])) {
                target[key] = source[key];
            }
            else if (isObject(source[key]) && !(source[key] instanceof Date)) {
                if (!target[key] || !isObject(target[key])) {
                    (0, exports.extend)(target, (_a = {}, _a[key] = {}, _a));
                }
                (0, exports.deepExtend)(target[key], source[key]);
            }
            else {
                (0, exports.extend)(target, (_b = {}, _b[key] = source[key], _b));
            }
        }
    }
    return exports.deepExtend.apply(void 0, tslib_1.__spreadArray([target], sources, false));
};
exports.deepExtend = deepExtend;
/**
 * @hidden
 */
// eslint-disable-next-line
var noop = function () { };
exports.noop = noop;
/**
 * @hidden
 */
var isFunction = function (fn) { return typeof (fn) === "function"; };
exports.isFunction = isFunction;
/**
 * @hidden
 */
var cropTwoDigitYear = function (date) {
    if (!(0, exports.isPresent)(date) || isNaN(date.getTime())) {
        return 0;
    }
    return Number(date
        .getFullYear()
        .toString()
        .slice(-2));
};
exports.cropTwoDigitYear = cropTwoDigitYear;
/**
 * @hidden
 */
exports.setYears = dateSetter('setFullYear');
/**
 * @hidden
 */
var millisecondDigitsInFormat = function (format) {
    var result = format && format.match(/S+(\1)/);
    return result ? result[0].length : 0;
};
exports.millisecondDigitsInFormat = millisecondDigitsInFormat;
/**
 * @hidden
 */
var millisecondStepFor = function (digits) {
    return Math.pow(10, 3 - digits);
};
exports.millisecondStepFor = millisecondStepFor;
/**
 * @hidden
 */
var areDatePartsEqualTo = function (date, year, month, day, hour, minutes, seconds, milliseconds) {
    if (date &&
        date.getFullYear() === year &&
        date.getMonth() === month &&
        date.getDate() === day &&
        date.getHours() === hour &&
        date.getMinutes() === minutes &&
        date.getSeconds() === seconds &&
        date.getMilliseconds() === milliseconds) {
        return true;
    }
    return false;
};
exports.areDatePartsEqualTo = areDatePartsEqualTo;
/**
 * @hidden
 */
var isValidDate = function (value) { return (0, exports.isPresent)(value) && value.getTime && (0, exports.isNumber)(value.getTime()); };
exports.isValidDate = isValidDate;
/**
 * @hidden
 */
var isIOS = function () { return /iPad|iPhone|iPod/.test(navigator.userAgent) || (navigator.maxTouchPoints &&
    navigator.maxTouchPoints > 2 &&
    /Macintosh/i.test(navigator.userAgent)); };
exports.isIOS = isIOS;
