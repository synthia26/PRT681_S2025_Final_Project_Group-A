[
    {
        "description": "",
        "commentRange": {
            "start": 602,
            "end": 606
        },
        "context": {
            "type": "variable",
            "name": "wcag-dark",
            "value": "black",
            "scope": "default",
            "line": {
                "start": 607,
                "end": 607
            }
        },
        "link": [
            {
                "url": "https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast",
                "caption": ""
            },
            {
                "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                "caption": "Default dark color for WCAG 2.0."
            }
        ],
        "type": "Color",
        "group": [
            "accessibility"
        ],
        "access": "public",
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Default light color for WCAG 2.0.\n",
        "commentRange": {
            "start": 608,
            "end": 610
        },
        "context": {
            "type": "variable",
            "name": "wcag-light",
            "value": "white",
            "scope": "default",
            "line": {
                "start": 611,
                "end": 611
            }
        },
        "type": "Color",
        "group": [
            "accessibility"
        ],
        "access": "public",
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Calculate the relative luminance for a color.\n",
        "commentRange": {
            "start": 613,
            "end": 620
        },
        "context": {
            "type": "function",
            "name": "k-color-luminance",
            "code": "\n    $red: list.nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: list.nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: list.nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
            "line": {
                "start": 621,
                "end": 627
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to calculate the relative luminance for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The relative luminance for the color.\n"
        },
        "group": [
            "accessibility"
        ],
        "link": [
            {
                "url": "https://www.w3.org/TR/WCAG/#dfn-relative-luminance",
                "caption": ""
            },
            {
                "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                "caption": ""
            }
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-red"
            },
            {
                "type": "function",
                "name": "k-color-green"
            },
            {
                "type": "function",
                "name": "k-color-blue"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculates contrast ratio between two colors\n",
                "context": {
                    "type": "function",
                    "name": "k-color-contrast-ratio",
                    "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return math.div( math.max( $backLum, $foreLum ), math.min( $backLum, $foreLum ) );\n",
                    "line": {
                        "start": 638,
                        "end": 643
                    }
                }
            },
            {
                "description": "Calculates contrast ratio between two colors\n",
                "context": {
                    "type": "function",
                    "name": "k-color-contrast-ratio",
                    "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return math.div( math.max( $backLum, $foreLum ), math.min( $backLum, $foreLum ) );\n",
                    "line": {
                        "start": 638,
                        "end": 643
                    }
                }
            },
            {
                "description": "Checks if a color is dark\n",
                "context": {
                    "type": "function",
                    "name": "k-is-dark",
                    "code": "\n    @return if( k-color-luminance( $color ) < .5, true, false );\n",
                    "line": {
                        "start": 650,
                        "end": 652
                    }
                }
            },
            {
                "description": "Checks if a color is light\n",
                "context": {
                    "type": "function",
                    "name": "k-is-light",
                    "code": "\n    @return if( k-color-luminance( $color ) < .5, false, true );\n",
                    "line": {
                        "start": 659,
                        "end": 661
                    }
                }
            }
        ]
    },
    {
        "description": "Calculates contrast ratio between two colors\n",
        "commentRange": {
            "start": 629,
            "end": 637
        },
        "context": {
            "type": "function",
            "name": "k-color-contrast-ratio",
            "code": "\n    $backLum: k-color-luminance( $background ) + .05;\n    $foreLum: k-color-luminance( $foreground ) + .05;\n\n    @return math.div( math.max( $backLum, $foreLum ), math.min( $backLum, $foreLum ) );\n",
            "line": {
                "start": 638,
                "end": 643
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "background",
                "description": "The background color"
            },
            {
                "type": "Color",
                "name": "foreground",
                "description": "The foreground color"
            }
        ],
        "return": {
            "type": "Number",
            "description": "The contrast ratio between the two colors\n"
        },
        "group": [
            "accessibility"
        ],
        "link": [
            {
                "url": "https://www.w3.org/TR/WCAG/#dfn-contrast-ratio",
                "caption": ""
            },
            {
                "url": "https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests",
                "caption": ""
            }
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-luminance"
            },
            {
                "type": "function",
                "name": "k-color-luminance"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculates the contrast ratio between a background color and a foreground color.\nIf the contrast ratio is not high enough, it will return the color with the highest contrast ratio.\n",
                "context": {
                    "type": "function",
                    "name": "k-contrast-color",
                    "code": "\n    $foregrounds: $light, $dark, #ffffff, #000000;\n    $max-ratio: 0;\n    $max-ratio-color: null;\n\n    @each $color in $foregrounds {\n        $contrast-ratio: k-color-contrast-ratio( $background, $color );\n\n        @if ( $contrast-ratio > $min-ratio ) {\n            @return $color;\n        } @else if ( $contrast-ratio > $max-ratio ) {\n            $max-ratio: $contrast-ratio;\n            $max-ratio-color: $color;\n        }\n    }\n\n    @warn \"Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...\";\n\n    @return $max-ratio-color;\n",
                    "line": {
                        "start": 673,
                        "end": 692
                    }
                }
            }
        ]
    },
    {
        "description": "Checks if a color is dark\n",
        "commentRange": {
            "start": 645,
            "end": 649
        },
        "context": {
            "type": "function",
            "name": "k-is-dark",
            "code": "\n    @return if( k-color-luminance( $color ) < .5, true, false );\n",
            "line": {
                "start": 650,
                "end": 652
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to check"
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "True if the color is dark, false otherwise\n"
        },
        "group": [
            "accessibility"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-luminance"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Checks if a color is light\n",
        "commentRange": {
            "start": 654,
            "end": 658
        },
        "context": {
            "type": "function",
            "name": "k-is-light",
            "code": "\n    @return if( k-color-luminance( $color ) < .5, false, true );\n",
            "line": {
                "start": 659,
                "end": 661
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to check"
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "True if the color is light, false otherwise\n"
        },
        "group": [
            "accessibility"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-luminance"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Calculates the contrast ratio between a background color and a foreground color.\nIf the contrast ratio is not high enough, it will return the color with the highest contrast ratio.\n",
        "commentRange": {
            "start": 664,
            "end": 672
        },
        "context": {
            "type": "function",
            "name": "k-contrast-color",
            "code": "\n    $foregrounds: $light, $dark, #ffffff, #000000;\n    $max-ratio: 0;\n    $max-ratio-color: null;\n\n    @each $color in $foregrounds {\n        $contrast-ratio: k-color-contrast-ratio( $background, $color );\n\n        @if ( $contrast-ratio > $min-ratio ) {\n            @return $color;\n        } @else if ( $contrast-ratio > $max-ratio ) {\n            $max-ratio: $contrast-ratio;\n            $max-ratio-color: $color;\n        }\n    }\n\n    @warn \"Found no color leading to #{$min-ratio}:1 contrast ratio against #{$background}...\";\n\n    @return $max-ratio-color;\n",
            "line": {
                "start": 673,
                "end": 692
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "background",
                "description": "The background color"
            },
            {
                "type": "Color",
                "name": "dark",
                "description": "The dark color to use as a fallback"
            },
            {
                "type": "Color",
                "name": "light",
                "description": "The light color to use as a fallback"
            },
            {
                "type": "Number",
                "name": "min-ratio",
                "description": "The minimum contrast ratio to reach"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The color with the highest contrast ratio\n"
        },
        "group": [
            "accessibility"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-contrast-ratio"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            }
        ]
    },
    {
        "description": "The color white.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 3,
            "end": 6
        },
        "context": {
            "type": "variable",
            "name": "kendo-color-white",
            "value": "#ffffff",
            "scope": "private",
            "line": {
                "start": 7,
                "end": 7
            }
        },
        "type": "Color",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_constants.scss",
            "name": "_constants.scss"
        }
    },
    {
        "description": "The color black.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 9,
            "end": 12
        },
        "context": {
            "type": "variable",
            "name": "kendo-color-black",
            "value": "#000000",
            "scope": "private",
            "line": {
                "start": 13,
                "end": 13
            }
        },
        "type": "Color",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_constants.scss",
            "name": "_constants.scss"
        }
    },
    {
        "description": "The color transparent.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 15,
            "end": 18
        },
        "context": {
            "type": "variable",
            "name": "kendo-color-rgba-transparent",
            "value": "rgba(0, 0, 0, 0)",
            "scope": "private",
            "line": {
                "start": 19,
                "end": 19
            }
        },
        "type": "Color",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_constants.scss",
            "name": "_constants.scss"
        }
    },
    {
        "description": "A gradient that goes from transparent to black.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 21,
            "end": 24
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-transparent-to-black",
            "value": "rgba(black, 0), black",
            "scope": "private",
            "line": {
                "start": 25,
                "end": 25
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_constants.scss",
            "name": "_constants.scss"
        }
    },
    {
        "description": "A gradient that goes from transparent to white.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 27,
            "end": 30
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-transparent-to-white",
            "value": "rgba(white, 0), white",
            "scope": "private",
            "line": {
                "start": 31,
                "end": 31
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_constants.scss",
            "name": "_constants.scss"
        }
    },
    {
        "description": "A gradient that goes from black to transparent.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 33,
            "end": 36
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-black-to-transparent",
            "value": "black, rgba(black, 0)",
            "scope": "private",
            "line": {
                "start": 37,
                "end": 37
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_constants.scss",
            "name": "_constants.scss"
        }
    },
    {
        "description": "A gradient that goes from white to transparent.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 39,
            "end": 42
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-white-to-transparent",
            "value": "white, rgba(white, 0)",
            "scope": "private",
            "line": {
                "start": 43,
                "end": 43
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_constants.scss",
            "name": "_constants.scss"
        }
    },
    {
        "description": "A gradient that cycles through the colors of the rainbow.\nNote: you cannot change this value.\n",
        "commentRange": {
            "start": 45,
            "end": 48
        },
        "context": {
            "type": "variable",
            "name": "kendo-gradient-rainbow",
            "value": "#ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000",
            "scope": "private",
            "line": {
                "start": 49,
                "end": 49
            }
        },
        "type": "Gradient",
        "group": [
            "color-system"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_constants.scss",
            "name": "_constants.scss"
        }
    },
    {
        "description": "Generates all color variations of a given main color\n",
        "commentRange": {
            "start": 180,
            "end": 186
        },
        "context": {
            "type": "function",
            "name": "k-generate-color-variations",
            "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
            "line": {
                "start": 187,
                "end": 301
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the main color"
            },
            {
                "type": "Color",
                "name": "color",
                "description": "The color value to be assigned to the main color"
            },
            {
                "type": "String",
                "name": "theme",
                "description": "The theme the colors will be generated for"
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the generated keys and values\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-color-darken"
            },
            {
                "type": "function",
                "name": "k-color-darken"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-contrast-color"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-tint"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            },
            {
                "type": "function",
                "name": "k-try-shade"
            }
        ],
        "file": {
            "path": "color-system/_functions.import.scss",
            "name": "_functions.import.scss"
        }
    },
    {
        "description": "Takes a color name from the $kendo-colors map as a parameter\nand returns a CSS variable with the actual color as a fallback\n",
        "commentRange": {
            "start": 303,
            "end": 308
        },
        "context": {
            "type": "function",
            "name": "k-color",
            "code": "\n    $_color: map.get($kendo-colors, $key);\n\n    @if ($_color) {\n        @return var(--kendo-color-#{$key}, $_color);\n    } @else {\n        @error \"Color Variable \\`#{$key}\\` does not exists in the color collection.\";\n    }\n",
            "line": {
                "start": 309,
                "end": 317
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "key",
                "description": "The name of a color/key in the $kendo-colors map"
            }
        ],
        "return": {
            "type": "String",
            "description": "CSS variable with the actual color as a fallback\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "variable",
                "name": "kendo-colors"
            }
        ],
        "throw": [
            "Color Variable \\`#{$key}\\` does not exists in the color collection."
        ],
        "file": {
            "path": "color-system/_functions.import.scss",
            "name": "_functions.import.scss"
        }
    },
    {
        "description": "The global default Colors map.\n",
        "commentRange": {
            "start": 174,
            "end": 423
        },
        "context": {
            "type": "variable",
            "name": "kendo-colors",
            "value": "$_default-colors",
            "scope": "default",
            "line": {
                "start": 424,
                "end": 424
            }
        },
        "group": [
            "color-system"
        ],
        "subGroup": [
            {
                "name": "misc",
                "value": [
                    "app-surface",
                    "on-app-surface",
                    "subtle",
                    "surface",
                    "surface-alt",
                    "border",
                    "border-alt"
                ],
                "description": "The Misc variable group."
            },
            {
                "name": "base",
                "value": [
                    "base-subtle",
                    "base-subtle-hover",
                    "base-subtle-active",
                    "base",
                    "base-hover",
                    "base-active",
                    "base-emphasis",
                    "base-on-subtle",
                    "on-base",
                    "base-on-surface"
                ],
                "description": "The Base variable group."
            },
            {
                "name": "primary",
                "value": [
                    "primary-subtle",
                    "primary-subtle-hover",
                    "primary-subtle-active",
                    "primary",
                    "primary-hover",
                    "primary-active",
                    "primary-emphasis",
                    "primary-on-subtle",
                    "on-primary",
                    "primary-on-surface"
                ],
                "description": "The Primary variable group."
            },
            {
                "name": "secondary",
                "value": [
                    "secondary-subtle",
                    "secondary-subtle-hover",
                    "secondary-subtle-active",
                    "secondary",
                    "secondary-hover",
                    "secondary-active",
                    "secondary-emphasis",
                    "secondary-on-subtle",
                    "on-secondary",
                    "secondary-on-surface"
                ],
                "description": "The Secondary variable group."
            },
            {
                "name": "tertiary",
                "value": [
                    "tertiary-subtle",
                    "tertiary-subtle-hover",
                    "tertiary-subtle-active",
                    "tertiary",
                    "tertiary-hover",
                    "tertiary-active",
                    "tertiary-emphasis",
                    "tertiary-on-subtle",
                    "on-tertiary",
                    "tertiary-on-surface"
                ],
                "description": "The Tertiary variable group."
            },
            {
                "name": "info",
                "value": [
                    "info-subtle",
                    "info-subtle-hover",
                    "info-subtle-active",
                    "info",
                    "info-hover",
                    "info-active",
                    "info-emphasis",
                    "info-on-subtle",
                    "on-info",
                    "info-on-surface"
                ],
                "description": "The Info variable group."
            },
            {
                "name": "success",
                "value": [
                    "success-subtle",
                    "success-subtle-hover",
                    "success-subtle-active",
                    "success",
                    "success-hover",
                    "success-active",
                    "success-emphasis",
                    "success-on-subtle",
                    "on-success",
                    "success-on-surface"
                ],
                "description": "The Success variable group."
            },
            {
                "name": "warning",
                "value": [
                    "warning-subtle",
                    "warning-subtle-hover",
                    "warning-subtle-active",
                    "warning",
                    "warning-hover",
                    "warning-active",
                    "warning-emphasis",
                    "warning-on-subtle",
                    "on-warning",
                    "warning-on-surface"
                ],
                "description": "The Warning variable group."
            },
            {
                "name": "error",
                "value": [
                    "error-subtle",
                    "error-subtle-hover",
                    "error-subtle-active",
                    "error",
                    "error-hover",
                    "error-active",
                    "error-emphasis",
                    "error-on-subtle",
                    "on-error",
                    "error-on-surface"
                ],
                "description": "The Error variable group."
            },
            {
                "name": "light",
                "value": [
                    "light-subtle",
                    "light-subtle-hover",
                    "light-subtle-active",
                    "light",
                    "light-hover",
                    "light-active",
                    "light-emphasis",
                    "light-on-subtle",
                    "on-light",
                    "light-on-surface"
                ],
                "description": "The Light variable group."
            },
            {
                "name": "dark",
                "value": [
                    "dark-subtle",
                    "dark-subtle-hover",
                    "dark-subtle-active",
                    "dark",
                    "dark-hover",
                    "dark-active",
                    "dark-emphasis",
                    "dark-on-subtle",
                    "on-dark",
                    "dark-on-surface"
                ],
                "description": "The Dark variable group."
            },
            {
                "name": "inverse",
                "value": [
                    "inverse-subtle",
                    "inverse-subtle-hover",
                    "inverse-subtle-active",
                    "inverse",
                    "inverse-hover",
                    "inverse-active",
                    "inverse-emphasis",
                    "inverse-on-subtle",
                    "on-inverse",
                    "inverse-on-surface"
                ],
                "description": "The Inverse variable group."
            },
            {
                "name": "series-a",
                "value": [
                    "series-a",
                    "series-a-bold",
                    "series-a-bolder",
                    "series-a-subtle",
                    "series-a-subtler"
                ],
                "description": "The Series A variable group."
            },
            {
                "name": "series-b",
                "value": [
                    "series-b",
                    "series-b-bold",
                    "series-b-bolder",
                    "series-b-subtle",
                    "series-b-subtler"
                ],
                "description": "The Series B variable group."
            },
            {
                "name": "series-c",
                "value": [
                    "series-c",
                    "series-c-bold",
                    "series-c-bolder",
                    "series-c-subtle",
                    "series-c-subtler"
                ],
                "description": "The Series C variable group."
            },
            {
                "name": "series-d",
                "value": [
                    "series-d",
                    "series-d-bold",
                    "series-d-bolder",
                    "series-d-subtle",
                    "series-d-subtler"
                ],
                "description": "The Series D variable group."
            },
            {
                "name": "series-e",
                "value": [
                    "series-e",
                    "series-e-bold",
                    "series-e-bolder",
                    "series-e-subtle",
                    "series-e-subtler"
                ],
                "description": "The Series E variable group."
            },
            {
                "name": "series-f",
                "value": [
                    "series-f",
                    "series-f-bold",
                    "series-f-bolder",
                    "series-f-subtle",
                    "series-f-subtler"
                ],
                "description": "The Series F variable group."
            }
        ],
        "property": [
            {
                "type": "Color",
                "name": "app-surface",
                "description": "The background color of the application."
            },
            {
                "type": "Color",
                "name": "on-app-surface",
                "description": "The text color of the application."
            },
            {
                "type": "Color",
                "name": "subtle",
                "description": "The subtle text color."
            },
            {
                "type": "Color",
                "name": "surface",
                "description": "The background color of the components' chrome area."
            },
            {
                "type": "Color",
                "name": "surface-alt",
                "description": "The alternative background color of the components' chrome area."
            },
            {
                "type": "Color",
                "name": "border",
                "description": "The border color of the application."
            },
            {
                "type": "Color",
                "name": "border-alt",
                "description": "The alternative border color of the application."
            },
            {
                "type": "Color",
                "name": "base-subtle",
                "description": "The base subtle background color variable."
            },
            {
                "type": "Color",
                "name": "base-subtle-hover",
                "description": "The base subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "base-subtle-active",
                "description": "The base subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "base",
                "description": "The base background color variable."
            },
            {
                "type": "Color",
                "name": "base-hover",
                "description": "The base background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "base-active",
                "description": "The base background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "base-emphasis",
                "description": "The emphasized base color variable."
            },
            {
                "type": "Color",
                "name": "base-on-subtle",
                "description": "The text color variable for content on base subtle."
            },
            {
                "type": "Color",
                "name": "on-base",
                "description": "The text color variable for content on base."
            },
            {
                "type": "Color",
                "name": "base-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "primary-subtle",
                "description": "The primary subtle background color variable."
            },
            {
                "type": "Color",
                "name": "primary-subtle-hover",
                "description": "The primary subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "primary-subtle-active",
                "description": "The primary subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "primary",
                "description": "The primary background color variable."
            },
            {
                "type": "Color",
                "name": "primary-hover",
                "description": "The primary background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "primary-active",
                "description": "The primary background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "primary-emphasis",
                "description": "The emphasized primary color variable."
            },
            {
                "type": "Color",
                "name": "primary-on-subtle",
                "description": "The text color variable for content on primary subtle."
            },
            {
                "type": "Color",
                "name": "on-primary",
                "description": "The text color variable for content on primary."
            },
            {
                "type": "Color",
                "name": "primary-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "secondary-subtle",
                "description": "The secondary subtle background color variable."
            },
            {
                "type": "Color",
                "name": "secondary-subtle-hover",
                "description": "The secondary subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "secondary-subtle-active",
                "description": "The secondary subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "secondary",
                "description": "The secondary background color variable."
            },
            {
                "type": "Color",
                "name": "secondary-hover",
                "description": "The secondary background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "secondary-active",
                "description": "The secondary background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "secondary-emphasis",
                "description": "The emphasized secondary color variable."
            },
            {
                "type": "Color",
                "name": "secondary-on-subtle",
                "description": "The text color variable for content on secondary subtle."
            },
            {
                "type": "Color",
                "name": "on-secondary",
                "description": "The text color variable for content on secondary."
            },
            {
                "type": "Color",
                "name": "secondary-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "tertiary-subtle",
                "description": "The tertiary subtle background color variable."
            },
            {
                "type": "Color",
                "name": "tertiary-subtle-hover",
                "description": "The tertiary subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "tertiary-subtle-active",
                "description": "The tertiary subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "tertiary",
                "description": "The tertiary background color variable."
            },
            {
                "type": "Color",
                "name": "tertiary-hover",
                "description": "The tertiary background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "tertiary-active",
                "description": "The tertiary background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "tertiary-emphasis",
                "description": "The emphasized tertiary color variable."
            },
            {
                "type": "Color",
                "name": "tertiary-on-subtle",
                "description": "The text color variable for content on tertiary subtle."
            },
            {
                "type": "Color",
                "name": "on-tertiary",
                "description": "The text color variable for content on tertiary."
            },
            {
                "type": "Color",
                "name": "tertiary-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "info-subtle",
                "description": "The info subtle background color variable."
            },
            {
                "type": "Color",
                "name": "info-subtle-hover",
                "description": "The info subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "info-subtle-active",
                "description": "The info subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "info",
                "description": "The info background color variable."
            },
            {
                "type": "Color",
                "name": "info-hover",
                "description": "The info background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "info-active",
                "description": "The info background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "info-emphasis",
                "description": "The emphasized info color variable."
            },
            {
                "type": "Color",
                "name": "info-on-subtle",
                "description": "The text color variable for content on info subtle."
            },
            {
                "type": "Color",
                "name": "on-info",
                "description": "The text color variable for content on info."
            },
            {
                "type": "Color",
                "name": "info-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "success-subtle",
                "description": "The success subtle background color variable."
            },
            {
                "type": "Color",
                "name": "success-subtle-hover",
                "description": "The success subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "success-subtle-active",
                "description": "The success subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "success",
                "description": "The success background color variable."
            },
            {
                "type": "Color",
                "name": "success-hover",
                "description": "The success background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "success-active",
                "description": "The success background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "success-emphasis",
                "description": "The emphasized success color variable."
            },
            {
                "type": "Color",
                "name": "success-on-subtle",
                "description": "The text color variable for content on success subtle."
            },
            {
                "type": "Color",
                "name": "on-success",
                "description": "The text color variable for content on success."
            },
            {
                "type": "Color",
                "name": "success-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "warning-subtle",
                "description": "The warning subtle background color variable."
            },
            {
                "type": "Color",
                "name": "warning-subtle-hover",
                "description": "The warning subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "warning-subtle-active",
                "description": "The warning subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "warning",
                "description": "The warning background color variable."
            },
            {
                "type": "Color",
                "name": "warning-hover",
                "description": "The warning background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "warning-active",
                "description": "The warning background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "warning-emphasis",
                "description": "The emphasized warning color variable."
            },
            {
                "type": "Color",
                "name": "warning-on-subtle",
                "description": "The text color variable for content on warning subtle."
            },
            {
                "type": "Color",
                "name": "on-warning",
                "description": "The text color variable for content on warning."
            },
            {
                "type": "Color",
                "name": "warning-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "error-subtle",
                "description": "The error subtle background color variable."
            },
            {
                "type": "Color",
                "name": "error-subtle-hover",
                "description": "The error subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "error-subtle-active",
                "description": "The error subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "error",
                "description": "The error background color variable."
            },
            {
                "type": "Color",
                "name": "error-hover",
                "description": "The error background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "error-active",
                "description": "The error background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "error-emphasis",
                "description": "The emphasized error color variable."
            },
            {
                "type": "Color",
                "name": "error-on-subtle",
                "description": "The text color variable for content on error subtle."
            },
            {
                "type": "Color",
                "name": "on-error",
                "description": "The text color variable for content on error."
            },
            {
                "type": "Color",
                "name": "error-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "light-subtle",
                "description": "The light subtle background color variable."
            },
            {
                "type": "Color",
                "name": "light-subtle-hover",
                "description": "The light subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "light-subtle-active",
                "description": "The light subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "light",
                "description": "The light background color variable."
            },
            {
                "type": "Color",
                "name": "light-hover",
                "description": "The light background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "light-active",
                "description": "The light background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "light-emphasis",
                "description": "The emphasized light color variable."
            },
            {
                "type": "Color",
                "name": "light-on-subtle",
                "description": "The text color variable for content on light subtle."
            },
            {
                "type": "Color",
                "name": "on-light",
                "description": "The text color variable for content on light."
            },
            {
                "type": "Color",
                "name": "light-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "dark-subtle",
                "description": "The dark subtle background color variable."
            },
            {
                "type": "Color",
                "name": "dark-subtle-hover",
                "description": "The dark subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "dark-subtle-active",
                "description": "The dark subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "dark",
                "description": "The dark background color variable."
            },
            {
                "type": "Color",
                "name": "dark-hover",
                "description": "The dark background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "dark-active",
                "description": "The dark background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "dark-emphasis",
                "description": "The emphasized dark color variable."
            },
            {
                "type": "Color",
                "name": "dark-on-subtle",
                "description": "The text color variable for content on dark subtle."
            },
            {
                "type": "Color",
                "name": "on-dark",
                "description": "The text color variable for content on dark."
            },
            {
                "type": "Color",
                "name": "dark-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "inverse-subtle",
                "description": "The inverse subtle background color variable."
            },
            {
                "type": "Color",
                "name": "inverse-subtle-hover",
                "description": "The inverse subtle background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "inverse-subtle-active",
                "description": "The inverse subtle background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "inverse",
                "description": "The inverse background color variable."
            },
            {
                "type": "Color",
                "name": "inverse-hover",
                "description": "The inverse background color variable for the hover state."
            },
            {
                "type": "Color",
                "name": "inverse-active",
                "description": "The inverse background color variable for the active state."
            },
            {
                "type": "Color",
                "name": "inverse-emphasis",
                "description": "The emphasized inverse color variable."
            },
            {
                "type": "Color",
                "name": "inverse-on-subtle",
                "description": "The text color variable for content on inverse subtle."
            },
            {
                "type": "Color",
                "name": "on-inverse",
                "description": "The text color variable for content on inverse."
            },
            {
                "type": "Color",
                "name": "inverse-on-surface",
                "description": "The text color variable for content on surface."
            },
            {
                "type": "Color",
                "name": "series-a",
                "description": "The series A color variable."
            },
            {
                "type": "Color",
                "name": "series-a-bold",
                "description": "The bold series A color variable."
            },
            {
                "type": "Color",
                "name": "series-a-bolder",
                "description": "The bolder series A color variable."
            },
            {
                "type": "Color",
                "name": "series-a-subtle",
                "description": "The subtle series A color variable."
            },
            {
                "type": "Color",
                "name": "series-a-subtler",
                "description": "The subtler series A color variable."
            },
            {
                "type": "Color",
                "name": "series-b",
                "description": "The series B color variable."
            },
            {
                "type": "Color",
                "name": "series-b-bold",
                "description": "The bold series B color variable."
            },
            {
                "type": "Color",
                "name": "series-b-bolder",
                "description": "The bolder series B color variable."
            },
            {
                "type": "Color",
                "name": "series-b-subtle",
                "description": "The subtle series B color variable."
            },
            {
                "type": "Color",
                "name": "series-b-subtler",
                "description": "The subtler series B color variable."
            },
            {
                "type": "Color",
                "name": "series-c",
                "description": "The series C color variable."
            },
            {
                "type": "Color",
                "name": "series-c-bold",
                "description": "The bold series C color variable."
            },
            {
                "type": "Color",
                "name": "series-c-bolder",
                "description": "The bolder series C color variable."
            },
            {
                "type": "Color",
                "name": "series-c-subtle",
                "description": "The subtle series C color variable."
            },
            {
                "type": "Color",
                "name": "series-c-subtler",
                "description": "The subtler series C color variable."
            },
            {
                "type": "Color",
                "name": "series-d",
                "description": "The series D color variable."
            },
            {
                "type": "Color",
                "name": "series-d-bold",
                "description": "The bold series D color variable."
            },
            {
                "type": "Color",
                "name": "series-d-bolder",
                "description": "The bolder series D color variable."
            },
            {
                "type": "Color",
                "name": "series-d-subtle",
                "description": "The subtle series D color variable."
            },
            {
                "type": "Color",
                "name": "series-d-subtler",
                "description": "The subtler series D color variable."
            },
            {
                "type": "Color",
                "name": "series-e",
                "description": "The series E color variable."
            },
            {
                "type": "Color",
                "name": "series-e-bold",
                "description": "The bold series E color variable."
            },
            {
                "type": "Color",
                "name": "series-e-bolder",
                "description": "The bolder series E color variable."
            },
            {
                "type": "Color",
                "name": "series-e-subtle",
                "description": "The subtle series E color variable."
            },
            {
                "type": "Color",
                "name": "series-e-subtler",
                "description": "The subtler series E color variable."
            },
            {
                "type": "Color",
                "name": "series-f",
                "description": "The series F color variable."
            },
            {
                "type": "Color",
                "name": "series-f-bold",
                "description": "The bold series F color variable."
            },
            {
                "type": "Color",
                "name": "series-f-bolder",
                "description": "The bolder series F color variable."
            },
            {
                "type": "Color",
                "name": "series-f-subtle",
                "description": "The subtle series F color variable."
            },
            {
                "type": "Color",
                "name": "series-f-subtler",
                "description": "The subtler series F color variable."
            }
        ],
        "access": "public",
        "file": {
            "path": "color-system/_swatch.scss",
            "name": "_swatch.scss"
        },
        "usedBy": [
            {
                "description": "Takes a color name from the $kendo-colors map as a parameter\nand returns a CSS variable with the actual color as a fallback\n",
                "context": {
                    "type": "function",
                    "name": "k-color",
                    "code": "\n    $_color: map.get($kendo-colors, $key);\n\n    @if ($_color) {\n        @return var(--kendo-color-#{$key}, $_color);\n    } @else {\n        @error \"Color Variable \\`#{$key}\\` does not exists in the color collection.\";\n    }\n",
                    "line": {
                        "start": 309,
                        "end": 317
                    }
                }
            }
        ]
    },
    {
        "description": "Set a specific jump point for requesting color jumps\n",
        "commentRange": {
            "start": 197,
            "end": 199
        },
        "context": {
            "type": "variable",
            "name": "kendo-color-level-step",
            "value": "8%",
            "scope": "default",
            "line": {
                "start": 200,
                "end": 200
            }
        },
        "group": [
            "color-system"
        ],
        "access": "private",
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Makes a color lighter by mixing it with white\n",
        "commentRange": {
            "start": 221,
            "end": 229
        },
        "context": {
            "type": "function",
            "name": "k-color-tint",
            "code": "\n    @return k-color-level( $color, -$level );\n",
            "line": {
                "start": 230,
                "end": 232
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to lighten"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to lighten the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The lightened color\n"
        },
        "group": [
            "color-system"
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-tint( #f00, 1 ); // => #ff1a1a",
                "description": "Usage"
            }
        ],
        "access": "public",
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Shades the color in light themes and tints it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-shade",
                    "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                    "line": {
                        "start": 253,
                        "end": 261
                    }
                }
            },
            {
                "description": "Tints the color in light themes and shades it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-tint",
                    "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                    "line": {
                        "start": 269,
                        "end": 277
                    }
                }
            }
        ]
    },
    {
        "description": "Makes a color darker by mixing it with black\n",
        "commentRange": {
            "start": 234,
            "end": 242
        },
        "context": {
            "type": "function",
            "name": "k-color-shade",
            "code": "\n    @return k-color-level( $color, $level );\n",
            "line": {
                "start": 243,
                "end": 245
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to darken"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to darken the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The darkened color\n"
        },
        "group": [
            "color-system"
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-shade( #f00, 1 ); // => #e60000",
                "description": "Usage"
            }
        ],
        "access": "public",
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Shades the color in light themes and tints it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-shade",
                    "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
                    "line": {
                        "start": 253,
                        "end": 261
                    }
                }
            },
            {
                "description": "Tints the color in light themes and shades it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-tint",
                    "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
                    "line": {
                        "start": 269,
                        "end": 277
                    }
                }
            }
        ]
    },
    {
        "description": "Shades the color in light themes and tints it in dark themes\n",
        "commentRange": {
            "start": 247,
            "end": 252
        },
        "context": {
            "type": "function",
            "name": "k-try-shade",
            "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-tint( $color, $level );\n    }\n\n    @return k-color-shade( $color, $level );\n",
            "line": {
                "start": 253,
                "end": 261
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to shade or tint"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to shade or tint the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The shaded or tinted color\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-tint"
            },
            {
                "type": "function",
                "name": "k-color-shade"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            }
        ]
    },
    {
        "description": "Tints the color in light themes and shades it in dark themes\n",
        "commentRange": {
            "start": 263,
            "end": 268
        },
        "context": {
            "type": "function",
            "name": "k-try-tint",
            "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-shade( $color, $level );\n    }\n\n    @return k-color-tint( $color, $level );\n",
            "line": {
                "start": 269,
                "end": 277
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to tint or shade"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to tint or shade the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The tinted or shaded color\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-shade"
            },
            {
                "type": "function",
                "name": "k-color-tint"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            }
        ]
    },
    {
        "description": "Darkens the color in light themes and lightens it in dark themes\n",
        "commentRange": {
            "start": 279,
            "end": 284
        },
        "context": {
            "type": "function",
            "name": "k-try-darken",
            "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
            "line": {
                "start": 285,
                "end": 292
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to darken or lighten"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to darken or lighten the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The darkened or lightened color\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-lighten"
            },
            {
                "type": "function",
                "name": "k-color-darken"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Lightens the color in light themes and darkens it in dark themes\n",
        "commentRange": {
            "start": 294,
            "end": 299
        },
        "context": {
            "type": "function",
            "name": "k-try-lighten",
            "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
            "line": {
                "start": 300,
                "end": 307
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to lighten or darken"
            },
            {
                "type": "Number",
                "name": "level",
                "description": "The amount to lighten or darken the color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The lightened or darkened color\n"
        },
        "group": [
            "color-system"
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-darken"
            },
            {
                "type": "function",
                "name": "k-color-lighten"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Converts a color with alpha to solid color mixed with a background color\n",
        "commentRange": {
            "start": 309,
            "end": 317
        },
        "context": {
            "type": "function",
            "name": "k-rgba-to-mix",
            "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
            "line": {
                "start": 318,
                "end": 322
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to convert"
            },
            {
                "type": "Color",
                "name": "bg",
                "description": "The background color"
            }
        ],
        "return": {
            "type": "Color",
            "description": "The converted color\n"
        },
        "group": [
            "color-system"
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-rgba-to-mix( rgba( #f00, 0.5 ), #fff ); // => #ff8080",
                "description": "Usage"
            }
        ],
        "access": "public",
        "require": [
            {
                "type": "function",
                "name": "k-color-alpha"
            },
            {
                "type": "function",
                "name": "k-color-mix"
            }
        ],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "The global default Elevation map.\n",
        "commentRange": {
            "start": 42,
            "end": 43
        },
        "context": {
            "type": "variable",
            "name": "kendo-elevation",
            "value": "$_default-elevation",
            "scope": "default",
            "line": {
                "start": 44,
                "end": 44
            }
        },
        "group": [
            "elevation"
        ],
        "access": "public",
        "file": {
            "path": "elevation/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The Gray Palette provides colors to the Base, Secondary, Light, Dark, and Inverse variable groups.\n",
        "commentRange": {
            "start": 223,
            "end": 224
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-gray",
            "value": "$_default-palette-gray",
            "scope": "default",
            "line": {
                "start": 225,
                "end": 225
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Coral Palette provides colors to the Primary and Series A variable groups.\n",
        "commentRange": {
            "start": 228,
            "end": 229
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-coral",
            "value": "$_default-palette-coral",
            "scope": "default",
            "line": {
                "start": 230,
                "end": 230
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Sky Blue Palette provides colors to the Tertiary variable group.\n",
        "commentRange": {
            "start": 233,
            "end": 234
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-sky-blue",
            "value": "$_default-palette-sky-blue",
            "scope": "default",
            "line": {
                "start": 235,
                "end": 235
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Green Palette provides colors to the Success variable group.\n",
        "commentRange": {
            "start": 238,
            "end": 239
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-green",
            "value": "$_default-palette-green",
            "scope": "default",
            "line": {
                "start": 240,
                "end": 240
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Blue Palette provides colors to the Info variable group.\n",
        "commentRange": {
            "start": 243,
            "end": 244
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-blue",
            "value": "$_default-palette-blue",
            "scope": "default",
            "line": {
                "start": 245,
                "end": 245
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Yellow Palette provides colors to the Warning variable group.\n",
        "commentRange": {
            "start": 248,
            "end": 249
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-yellow",
            "value": "$_default-palette-yellow",
            "scope": "default",
            "line": {
                "start": 250,
                "end": 250
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Red Palette provides colors to the Error variable group.\n",
        "commentRange": {
            "start": 253,
            "end": 254
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-red",
            "value": "$_default-palette-red",
            "scope": "default",
            "line": {
                "start": 255,
                "end": 255
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Lemon Yellow Palette provides colors to the Series B variable group.\n",
        "commentRange": {
            "start": 258,
            "end": 259
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-lemon-yellow",
            "value": "$_default-palette-lemon-yellow",
            "scope": "default",
            "line": {
                "start": 260,
                "end": 260
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Spring Green Palette provides colors to the Series C variable group.\n",
        "commentRange": {
            "start": 263,
            "end": 264
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-spring-green",
            "value": "$_default-palette-spring-green",
            "scope": "default",
            "line": {
                "start": 265,
                "end": 265
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Royal Blue Palette provides colors to the Series D variable group.\n",
        "commentRange": {
            "start": 268,
            "end": 269
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-royal-blue",
            "value": "$_default-palette-royal-blue",
            "scope": "default",
            "line": {
                "start": 270,
                "end": 270
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Lavender Purple Palette provides colors to the Series E variable group.\n",
        "commentRange": {
            "start": 273,
            "end": 274
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-lavender-purple",
            "value": "$_default-palette-lavender-purple",
            "scope": "default",
            "line": {
                "start": 275,
                "end": 275
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The Flamingo Pink Palette provides colors to the Series F variable group.\n",
        "commentRange": {
            "start": 278,
            "end": 279
        },
        "context": {
            "type": "variable",
            "name": "kendo-palette-flamingo-pink",
            "value": "$_default-palette-flamingo-pink",
            "scope": "default",
            "line": {
                "start": 280,
                "end": 280
            }
        },
        "group": [
            "palette"
        ],
        "access": "public",
        "file": {
            "path": "color-system/_palettes.scss",
            "name": "_palettes.scss"
        }
    },
    {
        "description": "The none border radius used across the Components.\n",
        "commentRange": {
            "start": 4,
            "end": 5
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-none",
            "value": "map.get($kendo-spacing, 0)",
            "scope": "default",
            "line": {
                "start": 6,
                "end": 6
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The extra small border radius used across the Components.\n",
        "commentRange": {
            "start": 7,
            "end": 8
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-xs",
            "value": "map.get($kendo-spacing, 1px)",
            "scope": "default",
            "line": {
                "start": 9,
                "end": 9
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The small border radius used across the Components.\n",
        "commentRange": {
            "start": 10,
            "end": 11
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-sm",
            "value": "map.get($kendo-spacing, 0.5)",
            "scope": "default",
            "line": {
                "start": 12,
                "end": 12
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The medium border radius used across the Components.\n",
        "commentRange": {
            "start": 13,
            "end": 14
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-md",
            "value": "map.get($kendo-spacing, 1)",
            "scope": "default",
            "line": {
                "start": 15,
                "end": 15
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The large border radius used across the Components.\n",
        "commentRange": {
            "start": 16,
            "end": 17
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-lg",
            "value": "map.get($kendo-spacing, 1.5)",
            "scope": "default",
            "line": {
                "start": 18,
                "end": 18
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The extra large border radius used across the Components.\n",
        "commentRange": {
            "start": 19,
            "end": 20
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-xl",
            "value": "map.get($kendo-spacing, 2)",
            "scope": "default",
            "line": {
                "start": 21,
                "end": 21
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The third largest border radius used across the Components.\n",
        "commentRange": {
            "start": 22,
            "end": 23
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-xxl",
            "value": "map.get($kendo-spacing, 3)",
            "scope": "default",
            "line": {
                "start": 24,
                "end": 24
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The second largest border radius used across the Components.\n",
        "commentRange": {
            "start": 25,
            "end": 26
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-xxxl",
            "value": "map.get($kendo-spacing, 4)",
            "scope": "default",
            "line": {
                "start": 27,
                "end": 27
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The largest border radius used across the Components.\n",
        "commentRange": {
            "start": 28,
            "end": 29
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radius-full",
            "value": "9999px",
            "scope": "default",
            "line": {
                "start": 30,
                "end": 30
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The global radii Map.\n",
        "commentRange": {
            "start": 48,
            "end": 49
        },
        "context": {
            "type": "variable",
            "name": "kendo-border-radii",
            "value": "map.merge($_default-border-radii, $kendo-border-radii)",
            "scope": "private",
            "line": {
                "start": 50,
                "end": 50
            }
        },
        "group": [
            "radii"
        ],
        "access": "public",
        "file": {
            "path": "border-radii/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The global default Spacing map.\n",
        "commentRange": {
            "start": 47,
            "end": 48
        },
        "context": {
            "type": "variable",
            "name": "kendo-spacing",
            "value": "$_default-spacing",
            "scope": "default",
            "line": {
                "start": 49,
                "end": 49
            }
        },
        "group": [
            "spacing"
        ],
        "access": "public",
        "file": {
            "path": "spacing/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The base font size across all components.\n",
        "commentRange": {
            "start": 5,
            "end": 6
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-size",
            "value": "0.875rem",
            "scope": "default",
            "line": {
                "start": 7,
                "end": 7
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The extra extra small font size across all components.\n",
        "commentRange": {
            "start": 8,
            "end": 9
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-size-xxs",
            "value": "0.5rem",
            "scope": "default",
            "line": {
                "start": 10,
                "end": 10
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The extra small font size across all components.\n",
        "commentRange": {
            "start": 11,
            "end": 12
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-size-xs",
            "value": "0.625rem",
            "scope": "default",
            "line": {
                "start": 13,
                "end": 13
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The small font size across all components.\n",
        "commentRange": {
            "start": 14,
            "end": 15
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-size-sm",
            "value": "0.75rem",
            "scope": "default",
            "line": {
                "start": 16,
                "end": 16
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The medium font size across all components.\n",
        "commentRange": {
            "start": 17,
            "end": 18
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-size-md",
            "value": "$kendo-font-size",
            "scope": "default",
            "line": {
                "start": 19,
                "end": 19
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The large font size across all components.\n",
        "commentRange": {
            "start": 20,
            "end": 21
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-size-lg",
            "value": "1rem",
            "scope": "default",
            "line": {
                "start": 22,
                "end": 22
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The extra large font size across all components.\n",
        "commentRange": {
            "start": 23,
            "end": 24
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-size-xl",
            "value": "1.25rem",
            "scope": "default",
            "line": {
                "start": 25,
                "end": 25
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The base line height across all components.\n",
        "commentRange": {
            "start": 27,
            "end": 28
        },
        "context": {
            "type": "variable",
            "name": "kendo-line-height",
            "value": "math.div( 20, 14 )",
            "scope": "default",
            "line": {
                "start": 29,
                "end": 29
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The extra small line height across all components.\n",
        "commentRange": {
            "start": 30,
            "end": 31
        },
        "context": {
            "type": "variable",
            "name": "kendo-line-height-xs",
            "value": "1",
            "scope": "default",
            "line": {
                "start": 32,
                "end": 32
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The small line height across all components.\n",
        "commentRange": {
            "start": 33,
            "end": 34
        },
        "context": {
            "type": "variable",
            "name": "kendo-line-height-sm",
            "value": "1.25",
            "scope": "default",
            "line": {
                "start": 35,
                "end": 35
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The medium line height across all components.\n",
        "commentRange": {
            "start": 36,
            "end": 37
        },
        "context": {
            "type": "variable",
            "name": "kendo-line-height-md",
            "value": "$kendo-line-height",
            "scope": "default",
            "line": {
                "start": 38,
                "end": 38
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The large line height across all components.\n",
        "commentRange": {
            "start": 39,
            "end": 40
        },
        "context": {
            "type": "variable",
            "name": "kendo-line-height-lg",
            "value": "1.5",
            "scope": "default",
            "line": {
                "start": 41,
                "end": 41
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The base line height in ems across all components.\n",
        "commentRange": {
            "start": 42,
            "end": 43
        },
        "context": {
            "type": "variable",
            "name": "kendo-line-height-em",
            "value": "calc( #{$kendo-line-height-md} * 1em )",
            "scope": "default",
            "line": {
                "start": 44,
                "end": 44
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The base font weight across all components.\n",
        "commentRange": {
            "start": 46,
            "end": 47
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight",
            "value": "400",
            "scope": "default",
            "line": {
                "start": 48,
                "end": 48
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The thin font weight across all components.\n",
        "commentRange": {
            "start": 49,
            "end": 50
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-thin",
            "value": "100",
            "scope": "default",
            "line": {
                "start": 51,
                "end": 51
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The extra light font weight across all components.\n",
        "commentRange": {
            "start": 52,
            "end": 53
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-extra-light",
            "value": "200",
            "scope": "default",
            "line": {
                "start": 54,
                "end": 54
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The light font weight across all components.\n",
        "commentRange": {
            "start": 55,
            "end": 56
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-light",
            "value": "300",
            "scope": "default",
            "line": {
                "start": 57,
                "end": 57
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The normal font weight across all components.\n",
        "commentRange": {
            "start": 58,
            "end": 59
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-normal",
            "value": "$kendo-font-weight",
            "scope": "default",
            "line": {
                "start": 60,
                "end": 60
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The medium font weight across all components.\n",
        "commentRange": {
            "start": 61,
            "end": 62
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-medium",
            "value": "500",
            "scope": "default",
            "line": {
                "start": 63,
                "end": 63
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The semibold font weight across all components.\n",
        "commentRange": {
            "start": 64,
            "end": 65
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-semibold",
            "value": "600",
            "scope": "default",
            "line": {
                "start": 66,
                "end": 66
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The bold font weight across all components.\n",
        "commentRange": {
            "start": 67,
            "end": 68
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-bold",
            "value": "700",
            "scope": "default",
            "line": {
                "start": 69,
                "end": 69
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The extra bold font weight across all components.\n",
        "commentRange": {
            "start": 70,
            "end": 71
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-extra-bold",
            "value": "800",
            "scope": "default",
            "line": {
                "start": 72,
                "end": 72
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The most pronounced font weight across all components.\n",
        "commentRange": {
            "start": 73,
            "end": 74
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weight-black",
            "value": "900",
            "scope": "default",
            "line": {
                "start": 75,
                "end": 75
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The base letter spacing across all components.\n",
        "commentRange": {
            "start": 77,
            "end": 78
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacing",
            "value": "null",
            "scope": "default",
            "line": {
                "start": 79,
                "end": 79
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The tightest letter spacing across all components.\n",
        "commentRange": {
            "start": 80,
            "end": 81
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacing-tightest",
            "value": "-.15px",
            "scope": "default",
            "line": {
                "start": 82,
                "end": 82
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "Slightly looser than the tighter letter spacing across all components.\n",
        "commentRange": {
            "start": 83,
            "end": 84
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacing-tighter",
            "value": "-.10px",
            "scope": "default",
            "line": {
                "start": 85,
                "end": 85
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "Moderately tight letter spacing across all components.\n",
        "commentRange": {
            "start": 86,
            "end": 87
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacing-tight",
            "value": "-.5px",
            "scope": "default",
            "line": {
                "start": 88,
                "end": 88
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The normal letter spacing across all components.\n",
        "commentRange": {
            "start": 89,
            "end": 90
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacing-normal",
            "value": "0px",
            "scope": "default",
            "line": {
                "start": 91,
                "end": 91
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "Wide letter spacing across all components.\n",
        "commentRange": {
            "start": 92,
            "end": 93
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacing-wide",
            "value": ".5px",
            "scope": "default",
            "line": {
                "start": 94,
                "end": 94
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "Slightly wider than the wide letter spacing across all components.\n",
        "commentRange": {
            "start": 95,
            "end": 96
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacing-wider",
            "value": ".10px",
            "scope": "default",
            "line": {
                "start": 97,
                "end": 97
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The widest letter spacing across all components.\n",
        "commentRange": {
            "start": 98,
            "end": 99
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacing-widest",
            "value": ".15px",
            "scope": "default",
            "line": {
                "start": 100,
                "end": 100
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The sans font family across all components.\n",
        "commentRange": {
            "start": 102,
            "end": 103
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-family-sans",
            "value": "Arial, Verdana, Tahoma, \"Trebuchet MS\", Helvetica, Impact, Gill Sans",
            "scope": "default",
            "line": {
                "start": 104,
                "end": 104
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The serif font family across all components.\n",
        "commentRange": {
            "start": 105,
            "end": 106
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-family-serif",
            "value": "\"Times New Roman\", Georgia, Garamond, Palatino, Baskerville",
            "scope": "default",
            "line": {
                "start": 107,
                "end": 107
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The sans-serif font family across all components.\n",
        "commentRange": {
            "start": 108,
            "end": 109
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-family-sans-serif",
            "value": "system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"",
            "scope": "default",
            "line": {
                "start": 110,
                "end": 110
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The monospace font family across all components.\n",
        "commentRange": {
            "start": 111,
            "end": 112
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-family-monospace",
            "value": "SFMono-Regular, Menlo, Monaco, Consolas, \"Roboto Mono\", \"Ubuntu Mono\", \"Lucida Console\", \"Courier New\", monospace",
            "scope": "default",
            "line": {
                "start": 113,
                "end": 113
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The base font family across all components.\n",
        "commentRange": {
            "start": 115,
            "end": 116
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-family",
            "value": "inherit",
            "scope": "default",
            "line": {
                "start": 117,
                "end": 117
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The font sizes map\n",
        "commentRange": {
            "start": 166,
            "end": 167
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-sizes",
            "value": "map.merge( $_default-font-sizes, $kendo-font-sizes )",
            "scope": "private",
            "line": {
                "start": 168,
                "end": 168
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The line heights map\n",
        "commentRange": {
            "start": 172,
            "end": 173
        },
        "context": {
            "type": "variable",
            "name": "kendo-line-heights",
            "value": "map.merge( $_default-line-heights, $kendo-line-heights )",
            "scope": "private",
            "line": {
                "start": 174,
                "end": 174
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The font weights map\n",
        "commentRange": {
            "start": 178,
            "end": 179
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-weights",
            "value": "map.merge( $_default-font-weights, $kendo-font-weights )",
            "scope": "private",
            "line": {
                "start": 180,
                "end": 180
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The letter spacings map\n",
        "commentRange": {
            "start": 184,
            "end": 185
        },
        "context": {
            "type": "variable",
            "name": "kendo-letter-spacings",
            "value": "map.merge( $_default-letter-spacings, $kendo-letter-spacings )",
            "scope": "private",
            "line": {
                "start": 186,
                "end": 186
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "The font families map\n",
        "commentRange": {
            "start": 190,
            "end": 191
        },
        "context": {
            "type": "variable",
            "name": "kendo-font-families",
            "value": "map.merge( $_default-font-families, $kendo-font-families )",
            "scope": "private",
            "line": {
                "start": 192,
                "end": 192
            }
        },
        "group": [
            "typography"
        ],
        "access": "public",
        "file": {
            "path": "typography/index.import.scss",
            "name": "index.import.scss"
        }
    },
    {
        "description": "Returns the alpha channel of a color.\n",
        "commentRange": {
            "start": 10,
            "end": 16
        },
        "context": {
            "type": "function",
            "name": "k-color-alpha",
            "code": "\n    @return color.alpha( $color );\n",
            "line": {
                "start": 17,
                "end": 19
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the alpha channel for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The alpha channel of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-alpha( rgba( 0, 0, 0, 0.5 ) ); // => 0.5\n@debug k-color-alpha( #000 ); // => 1",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Converts a color with alpha to solid color mixed with a background color\n",
                "context": {
                    "type": "function",
                    "name": "k-rgba-to-mix",
                    "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
                    "line": {
                        "start": 318,
                        "end": 322
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the red channel of a color.\n",
        "commentRange": {
            "start": 21,
            "end": 26
        },
        "context": {
            "type": "function",
            "name": "k-color-red",
            "code": "\n    @if meta.function-exists(\"channel\", \"color\") {\n        @return math.round(color.channel( $color, \"red\" ));\n    }\n    @return red( $color );\n",
            "line": {
                "start": 27,
                "end": 32
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the red channel for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The red channel of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-red( #ff0000 ); // => 255",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: list.nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: list.nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: list.nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 621,
                        "end": 627
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the green channel of a color.\n",
        "commentRange": {
            "start": 34,
            "end": 39
        },
        "context": {
            "type": "function",
            "name": "k-color-green",
            "code": "\n    @if meta.function-exists(\"channel\", \"color\") {\n        @return math.round(color.channel( $color, \"green\" ));\n    }\n    @return green( $color );\n",
            "line": {
                "start": 40,
                "end": 45
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the green channel for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The green channel of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-green( #00ff00 ); // => 255",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: list.nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: list.nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: list.nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 621,
                        "end": 627
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the blue channel of a color.\n",
        "commentRange": {
            "start": 47,
            "end": 52
        },
        "context": {
            "type": "function",
            "name": "k-color-blue",
            "code": "\n    @if meta.function-exists(\"channel\", \"color\") {\n        @return math.round(color.channel( $color, \"blue\" ));\n    }\n    @return blue( $color );\n",
            "line": {
                "start": 53,
                "end": 58
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the blue channel for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The blue channel of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-blue( #0000ff ); // => 255",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Calculate the relative luminance for a color.\n",
                "context": {
                    "type": "function",
                    "name": "k-color-luminance",
                    "code": "\n    $red: list.nth( $_linear-channel-values, k-color-red( $color ) + 1 );\n    $green: list.nth( $_linear-channel-values, k-color-green( $color ) + 1 );\n    $blue: list.nth( $_linear-channel-values, k-color-blue( $color ) + 1 );\n\n    @return .2126 * $red + .7152 * $green + .0722 * $blue;\n",
                    "line": {
                        "start": 621,
                        "end": 627
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the hue of a color.\n",
        "commentRange": {
            "start": 60,
            "end": 65
        },
        "context": {
            "type": "function",
            "name": "k-color-hue",
            "code": "\n    @if meta.function-exists(\"channel\", \"color\") {\n        @return color.channel( $color, \"hue\" );\n    }\n    @return  hue( $color );\n",
            "line": {
                "start": 66,
                "end": 71
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the hue for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The hue of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-hue( #e1d7d2 ); // => 20deg",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the saturation of a color.\n",
        "commentRange": {
            "start": 73,
            "end": 78
        },
        "context": {
            "type": "function",
            "name": "k-color-saturation",
            "code": "\n    @if meta.function-exists(\"channel\", \"color\") {\n        @return color.channel( $color, \"saturation\" );\n    }\n    @return saturation( $color );\n",
            "line": {
                "start": 79,
                "end": 84
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the saturation for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The saturation of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-saturation( #e1d7d2 ); // => 20%",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the lightness of a color.\n",
        "commentRange": {
            "start": 86,
            "end": 91
        },
        "context": {
            "type": "function",
            "name": "k-color-lightness",
            "code": "\n    @if meta.function-exists(\"channel\", \"color\") {\n        @return color.channel( $color, \"lightness\" );\n    }\n    @return lightness( $color );\n",
            "line": {
                "start": 92,
                "end": 97
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the lightness for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The lightness of the color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-lightness( #e1d7d2 ); // => 80%",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns a color that is a mix of two colors.\n",
        "commentRange": {
            "start": 99,
            "end": 106
        },
        "context": {
            "type": "function",
            "name": "k-color-mix",
            "code": "\n    @return color.mix( $color1, $color2, $weight );\n",
            "line": {
                "start": 107,
                "end": 109
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color1",
                "description": "The first color."
            },
            {
                "type": "Color",
                "name": "color2",
                "description": "The second color."
            },
            {
                "type": "Number",
                "name": "weight",
                "description": "The weight of the first color in the mix."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The mixed color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-mix( #f00, #00f ); // => #800080",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Converts a color with alpha to solid color mixed with a background color\n",
                "context": {
                    "type": "function",
                    "name": "k-rgba-to-mix",
                    "code": "\n    $percent: k-color-alpha( $color ) * 100%;\n\n    @return k-color-mix( rgba( $color, 1 ), $bg, $percent );\n",
                    "line": {
                        "start": 318,
                        "end": 322
                    }
                }
            }
        ]
    },
    {
        "description": "Makes a color darker by decreasing its lightness.\n",
        "commentRange": {
            "start": 111,
            "end": 117
        },
        "context": {
            "type": "function",
            "name": "k-color-darken",
            "code": "\n    @return color.adjust( $color, $lightness: - $amount );\n",
            "line": {
                "start": 118,
                "end": 120
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to darken."
            },
            {
                "type": "Number",
                "name": "amount",
                "description": "The amount to darken the color."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The darkened color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-darken( #f00, 10% ); // => #e60000",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Generates all color variations of a given main color\n",
                "context": {
                    "type": "function",
                    "name": "k-generate-color-variations",
                    "code": "\n    $result: ();\n\n    // DataViz\n    @if (\n            $name == 'series-a' or\n            $name == 'series-b' or\n            $name == 'series-c' or\n            $name == 'series-d' or\n            $name == 'series-e' or\n            $name == 'series-f'\n        ) {\n        $_variations: (\n            #{$name}: $color,\n            #{$name}-bold: color.mix(black, $color, 25%),\n            #{$name}-bolder: color.mix(black, $color, 50%),\n            #{$name}-subtle: color.mix(white, $color, 25%),\n            #{$name}-subtler: color.mix(white, $color, 50%),\n        );\n\n        $result: map.merge($result, $_variations);\n    } @else {\n        // Default\n        @if ( $theme == 'default' or $theme == null ) { // stylelint-disable-line\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 4% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 13% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 75% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 75% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Bootstrap\n        @if ( $theme == 'bootstrap' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 30% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', $color, k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-color-darken( $color, 7.5% ),\n                #{$name}-active: k-color-darken( $color, 10% ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 21% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Material\n        @if ( $theme == 'material' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 16% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 24% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 32% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 87% ), k-contrast-color( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 87% ), k-try-shade( $color, 50% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Fluent\n        @if ( $theme == 'fluent' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-shade( $color, 2% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-shade( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 12% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 0.5 ),\n                #{$name}-active: k-try-shade( $color, 1.5 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 18% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 74% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 86% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 86% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n\n        // Classic\n        @if ( $theme == 'classic' ) {\n            $_variations: (\n                #{$name}-subtle: if( $name == 'base', k-try-tint( $color, 20% ), k-try-tint( $color, 80% )),\n                #{$name}-subtle-hover: if( $name == 'base', k-try-tint( $color, 8% ), k-try-tint($color, 65% )),\n                #{$name}-subtle-active: if( $name == 'base', k-try-shade( $color, 6% ), k-try-tint( $color, 50% )),\n                #{$name}: $color,\n                #{$name}-hover: k-try-shade( $color, 1 ),\n                #{$name}-active: k-try-shade( $color, 2 ),\n                #{$name}-emphasis: if( $name == 'base', k-try-shade( $color, 14% ), k-try-tint( $color, 25% )),\n                #{$name}-on-subtle: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 65% )),\n                on-#{$name}: if( $name == 'base', k-try-shade( $color, 84% ), k-contrast-legacy( $color )),\n                #{$name}-on-surface: if( $name == 'base', k-try-shade( $color, 84% ), k-try-shade( $color, 25% )),\n            );\n\n            $result: map.merge($result, $_variations);\n        }\n    }\n\n    @return $result;\n",
                    "line": {
                        "start": 187,
                        "end": 301
                    }
                }
            },
            {
                "description": "Darkens the color in light themes and lightens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-darken",
                    "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                    "line": {
                        "start": 285,
                        "end": 292
                    }
                }
            },
            {
                "description": "Lightens the color in light themes and darkens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-lighten",
                    "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                    "line": {
                        "start": 300,
                        "end": 307
                    }
                }
            }
        ]
    },
    {
        "description": "Makes a color lighter by increasing its lightness.\n",
        "commentRange": {
            "start": 122,
            "end": 128
        },
        "context": {
            "type": "function",
            "name": "k-color-lighten",
            "code": "\n    @return color.adjust( $color, $lightness: $amount );\n",
            "line": {
                "start": 129,
                "end": 131
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to lighten."
            },
            {
                "type": "Number",
                "name": "amount",
                "description": "The amount to lighten the color."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The lightened color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-lighten( #f00, 10% ); // => #ff1a1a",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        },
        "usedBy": [
            {
                "description": "Darkens the color in light themes and lightens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-darken",
                    "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-lighten( $color, $amount );\n    }\n    @return k-color-darken( $color, $amount );\n",
                    "line": {
                        "start": 285,
                        "end": 292
                    }
                }
            },
            {
                "description": "Lightens the color in light themes and darkens it in dark themes\n",
                "context": {
                    "type": "function",
                    "name": "k-try-lighten",
                    "code": "\n    $_dark-theme: if( meta.variable-exists( kendo-is-dark-theme ), $_is-dark-theme, false );\n\n    @if $_dark-theme {\n        @return k-color-darken( $color, $amount );\n    }\n    @return k-color-lighten( $color, $amount );\n",
                    "line": {
                        "start": 300,
                        "end": 307
                    }
                }
            }
        ]
    },
    {
        "description": "Increases or decreases the hue of a color.\n",
        "commentRange": {
            "start": 133,
            "end": 139
        },
        "context": {
            "type": "function",
            "name": "k-color-adjust-hue",
            "code": "\n    @return color.adjust( $color, $hue: $degrees );\n",
            "line": {
                "start": 140,
                "end": 142
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to adjust the hue for."
            },
            {
                "type": "Number",
                "name": "degrees",
                "description": "The amount to adjust the hue."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The adjusted color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-adjust-hue( #f00, 10deg ); // => #ff1a00",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Increases the saturation of a color.\n",
        "commentRange": {
            "start": 144,
            "end": 150
        },
        "context": {
            "type": "function",
            "name": "k-color-saturate",
            "code": "\n    @return color.adjust( $color, $saturation: $amount );\n",
            "line": {
                "start": 151,
                "end": 153
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to saturate."
            },
            {
                "type": "Number",
                "name": "amount",
                "description": "The amount to saturate the color."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The saturated color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-saturate( #f00, 10% ); // => #ff3333",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Decreases the saturation of a color.\n",
        "commentRange": {
            "start": 155,
            "end": 161
        },
        "context": {
            "type": "function",
            "name": "k-color-desaturate",
            "code": "\n    @return color.adjust( $color, $saturation: - $amount );\n",
            "line": {
                "start": 162,
                "end": 164
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to desaturate."
            },
            {
                "type": "Number",
                "name": "amount",
                "description": "The amount to desaturate the color."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The desaturated color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-desaturate( #f00, 10% ); // => #e60000",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns a gray color with the same lightness as the input color.\n",
        "commentRange": {
            "start": 166,
            "end": 171
        },
        "context": {
            "type": "function",
            "name": "k-color-grayscale",
            "code": "\n    @return color.grayscale( $color );\n",
            "line": {
                "start": 172,
                "end": 174
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to convert to grayscale."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The grayscale color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-grayscale( #f00 ); // => #808080",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the RGB complement of a color. This identical to adjusting the hue\nby 180 degrees.\n",
        "commentRange": {
            "start": 176,
            "end": 182
        },
        "context": {
            "type": "function",
            "name": "k-color-complement",
            "code": "\n    @return color.complement( $color );\n",
            "line": {
                "start": 183,
                "end": 185
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to get the complement for."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The complement color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-complement( #f00 ); // => #00ffff",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the inverse of a color.\n",
        "commentRange": {
            "start": 187,
            "end": 192
        },
        "context": {
            "type": "function",
            "name": "k-color-invert",
            "code": "\n    @return color.invert( $color );\n",
            "line": {
                "start": 193,
                "end": 195
            }
        },
        "parameter": [
            {
                "type": "Color",
                "name": "color",
                "description": "The color to invert."
            }
        ],
        "return": {
            "type": "Color",
            "description": "The inverted color.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-color-invert( #f00 ); // => #00ffff",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_color.import.scss",
            "name": "_color.import.scss"
        }
    },
    {
        "description": "Returns the value of a variable if it is not null,\notherwise returns the fallback value.\n",
        "commentRange": {
            "start": 1,
            "end": 11
        },
        "context": {
            "type": "function",
            "name": "k-if-var",
            "code": "\n    @return if( $var != null, $var, $fallback );\n",
            "line": {
                "start": 12,
                "end": 14
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "var",
                "description": "The variable to check."
            },
            {
                "type": "Any",
                "name": "fallback",
                "description": "The fallback value."
            }
        ],
        "return": {
            "type": "Any",
            "description": "The value of the variable or the fallback value.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "$foo: null;\n@debug k-if-var( $foo, \"bar\" ); // => \"bar\"\n$foo: \"baz\";\n@debug k-if-var( $foo, \"bar\" ); // => \"baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_lang.import.scss",
            "name": "_lang.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$list` with `$val` appended to the end.\n",
        "commentRange": {
            "start": 3,
            "end": 10
        },
        "context": {
            "type": "function",
            "name": "k-list-append",
            "code": "\n    @return list.append( $list, $val, $separator );\n",
            "line": {
                "start": 11,
                "end": 13
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to process."
            },
            {
                "type": "Any",
                "name": "val",
                "description": "The value to append to `$list`."
            },
            {
                "type": "String",
                "name": "separator",
                "description": "The separator to use between `$list` and `$val`."
            }
        ],
        "return": {
            "type": "List",
            "description": "A copy of `$list` with `$val` appended to the end.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-append( ( \"foo\", \"bar\" ), \"baz\" ); // => \"foo, bar, baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        },
        "usedBy": [
            {
                "description": "Reverse the order of items in `$list`.\n",
                "context": {
                    "type": "function",
                    "name": "k-list-reverse",
                    "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                    "line": {
                        "start": 90,
                        "end": 105
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$list` contains `$value`.\n",
        "commentRange": {
            "start": 15,
            "end": 22
        },
        "context": {
            "type": "function",
            "name": "k-list-includes",
            "code": "\n    @return k-list-index( $list, $value ) != null;\n",
            "line": {
                "start": 23,
                "end": 25
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            },
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check for."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$list` contains `$value`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-includes( ( \"foo\", \"bar\" ), \"foo\" ); // => true\n@debug k-list-includes( ( \"foo\", \"bar\" ), \"baz\" ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-list-index"
            }
        ],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns the index of `$value` in `$list`.\n",
        "commentRange": {
            "start": 27,
            "end": 33
        },
        "context": {
            "type": "function",
            "name": "k-list-index",
            "code": "\n    @return list.index( $list, $value );\n",
            "line": {
                "start": 34,
                "end": 36
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            },
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The index of `$value` in `$list`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-index( ( \"foo\", \"bar\" ), \"foo\" ); // => 1",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$list` contains `$value`.\n",
                "context": {
                    "type": "function",
                    "name": "k-list-includes",
                    "code": "\n    @return k-list-index( $list, $value ) != null;\n",
                    "line": {
                        "start": 23,
                        "end": 25
                    }
                }
            }
        ]
    },
    {
        "description": "Returns whether `$list` is bracketed.\n",
        "commentRange": {
            "start": 38,
            "end": 44
        },
        "context": {
            "type": "function",
            "name": "k-list-is-bracketed",
            "code": "\n    @return list.is-bracketed( $list );\n",
            "line": {
                "start": 45,
                "end": 47
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$list` is bracketed.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-is-bracketed( ( \"foo\", \"bar\" ) ); // => false\n@debug k-list-is-bracketed( [ \"foo\", \"bar\" ] ); // => true",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Joins two lists together.\n",
        "commentRange": {
            "start": 49,
            "end": 58
        },
        "context": {
            "type": "function",
            "name": "k-list-join",
            "code": "\n    @return list.join( $list1, $list2, $separator, $bracketed );\n",
            "line": {
                "start": 59,
                "end": 61
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list1",
                "description": "The first list to join."
            },
            {
                "type": "List",
                "name": "list2",
                "description": "The second list to join."
            },
            {
                "type": "String",
                "name": "separator",
                "description": "The separator to use between `$list1` and `$list2`."
            },
            {
                "type": "Boolean",
                "name": "bracketed",
                "description": "Whether the result should be bracketed."
            }
        ],
        "return": {
            "type": "List",
            "description": "The joined list.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-join( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ) ); // => \"foo, bar, baz, qux\"\n@debug k-list-join( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ), \" \" ); // => \"foo bar baz qux\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns the length of `$list`.\n",
        "commentRange": {
            "start": 63,
            "end": 68
        },
        "context": {
            "type": "function",
            "name": "k-list-length",
            "code": "\n    @return list.length( $list );\n",
            "line": {
                "start": 69,
                "end": 71
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The length of `$list`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-length( ( \"foo\", \"bar\" ) ); // => 2",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        },
        "usedBy": [
            {
                "description": "Reverse the order of items in `$list`.\n",
                "context": {
                    "type": "function",
                    "name": "k-list-reverse",
                    "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                    "line": {
                        "start": 90,
                        "end": 105
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the nth item in `$list`.\n",
        "commentRange": {
            "start": 73,
            "end": 79
        },
        "context": {
            "type": "function",
            "name": "k-list-nth",
            "code": "\n    @return list.nth( $list, $n );\n",
            "line": {
                "start": 80,
                "end": 82
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            },
            {
                "type": "Number",
                "name": "n",
                "description": "The index of the item to return."
            }
        ],
        "return": {
            "type": "Any",
            "description": "The nth item in `$list`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-nth( ( \"foo\", \"bar\" ), 1 ); // => \"foo\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        },
        "usedBy": [
            {
                "description": "Reverse the order of items in `$list`.\n",
                "context": {
                    "type": "function",
                    "name": "k-list-reverse",
                    "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
                    "line": {
                        "start": 90,
                        "end": 105
                    }
                }
            }
        ]
    },
    {
        "description": "Reverse the order of items in `$list`.\n",
        "commentRange": {
            "start": 84,
            "end": 89
        },
        "context": {
            "type": "function",
            "name": "k-list-reverse",
            "code": "\n    $result: ();\n\n    @if ($list) {\n        $len: k-list-length( $list );\n\n        @for $i from $len through 1 {\n            $result: k-list-append( $result, k-list-nth( $list, $i ) );\n        }\n\n        @return $result;\n    }\n\n    @warn \"No list passed.\";\n    @return $result;\n",
            "line": {
                "start": 90,
                "end": 105
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to reverse."
            }
        ],
        "return": {
            "type": "List",
            "description": "The reversed list.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-reverse( ( \"foo\", \"bar\" ) ); // => \"bar, foo\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-list-length"
            },
            {
                "type": "function",
                "name": "k-list-append"
            },
            {
                "type": "function",
                "name": "k-list-nth"
            }
        ],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns the separator of `$list`.\n",
        "commentRange": {
            "start": 107,
            "end": 112
        },
        "context": {
            "type": "function",
            "name": "k-list-separator",
            "code": "\n    @return list.list-separator( $list );\n",
            "line": {
                "start": 113,
                "end": 115
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to check."
            }
        ],
        "return": {
            "type": "String",
            "description": "The separator of `$list`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-separator( ( \"foo\", \"bar\" ) ); // => \",\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$list` with `$val` inserted at `$n`.\n",
        "commentRange": {
            "start": 117,
            "end": 124
        },
        "context": {
            "type": "function",
            "name": "k-list-set-nth",
            "code": "\n    @return list.set-nth( $list, $n, $value );\n",
            "line": {
                "start": 125,
                "end": 127
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list",
                "description": "The list to process."
            },
            {
                "type": "Number",
                "name": "n",
                "description": "The index at which to insert `$val`."
            },
            {
                "type": "Any",
                "name": "val",
                "description": "The value to insert."
            }
        ],
        "return": {
            "type": "List",
            "description": "A copy of `$list` with `$val` inserted at `$n`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-set-nth( ( \"foo\", \"bar\" ), 1, \"baz\" ); // => \"baz, bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Combines two lists into a single list of two-item lists.\n",
        "commentRange": {
            "start": 129,
            "end": 135
        },
        "context": {
            "type": "function",
            "name": "k-list-zip",
            "code": "\n    @return list.zip( $lists... );\n",
            "line": {
                "start": 136,
                "end": 138
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "list1",
                "description": "The first list to combine."
            },
            {
                "type": "List",
                "name": "list2",
                "description": "The second list to combine."
            }
        ],
        "return": {
            "type": "List",
            "description": "A list of two-item lists.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-list-zip( ( \"foo\", \"bar\" ), ( \"baz\", \"qux\" ) ); // => ((foo, baz), (bar, qux))",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_list.import.scss",
            "name": "_list.import.scss"
        }
    },
    {
        "description": "Returns the value at `$key` in `$map`.\n",
        "commentRange": {
            "start": 4,
            "end": 9
        },
        "context": {
            "type": "function",
            "name": "k-map-get",
            "code": "\n    @each $key in $keys {\n        $map: map.get( $map, $key ); // stylelint-disable-line\n    }\n    @return $map;\n",
            "line": {
                "start": 10,
                "end": 15
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to get the value from."
            },
            {
                "type": "Any",
                "name": "key",
                "description": "The key to get the value for.\n"
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-get( ( \"foo\": \"bar\" ), \"foo\" ); // => \"bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-deep-merge",
                    "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (meta.type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (meta.type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                    "line": {
                        "start": 59,
                        "end": 81
                    }
                }
            }
        ]
    },
    {
        "description": "Returns whether `$map` has a value at `$key`.\n",
        "commentRange": {
            "start": 17,
            "end": 24
        },
        "context": {
            "type": "function",
            "name": "k-map-has-key",
            "code": "\n    @return map.has-key( $map, $key );\n",
            "line": {
                "start": 25,
                "end": 27
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to check."
            },
            {
                "type": "Any",
                "name": "key",
                "description": "The key to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$map` has a value at `$key`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-has( ( \"foo\": \"bar\" ), \"foo\" ); // => true\n@debug k-map-has( ( \"foo\": \"bar\" ), \"bar\" ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns a comma separated list of the keys in `$map`.\n",
        "commentRange": {
            "start": 29,
            "end": 34
        },
        "context": {
            "type": "function",
            "name": "k-map-keys",
            "code": "\n    @return map.keys( $map );\n",
            "line": {
                "start": 35,
                "end": 37
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to get the keys from."
            }
        ],
        "return": {
            "type": "List",
            "description": "A comma separated list of the keys in `$map`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-keys( ( \"foo\": \"bar\", \"baz\": \"qux\" ) ); // => \"foo, baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns a map with the keys and values from `$map` and `$args`.\n",
        "commentRange": {
            "start": 39,
            "end": 45
        },
        "context": {
            "type": "function",
            "name": "k-map-merge",
            "code": "\n    @each $arg in $args {\n        $map: map.merge( $map, $arg ); // stylelint-disable-line\n    }\n    @return $map;\n",
            "line": {
                "start": 46,
                "end": 51
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to merge."
            },
            {
                "type": "Map",
                "name": "args",
                "description": "The map to merge into `$map`."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the keys and values from `$map` and `$args`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-merge( ( \"foo\": \"bar\" ), ( \"baz\": \"qux\" ) ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-deep-merge",
                    "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (meta.type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (meta.type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                    "line": {
                        "start": 59,
                        "end": 81
                    }
                }
            },
            {
                "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-deep-merge",
                    "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (meta.type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (meta.type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
                    "line": {
                        "start": 59,
                        "end": 81
                    }
                }
            },
            {
                "description": "Sets a single key and value in `$map`.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-set",
                    "code": "\n    @return k-map-merge( $map, ( $key: $value ) );\n",
                    "line": {
                        "start": 102,
                        "end": 104
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a deep-map with the keys and values from `$map` and `$args`.\n",
        "commentRange": {
            "start": 53,
            "end": 58
        },
        "context": {
            "type": "function",
            "name": "k-map-deep-merge",
            "code": "\n    $merged: ();\n\n    @each $map in $maps {\n      @each $key, $val in $map {\n        @if (meta.type-of($val) == 'map') {\n          $current: k-map-get($merged, $key);\n          @if (meta.type-of($current) == 'map') {\n            $val: k-map-deep-merge($current, $val);\n            $map: k-map-merge(\n              $map,\n              (\n                $key: $val\n              )\n            );\n          }\n        }\n      }\n      $merged: k-map-merge($merged, $map);\n    }\n\n    @return $merged;\n  ",
            "line": {
                "start": 59,
                "end": 81
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "maps",
                "description": "The maps to deep-merge."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the keys and values from `$map` and `$args`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-deep-merge( ( \"foo\": (\"bar\": \"baz\", \"baz\": \"qux\" ) ), ( \"foo\": (\"bar\": \"foo\") ) ); // => ( \"foo\": (\"bar\": \"foo\", \"baz\": \"qux\" ))",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-map-get"
            },
            {
                "type": "function",
                "name": "k-map-merge"
            },
            {
                "type": "function",
                "name": "k-map-merge"
            }
        ],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns a map with the keys and values from `$map` except for `$keys`.\n",
        "commentRange": {
            "start": 83,
            "end": 89
        },
        "context": {
            "type": "function",
            "name": "k-map-remove",
            "code": "\n    @return map.remove( $map, $keys... );\n",
            "line": {
                "start": 90,
                "end": 92
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to remove keys from."
            },
            {
                "type": "Any",
                "name": "keys",
                "description": "The keys to remove from `$map`."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the keys and values from `$map` except for `$keys`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-remove( ( \"foo\": \"bar\", \"baz\": \"qux\" ), \"foo\" ); // => ( \"baz\": \"qux\" )",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Sets a single key and value in `$map`.\n",
        "commentRange": {
            "start": 94,
            "end": 101
        },
        "context": {
            "type": "function",
            "name": "k-map-set",
            "code": "\n    @return k-map-merge( $map, ( $key: $value ) );\n",
            "line": {
                "start": 102,
                "end": 104
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to set the value in."
            },
            {
                "type": "Any",
                "name": "key",
                "description": "The key to set the value for."
            },
            {
                "type": "Any",
                "name": "value",
                "description": "The value to set."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map with the key and value set.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-set( ( \"foo\": \"bar\" ), \"baz\", \"qux\" ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-map-merge"
            }
        ],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns negative values of a number or numbers in a list.\n",
                "context": {
                    "type": "function",
                    "name": "k-map-negate",
                    "code": "\n    $_map-neg: ();\n\n    @if( meta.type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{meta.type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( meta.type-of($value) == number and $value != 0 and $_key-neg != \"-0\" ) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
                    "line": {
                        "start": 122,
                        "end": 138
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a comma separated list of the values in `$map`.\n",
        "commentRange": {
            "start": 106,
            "end": 111
        },
        "context": {
            "type": "function",
            "name": "k-map-values",
            "code": "\n    @return map.values( $map );\n",
            "line": {
                "start": 112,
                "end": 114
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to get the values from."
            }
        ],
        "return": {
            "type": "List",
            "description": "A comma separated list of the values in `$map`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-values( ( \"foo\": \"bar\", \"baz\": \"qux\" ) ); // => \"bar, qux\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns negative values of a number or numbers in a list.\n",
        "commentRange": {
            "start": 116,
            "end": 121
        },
        "context": {
            "type": "function",
            "name": "k-map-negate",
            "code": "\n    $_map-neg: ();\n\n    @if( meta.type-of($map) != map ) {\n        @error \"expected type of #{$map} is map, was #{meta.type-of($map)}\";\n    };\n    @each $key, $value in $map {\n        $_key-neg: \"-\" + $key;\n\n        @if( meta.type-of($value) == number and $value != 0 and $_key-neg != \"-0\" ) {\n            $_map-neg: k-map-set($_map-neg, $_key-neg, -1 * $value );\n        }\n    }\n\n    @return $_map-neg;\n\n",
            "line": {
                "start": 122,
                "end": 138
            }
        },
        "parameter": [
            {
                "type": "Map",
                "name": "map",
                "description": "The map to get the values from."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A comma separated list of the values in `$map`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-map-negate( ( 0: 0, 1: 1px, 2: 2px ) ); // => (\"-1\": -1px, \"-2\": -2px)",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-map-set"
            }
        ],
        "throw": [
            "expected type of #{$map} is map, was #{meta.type-of($map)}"
        ],
        "file": {
            "path": "functions/_map.import.scss",
            "name": "_map.import.scss"
        }
    },
    {
        "description": "Returns the absolute value of a number.\n",
        "commentRange": {
            "start": 3,
            "end": 8
        },
        "context": {
            "type": "function",
            "name": "k-math-abs",
            "code": "\n    @return math.abs( $number );\n",
            "line": {
                "start": 9,
                "end": 11
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to get the absolute value of."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The absolute value of `$number`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-abs( -10 ); // => 10",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the smallest integer greater than or equal to a number.\n",
        "commentRange": {
            "start": 13,
            "end": 18
        },
        "context": {
            "type": "function",
            "name": "k-math-ceil",
            "code": "\n    @return math.ceil( $number );\n",
            "line": {
                "start": 19,
                "end": 21
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to get the ceiling of."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The ceiling of `$number`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-ceil( 10.1 ); // => 11",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the largest integer less than or equal to a number.\n",
        "commentRange": {
            "start": 23,
            "end": 28
        },
        "context": {
            "type": "function",
            "name": "k-math-floor",
            "code": "\n    @return math.floor( $number );\n",
            "line": {
                "start": 29,
                "end": 31
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to get the floor of."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The floor of `$number`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-floor( 10.9 ); // => 10",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
        "commentRange": {
            "start": 33,
            "end": 42
        },
        "context": {
            "type": "function",
            "name": "k-math-clamp",
            "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
            "line": {
                "start": 43,
                "end": 45
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to clamp."
            },
            {
                "type": "Number",
                "name": "min",
                "description": "The minimum value."
            },
            {
                "type": "Number",
                "name": "max",
                "description": "The maximum value."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The clamped number.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-clamp( 10, 0, 5 ); // => 5",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-math-max"
            },
            {
                "type": "function",
                "name": "k-math-min"
            }
        ],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns whether two numbers have compatible units.\n",
        "commentRange": {
            "start": 47,
            "end": 54
        },
        "context": {
            "type": "function",
            "name": "k-math-compatible",
            "code": "\n    @return math.comparable( $a, $b );\n",
            "line": {
                "start": 55,
                "end": 57
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The first number."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The second number."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether the numbers have compatible units.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-compatible( 10px, 10px ); // => true\n@debug k-math-compatible( 10px, 10em ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the quotient of two numbers.\n",
        "commentRange": {
            "start": 59,
            "end": 66
        },
        "context": {
            "type": "function",
            "name": "k-math-div",
            "code": "\n    @return math.div( $a, $b );\n",
            "line": {
                "start": 67,
                "end": 69
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The dividend."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The divisor."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The quotient of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-div( 10, 2 ); // => 5\n@debug k-math-div( 10px, 2 ); // => 5px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns the result of raising `$x` to the power of `$n`.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-pow",
                    "code": "\n    $ret: 1;\n\n    @if ( $n == 0 ) {\n        @return $ret;\n    }\n\n    @if ( $n > 0 ) {\n        @for $i from 1 through $n {\n            $ret: $ret * $x;\n        }\n        @return $ret;\n    }\n\n    @for $i from $n to 0 {\n        $ret: k-math-div( $ret, $x );\n    }\n    @return $ret;\n\n",
                    "line": {
                        "start": 147,
                        "end": 166
                    }
                }
            },
            {
                "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-round",
                    "code": "\n\n    @if ( $precision == 0 ) {\n        @return math.round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
                    "line": {
                        "start": 190,
                        "end": 199
                    }
                }
            },
            {
                "description": "Remove the unit from a number.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-strip-unit",
                    "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                    "line": {
                        "start": 217,
                        "end": 223
                    }
                }
            }
        ]
    },
    {
        "description": "Returns whether `$number` has no units.\n",
        "commentRange": {
            "start": 71,
            "end": 77
        },
        "context": {
            "type": "function",
            "name": "k-math-is-unitless",
            "code": "\n    @return math.unitless( $number );\n",
            "line": {
                "start": 78,
                "end": 80
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$number` has no units.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-is-unitless( 10 ); // => true\n@debug k-math-is-unitless( 10px ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Remove the unit from a number.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-strip-unit",
                    "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                    "line": {
                        "start": 217,
                        "end": 223
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the larger of two numbers.\n",
        "commentRange": {
            "start": 82,
            "end": 89
        },
        "context": {
            "type": "function",
            "name": "k-math-max",
            "code": "\n    @return math.max( $a, $b );\n",
            "line": {
                "start": 90,
                "end": 92
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The first number."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The second number."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The larger of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-max( 10, 20 ); // => 20\n@debug k-math-max( 10px, 20px ); // => 20px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-clamp",
                    "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
                    "line": {
                        "start": 43,
                        "end": 45
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the smaller of two numbers.\n",
        "commentRange": {
            "start": 94,
            "end": 101
        },
        "context": {
            "type": "function",
            "name": "k-math-min",
            "code": "\n    @return math.min( $a, $b );\n",
            "line": {
                "start": 102,
                "end": 104
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The first number."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The second number."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The smaller of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-min( 10, 20 ); // => 10\n@debug k-math-min( 10px, 20px ); // => 10px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Restricts `$number` to the range between `$min` and `$max`. If `$number` is\nless than `$min`, `$min` is returned. If `$number` is greater than `$max`,\n`$max` is returned. Otherwise, `$number` is returned.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-clamp",
                    "code": "\n    @return k-math-max( $min, k-math-min( $max, $number ) );\n",
                    "line": {
                        "start": 43,
                        "end": 45
                    }
                }
            }
        ]
    },
    {
        "description": "Returns the remainder of two numbers.\n",
        "commentRange": {
            "start": 106,
            "end": 113
        },
        "context": {
            "type": "function",
            "name": "k-math-mod",
            "code": "\n    @return ( $a % $b );\n",
            "line": {
                "start": 114,
                "end": 116
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The dividend."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The divisor."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The remainder of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-mod( 10, 3 ); // => 1\n@debug k-math-mod( 10px, 3 ); // => 1px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the product of two numbers.\n",
        "commentRange": {
            "start": 118,
            "end": 125
        },
        "context": {
            "type": "function",
            "name": "k-math-mul",
            "code": "\n    @return ( $a * $b );\n",
            "line": {
                "start": 126,
                "end": 128
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "a",
                "description": "The first number."
            },
            {
                "type": "Number",
                "name": "b",
                "description": "The second number."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The product of `$a` and `$b`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-mul( 10, 2 ); // => 20\n@debug k-math-mul( 10px, 2 ); // => 20px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Converts a unitless number to a percentage.\n",
        "commentRange": {
            "start": 130,
            "end": 135
        },
        "context": {
            "type": "function",
            "name": "k-math-percentage",
            "code": "\n    @return math.percentage( $number );\n",
            "line": {
                "start": 136,
                "end": 138
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to convert."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The percentage.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-percentage( 0.5 ); // => 50%",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the result of raising `$x` to the power of `$n`.\n",
        "commentRange": {
            "start": 140,
            "end": 146
        },
        "context": {
            "type": "function",
            "name": "k-math-pow",
            "code": "\n    $ret: 1;\n\n    @if ( $n == 0 ) {\n        @return $ret;\n    }\n\n    @if ( $n > 0 ) {\n        @for $i from 1 through $n {\n            $ret: $ret * $x;\n        }\n        @return $ret;\n    }\n\n    @for $i from $n to 0 {\n        $ret: k-math-div( $ret, $x );\n    }\n    @return $ret;\n\n",
            "line": {
                "start": 147,
                "end": 166
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "x",
                "description": "The base."
            },
            {
                "type": "Number",
                "name": "n",
                "description": "The exponent."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The result of raising `$x` to the power of `$n`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-pow( 2, 3 ); // => 8",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-math-div"
            }
        ],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-round",
                    "code": "\n\n    @if ( $precision == 0 ) {\n        @return math.round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
                    "line": {
                        "start": 190,
                        "end": 199
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a random number between 0 and 1.\n",
        "commentRange": {
            "start": 168,
            "end": 173
        },
        "context": {
            "type": "function",
            "name": "k-math-random",
            "code": "\n    @if ( $limit == null ) { // stylelint-disable-line\n        @return math.random();\n    }\n\n    @return math.random( $limit );\n",
            "line": {
                "start": 174,
                "end": 180
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "limit",
                "description": "The upper limit of the random number."
            }
        ],
        "return": {
            "type": "Number",
            "description": "A random number between 0 and 1.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-random(); // => 0.123456789",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "Returns the result of rounding `$number` to the nearest integer\nusing the specified `$precision`.\n",
        "commentRange": {
            "start": 182,
            "end": 189
        },
        "context": {
            "type": "function",
            "name": "k-math-round",
            "code": "\n\n    @if ( $precision == 0 ) {\n        @return math.round( $number );\n    }\n\n    $pow: k-math-pow( 10, $precision );\n\n    @return k-math-div( round( $number * $pow ), $pow );\n",
            "line": {
                "start": 190,
                "end": 199
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to round."
            },
            {
                "type": "Number",
                "name": "precision",
                "description": "The number of decimal places to round to."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The rounded number.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-round( 10.123456789, 3 ); // => 10.123",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-math-pow"
            },
            {
                "type": "function",
                "name": "k-math-div"
            }
        ],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <integer> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-integer",
                    "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
                    "line": {
                        "start": 111,
                        "end": 113
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a string representation of `$number`'s unit.\n",
        "commentRange": {
            "start": 201,
            "end": 206
        },
        "context": {
            "type": "function",
            "name": "k-math-unit",
            "code": "\n    @return math.unit( $number );\n",
            "line": {
                "start": 207,
                "end": 209
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to get the unit of."
            }
        ],
        "return": {
            "type": "String",
            "description": "The unit of `$number`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-unit( 10px ); // => px",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        },
        "usedBy": [
            {
                "description": "Remove the unit from a number.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-strip-unit",
                    "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                    "line": {
                        "start": 217,
                        "end": 223
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <time> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-time",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 124,
                        "end": 126
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-angle",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 150,
                        "end": 152
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-frequency",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 163,
                        "end": 165
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-relative-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 178,
                        "end": 180
                    }
                }
            },
            {
                "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-absolute-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 191,
                        "end": 193
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-percentage",
                    "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
                    "line": {
                        "start": 204,
                        "end": 206
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-resolution",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 231,
                        "end": 233
                    }
                }
            }
        ]
    },
    {
        "description": "Remove the unit from a number.\n",
        "commentRange": {
            "start": 211,
            "end": 216
        },
        "context": {
            "type": "function",
            "name": "k-math-strip-unit",
            "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
            "line": {
                "start": 217,
                "end": 223
            }
        },
        "parameter": [
            {
                "type": "Number",
                "name": "number",
                "description": "The number to remove the unit from."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The unitless number.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-math-strip-unit( 10px ); // => 10",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-type-of"
            },
            {
                "type": "function",
                "name": "k-math-is-unitless"
            },
            {
                "type": "function",
                "name": "k-math-div"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_math.import.scss",
            "name": "_math.import.scss"
        }
    },
    {
        "description": "A wrapper around the `call()` function.\nCalls the function `$function` with the arguments `$args`.\n",
        "commentRange": {
            "start": 5,
            "end": 12
        },
        "context": {
            "type": "function",
            "name": "k-meta-call",
            "code": "\n    @return meta.call( $function, $args... );\n",
            "line": {
                "start": 13,
                "end": 15
            }
        },
        "parameter": [
            {
                "type": "Function",
                "name": "function",
                "description": "The function to call."
            },
            {
                "type": "List",
                "name": "args",
                "description": "The arguments to pass to `$function`."
            }
        ],
        "return": {
            "type": "Any",
            "description": "The result of calling `$function` with `$args`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-call( k-meta-get-function( \"k-string-replace\" ), \"foo bar\", \"bar\", \"baz\" ); // => \"foo baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `function-exists()` function.\nReturns whether a function with the name `$name` exists.\n",
        "commentRange": {
            "start": 17,
            "end": 23
        },
        "context": {
            "type": "function",
            "name": "k-meta-function-exists",
            "code": "\n    @if $name == \"\" {\n        @return false;\n    }\n\n    @return meta.function-exists( $name );\n",
            "line": {
                "start": 24,
                "end": 30
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the function to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether a function with the name `$name` exists.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-function-exists( \"k-string-replace\" ); // => true",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `get-function()` function.\nReturns the function with the name `$name`.\n",
        "commentRange": {
            "start": 32,
            "end": 40
        },
        "context": {
            "type": "function",
            "name": "k-meta-get-function",
            "code": "\n    @return meta.get-function( $name, $args... );\n",
            "line": {
                "start": 41,
                "end": 43
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the function to get."
            },
            {
                "type": "Boolean",
                "name": "css",
                "description": "Whether to return the CSS representation of the function."
            },
            {
                "type": "Module",
                "name": "module",
                "description": "The module to get the function from."
            }
        ],
        "return": {
            "type": "Function",
            "description": "The function with the name `$name`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-get-function( \"k-string-replace\" ); // => Function",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `inspect()` function.\nReturns a string representation of `$value`.\n",
        "commentRange": {
            "start": 45,
            "end": 51
        },
        "context": {
            "type": "function",
            "name": "k-meta-inspect",
            "code": "\n    @return meta.inspect( $value );\n",
            "line": {
                "start": 52,
                "end": 54
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to inspect."
            }
        ],
        "return": {
            "type": "String",
            "description": "A string representation of `$value`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-inspect( \"foo bar\" ); // => \"foo bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `keywords()` function.\nReturns a map of the keywords in `$args`.\n",
        "commentRange": {
            "start": 56,
            "end": 62
        },
        "context": {
            "type": "function",
            "name": "k-meta-keywords",
            "code": "\n    @return meta.keywords( $args );\n",
            "line": {
                "start": 63,
                "end": 65
            }
        },
        "parameter": [
            {
                "type": "List",
                "name": "args",
                "description": "The arguments to process."
            }
        ],
        "return": {
            "type": "Map",
            "description": "A map of the keywords in `$args`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-keywords( ( \"foo\" \"bar\" \"baz\" \"qux\" ) ); // => ( \"foo\": \"bar\", \"baz\": \"qux\" )",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "A wrapper around the `type-of()` function.\nReturns the type of `$value`.\n",
        "commentRange": {
            "start": 67,
            "end": 73
        },
        "context": {
            "type": "function",
            "name": "k-meta-type-of",
            "code": "\n    @return meta.type-of( $value );\n",
            "line": {
                "start": 74,
                "end": 76
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to get the type of."
            }
        ],
        "return": {
            "type": "String",
            "description": "The type of `$value`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-type-of( \"foo bar\" ); // => \"string\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Remove the unit from a number.\n",
                "context": {
                    "type": "function",
                    "name": "k-math-strip-unit",
                    "code": "\n    @if ( k-meta-type-of( $number ) == \"number\" ) and not k-math-is-unitless( $number ) {\n        @return k-math-div( $number, 1 * k-math-unit( $number) );\n    }\n\n    @return $number;\n",
                    "line": {
                        "start": 217,
                        "end": 223
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <number> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-number",
                    "code": "\n    @return k-meta-type-of( $value ) == \"number\";\n",
                    "line": {
                        "start": 98,
                        "end": 100
                    }
                }
            }
        ]
    },
    {
        "description": "A wrapper around the `variable-exists()` function.\nReturns whether a variable with the name `$name` exists.\n",
        "commentRange": {
            "start": 78,
            "end": 84
        },
        "context": {
            "type": "function",
            "name": "k-meta-variable-exists",
            "code": "\n    @return meta.variable-exists( $name );\n",
            "line": {
                "start": 85,
                "end": 87
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the variable to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether a variable with the name `$name` exists.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-variable-exists( \"foo\" ); // => true",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <number> CSS data type.\n",
        "commentRange": {
            "start": 89,
            "end": 97
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-number",
            "code": "\n    @return k-meta-type-of( $value ) == \"number\";\n",
            "line": {
                "start": 98,
                "end": 100
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a number.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/number",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-number( 1 ); // => true\n@debug k-meta-is-number( \"foo\" ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-type-of"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <integer> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-integer",
                    "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
                    "line": {
                        "start": 111,
                        "end": 113
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <time> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-time",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 124,
                        "end": 126
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-angle",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 150,
                        "end": 152
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-frequency",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 163,
                        "end": 165
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-relative-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 178,
                        "end": 180
                    }
                }
            },
            {
                "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-absolute-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 191,
                        "end": 193
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-percentage",
                    "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
                    "line": {
                        "start": 204,
                        "end": 206
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-resolution",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 231,
                        "end": 233
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <integer> CSS data type.\n",
        "commentRange": {
            "start": 102,
            "end": 110
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-integer",
            "code": "\n    @return k-meta-is-number( $value ) and k-math-round( $value ) == $value;\n",
            "line": {
                "start": 111,
                "end": 113
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a integer.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/integer",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-integer( 1 ); // => true\n@debug k-meta-is-integer( 1.5 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-math-round"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <time> CSS data type.\n",
        "commentRange": {
            "start": 115,
            "end": 123
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-time",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 124,
                "end": 126
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a time.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/time",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-time( 1s ); // => true\n@debug k-meta-is-time( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a valid duration period.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-duration",
                    "code": "\n    @return k-meta-is-time( $value );\n",
                    "line": {
                        "start": 137,
                        "end": 139
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a valid duration period.\n",
        "commentRange": {
            "start": 128,
            "end": 136
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-duration",
            "code": "\n    @return k-meta-is-time( $value );\n",
            "line": {
                "start": 137,
                "end": 139
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a duration.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/time",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-duration( 1s ); // => true\n@debug k-meta-is-duration( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-time"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <angle> CSS data type.\n",
        "commentRange": {
            "start": 141,
            "end": 149
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-angle",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 150,
                "end": 152
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a angle.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/angle",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-angle( 1deg ); // => true\n@debug k-meta-is-angle( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
        "commentRange": {
            "start": 154,
            "end": 162
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-frequency",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 163,
                "end": 165
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a frequency.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/frequency",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-frequency( 1Hz ); // => true\n@debug k-meta-is-frequency( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
        "commentRange": {
            "start": 167,
            "end": 177
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-relative-length",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 178,
                "end": 180
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a relative length.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_font",
                "caption": ""
            },
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#relative_length_units_based_on_viewport",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-relative-length( 1em ); // => true\n@debug k-meta-is-relative-length( 1ch ); // => true\n@debug k-meta-is-relative-length( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-length",
                    "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
                    "line": {
                        "start": 218,
                        "end": 220
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
        "commentRange": {
            "start": 182,
            "end": 190
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-absolute-length",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 191,
                "end": 193
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is an absolute length.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length#absolute_length_units",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-absolute-length( 1cm ); // => true\n@debug k-meta-is-absolute-length( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-length",
                    "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
                    "line": {
                        "start": 218,
                        "end": 220
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <percentage> CSS data type.\n",
        "commentRange": {
            "start": 195,
            "end": 203
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-percentage",
            "code": "\n    @return k-meta-is-number( $value ) and k-math-unit( $value ) == \"%\";\n",
            "line": {
                "start": 204,
                "end": 206
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a percentage.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/percentage",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-percentage( 1% ); // => true\n@debug k-meta-is-percentage( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <position> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-position",
                    "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                    "line": {
                        "start": 243,
                        "end": 245
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <length> CSS data type.\n",
        "commentRange": {
            "start": 208,
            "end": 217
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-length",
            "code": "\n    @return k-meta-is-relative-length( $value ) or k-meta-is-absolute-length( $value );\n",
            "line": {
                "start": 218,
                "end": 220
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a length.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/length",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-length( 1em ); // => true\n@debug k-meta-is-length( 1cm ); // => true\n@debug k-meta-is-length( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-relative-length"
            },
            {
                "type": "function",
                "name": "k-meta-is-absolute-length"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <position> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-position",
                    "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                    "line": {
                        "start": 243,
                        "end": 245
                    }
                }
            }
        ]
    },
    {
        "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
        "commentRange": {
            "start": 222,
            "end": 230
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-resolution",
            "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
            "line": {
                "start": 231,
                "end": 233
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a resolution.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/resolution",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-resolution( 1dpi ); // => true\n@debug k-meta-is-resolution( 1 ); // => false",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-number"
            },
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-math-unit"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Checks whether `$value` is a <position> CSS data type.\n",
        "commentRange": {
            "start": 235,
            "end": 242
        },
        "context": {
            "type": "function",
            "name": "k-meta-is-position",
            "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
            "line": {
                "start": 243,
                "end": 245
            }
        },
        "parameter": [
            {
                "type": "Any",
                "name": "value",
                "description": "The value to check."
            }
        ],
        "return": {
            "type": "Boolean",
            "description": "Whether `$value` is a position.\n"
        },
        "link": [
            {
                "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/position",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-meta-is-position( center ); // => true",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-meta-is-length"
            },
            {
                "type": "function",
                "name": "k-meta-is-percentage"
            },
            {
                "type": "function",
                "name": "k-string-index"
            }
        ],
        "file": {
            "path": "functions/_meta.import.scss",
            "name": "_meta.import.scss"
        }
    },
    {
        "description": "Returns the first index of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.\n",
        "commentRange": {
            "start": 18,
            "end": 24
        },
        "context": {
            "type": "function",
            "name": "k-string-index",
            "code": "\n    @return string.index( $string, $substring );\n",
            "line": {
                "start": 25,
                "end": 27
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            },
            {
                "type": "String",
                "name": "substring",
                "description": "The substring to look for."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The first index of `$substring` in `$string`, or `null` if `$string` doesn’t contain `$substring`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-index( \"foo bar\", \"bar\" ); // => 5",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Checks whether `$value` is a <time> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-time",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"ms\" \"s\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 124,
                        "end": 126
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <angle> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-angle",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"deg\" \"rad\" \"grad\" \"turn\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 150,
                        "end": 152
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <frequency> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-frequency",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"Hz\" \"kHz\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 163,
                        "end": 165
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a relative <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-relative-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"em\" \"ex\" \"ch\" \"rem\" \"vw\" \"vh\" \"vmin\" \"vmax\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 178,
                        "end": 180
                    }
                }
            },
            {
                "description": "Checks whether `$value` is an absolute <length> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-absolute-length",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"cm\" \"mm\" \"in\" \"px\" \"pt\" \"pc\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 191,
                        "end": 193
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <resolution> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-resolution",
                    "code": "\n    @return k-meta-is-number( $value ) and k-string-index( \"dpi\" \"dpcm\" \"dppx\", k-math-unit( $value ) ) != null;\n",
                    "line": {
                        "start": 231,
                        "end": 233
                    }
                }
            },
            {
                "description": "Checks whether `$value` is a <position> CSS data type.\n",
                "context": {
                    "type": "function",
                    "name": "k-meta-is-position",
                    "code": "\n    @return k-meta-is-length( $value ) or k-meta-is-percentage( $value ) or k-string-index( \"top\" \"right\" \"bottom\" \"left\" \"center\", $value ) != null;\n",
                    "line": {
                        "start": 243,
                        "end": 245
                    }
                }
            },
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if meta.type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 72,
                        "end": 84
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a copy of `$string` with `$insert` inserted at `$index`.\n",
        "commentRange": {
            "start": 29,
            "end": 36
        },
        "context": {
            "type": "function",
            "name": "k-string-insert",
            "code": "\n    @return string.insert( $string, $insert, $index );\n",
            "line": {
                "start": 37,
                "end": 39
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            },
            {
                "type": "String",
                "name": "insert",
                "description": "The string to insert."
            },
            {
                "type": "Number",
                "name": "index",
                "description": "The index at which to insert `$insert`."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-insert( \"foo bar\", \"baz\", 5 ); // => \"foo baz bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns the length of `$string`.\n",
        "commentRange": {
            "start": 41,
            "end": 46
        },
        "context": {
            "type": "function",
            "name": "k-string-length",
            "code": "\n    @return string.length( $string );\n",
            "line": {
                "start": 47,
                "end": 49
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "Number",
            "description": "The length of `$string`.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-length( \"foo bar\" ); // => 7",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if meta.type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 72,
                        "end": 84
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a copy of `$string` with quotes added.\n",
        "commentRange": {
            "start": 51,
            "end": 56
        },
        "context": {
            "type": "function",
            "name": "k-string-quote",
            "code": "\n    @return string.quote( $string );\n",
            "line": {
                "start": 57,
                "end": 59
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-quote( \"foo bar\" ); // => \"foo bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
        "commentRange": {
            "start": 61,
            "end": 71
        },
        "context": {
            "type": "function",
            "name": "k-string-replace",
            "code": "\n    @if meta.type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
            "line": {
                "start": 72,
                "end": 84
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            },
            {
                "type": "String",
                "name": "search",
                "description": "The substring to look for."
            },
            {
                "type": "String",
                "name": "replace",
                "description": "The replacement string."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "link": [
            {
                "url": "https://www.sassmeister.com/gist/1b4f2da5527830088e4d",
                "caption": ""
            }
        ],
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-replace( \"foo bar\", \"bar\", \"baz\" ); // => \"foo baz\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-string-index"
            },
            {
                "type": "function",
                "name": "k-string-slice"
            },
            {
                "type": "function",
                "name": "k-string-slice"
            },
            {
                "type": "function",
                "name": "k-string-length"
            }
        ],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Escapes special characters in a class name\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-class-name",
                    "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                    "line": {
                        "start": 168,
                        "end": 176
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a substring of `$string` starting at `$start-at` and ending at `$end-at`.\n",
        "commentRange": {
            "start": 86,
            "end": 93
        },
        "context": {
            "type": "function",
            "name": "k-string-slice",
            "code": "\n    @return string.slice( $string, $start-at, $end-at );\n",
            "line": {
                "start": 94,
                "end": 96
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            },
            {
                "type": "Number",
                "name": "start-at",
                "description": "The index at which to start the substring."
            },
            {
                "type": "Number",
                "name": "end-at",
                "description": "The index at which to end the substring."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-slice( \"foo bar\", 5 ); // => \"bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if meta.type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 72,
                        "end": 84
                    }
                }
            },
            {
                "description": "Returns a copy of `$string` with all occurrences of `$search`\nreplaced by `$replace`.\n",
                "context": {
                    "type": "function",
                    "name": "k-string-replace",
                    "code": "\n    @if meta.type-of( $string ) == number {\n        $string: $string + \"\";\n    }\n\n    $index: k-string-index( $string, $search );\n\n    @if $index {\n        @return k-string-slice( $string, 1, $index - 1 ) + $replace + k-string-replace( k-string-slice( $string, $index + k-string-length( $search ) ), $search, $replace );\n    }\n\n    @return $string;\n",
                    "line": {
                        "start": 72,
                        "end": 84
                    }
                }
            }
        ]
    },
    {
        "description": "Returns a copy of `$string` with all uppercase letters converted to lowercase.\n",
        "commentRange": {
            "start": 98,
            "end": 103
        },
        "context": {
            "type": "function",
            "name": "k-string-to-lower-case",
            "code": "\n    @return string.to-lower-case( $string );\n",
            "line": {
                "start": 104,
                "end": 106
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-to-lower-case( \"FOO BAR\" ); // => \"foo bar\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$string` with all lowercase letters converted to uppercase.\n",
        "commentRange": {
            "start": 108,
            "end": 113
        },
        "context": {
            "type": "function",
            "name": "k-string-to-upper-case",
            "code": "\n    @return string.to-upper-case( $string );\n",
            "line": {
                "start": 114,
                "end": 116
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-to-upper-case( \"foo bar\" ); // => \"FOO BAR\"",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns a unique identifier.\n",
        "commentRange": {
            "start": 118,
            "end": 122
        },
        "context": {
            "type": "function",
            "name": "k-string-unique-id",
            "code": "\n    @return string.unique-id();\n",
            "line": {
                "start": 123,
                "end": 125
            }
        },
        "return": {
            "type": "String",
            "description": "The unique identifier.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-unique-id(); // => UNIQUE_ID",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "Returns a copy of `$string` with quotes removed.\n",
        "commentRange": {
            "start": 127,
            "end": 132
        },
        "context": {
            "type": "function",
            "name": "k-string-unquote",
            "code": "\n    @return string.unquote( $string );\n",
            "line": {
                "start": 133,
                "end": 135
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "string",
                "description": "The string to process."
            }
        ],
        "return": {
            "type": "String",
            "description": "The resulting string.\n"
        },
        "example": [
            {
                "type": "scss",
                "code": "@debug k-string-unquote( \"foo bar\" ); // => foo bar",
                "description": "Usage"
            }
        ],
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        },
        "usedBy": [
            {
                "description": "Escapes special characters in a class name\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-class-name",
                    "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                    "line": {
                        "start": 168,
                        "end": 176
                    }
                }
            },
            {
                "description": "Escapes special characters in a class name\n",
                "context": {
                    "type": "function",
                    "name": "k-escape-class-name",
                    "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
                    "line": {
                        "start": 168,
                        "end": 176
                    }
                }
            }
        ]
    },
    {
        "description": "Escapes special characters in a class name\n",
        "commentRange": {
            "start": 165,
            "end": 167
        },
        "context": {
            "type": "function",
            "name": "k-escape-class-name",
            "code": "\n    $_text: $text;\n\n    @each $char, $rep in $_kendo-escape-class-name {\n        $_text: k-string-replace( $_text, k-string-unquote( $char ), k-string-unquote( $rep ) );\n    }\n\n    @return $_text;\n",
            "line": {
                "start": 168,
                "end": 176
            }
        },
        "parameter": [
            {
                "type": "String",
                "name": "text",
                "description": "The string to escape"
            }
        ],
        "return": {
            "type": "String",
            "description": "The escaped string"
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "require": [
            {
                "type": "function",
                "name": "k-string-replace"
            },
            {
                "type": "function",
                "name": "k-string-unquote"
            },
            {
                "type": "function",
                "name": "k-string-unquote"
            }
        ],
        "file": {
            "path": "functions/_string.import.scss",
            "name": "_string.import.scss"
        }
    },
    {
        "description": "A list of exported modules.\n",
        "commentRange": {
            "start": 3,
            "end": 4
        },
        "context": {
            "type": "variable",
            "name": "_kendo-imported-modules",
            "value": "()",
            "scope": "default",
            "line": {
                "start": 5,
                "end": 5
            }
        },
        "access": "private",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "mixins/_import-once.scss",
            "name": "_import-once.scss"
        },
        "usedBy": [
            {
                "description": "Outputs a module once, no matter how many times it is included.\n",
                "context": {
                    "type": "mixin",
                    "name": "import-once",
                    "code": "\n    @if (list.index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: list.append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
                    "line": {
                        "start": 11,
                        "end": 16
                    }
                }
            }
        ]
    },
    {
        "description": "Outputs a module once, no matter how many times it is included.\n",
        "commentRange": {
            "start": 7,
            "end": 10
        },
        "context": {
            "type": "mixin",
            "name": "import-once",
            "code": "\n    @if (list.index( $_kendo-imported-modules, $name ) == null) { // stylelint-disable-line\n        $_kendo-imported-modules: list.append( $_kendo-imported-modules, $name ) !global;\n        @content;\n    }\n",
            "line": {
                "start": 11,
                "end": 16
            }
        },
        "access": "public",
        "parameter": [
            {
                "type": "String",
                "name": "name",
                "description": "The name of the exported module."
            }
        ],
        "require": [
            {
                "type": "variable",
                "name": "_kendo-imported-modules",
                "external": false
            }
        ],
        "content": "",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "mixins/_import-once.scss",
            "name": "_import-once.scss"
        }
    },
    {
        "description": "This class could be assigned to elements which should be visually hidden, but remain accessible for screen readers.\n    @name .k-sr-only\n    @group accessibility\n",
        "commentRange": {
            "start": 3,
            "end": 5
        },
        "context": {
            "type": "css",
            "name": ".k-sr-only",
            "value": "position: absolute;\n        inset-inline-start: -1px;\n        width: 1px;\n        height: 1px;\n        overflow: hidden;",
            "line": {
                "start": 6,
                "end": 15
            }
        },
        "access": "public",
        "group": [
            "undefined"
        ],
        "file": {
            "path": "styles/_accessibility.scss",
            "name": "_accessibility.scss"
        }
    }
]