/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import { AIPromptCardInterface } from '@progress/kendo-react-conversational-ui';
import { AIPromptOutputInterface } from '@progress/kendo-react-conversational-ui';
import { AxiosRequestConfig } from 'axios';
import { AxiosResponse } from 'axios';
import { BaseEvent } from '@progress/kendo-react-common';
import { ButtonProps } from '@progress/kendo-react-buttons';
import { CellProps } from '@progress/kendo-react-data-tools';
import { ClipboardSettings } from '@progress/kendo-react-data-tools';
import { ColumnBaseProps } from '@progress/kendo-react-data-tools';
import { ColumnSortSettings } from '@progress/kendo-react-data-tools';
import { ComponentType } from 'react';
import { CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { CustomComponent } from '@progress/kendo-react-common';
import { DataResult } from '@progress/kendo-data-query';
import { DetailExpandDescriptor } from '@progress/kendo-react-data-tools';
import { DialogProps } from '@progress/kendo-react-dialogs';
import { DragClue } from '@progress/kendo-react-data-tools';
import { DropClue } from '@progress/kendo-react-data-tools';
import { EditDescriptor } from '@progress/kendo-react-data-tools';
import { FieldProps } from '@progress/kendo-react-form';
import { FilterDescriptor } from '@progress/kendo-data-query';
import { FilterOperator } from '@progress/kendo-react-data-tools';
import { getSelectedState } from '@progress/kendo-react-data-tools';
import { getSelectedStateFromKeyDown } from '@progress/kendo-react-data-tools';
import { GridClassStructure } from '@progress/kendo-react-common';
import { GridClipboardEvent } from '@progress/kendo-react-data-tools';
import { GroupDescriptor } from '@progress/kendo-data-query';
import { GroupExpandDescriptor } from '@progress/kendo-react-data-tools';
import { GroupState } from '@progress/kendo-react-data-tools';
import { HeaderCellBaseProps } from '@progress/kendo-react-data-tools';
import { HeaderThElementProps } from '@progress/kendo-react-data-tools';
import { IntlService } from '@progress/kendo-react-intl';
import { JSX } from 'react/jsx-runtime';
import { KendoReactComponentBaseProps } from '@progress/kendo-react-common';
import { LocalizationService } from '@progress/kendo-react-intl';
import { MenuItemModel } from '@progress/kendo-react-layout';
import { MenuSelectEvent } from '@progress/kendo-react-layout';
import { NavigatableSettings } from '@progress/kendo-react-data-tools';
import { NormalizedDragEvent } from '@progress/kendo-react-common';
import { Offset } from '@progress/kendo-react-popup';
import { outputViewDefaults } from '@progress/kendo-react-conversational-ui';
import { PagerProps } from '@progress/kendo-react-data-tools';
import { PagerTargetEvent } from '@progress/kendo-react-data-tools';
import { promptViewDefaults } from '@progress/kendo-react-conversational-ui';
import * as React_2 from 'react';
import { ReactElement } from 'react';
import { SearchField } from '@progress/kendo-react-data-tools';
import { SelectDescriptor } from '@progress/kendo-react-data-tools';
import { setSelectedState } from '@progress/kendo-react-data-tools';
import { SortDescriptor } from '@progress/kendo-data-query';
import { SortSettings } from '@progress/kendo-react-data-tools';
import { SpeechToTextButtonProps } from '@progress/kendo-react-buttons';
import { State } from '@progress/kendo-data-query';
import { SVGIcon } from '@progress/kendo-react-common';
import { SVGIcon as SVGIcon_2 } from '@progress/kendo-svg-icons';
import { TABLE_COL_INDEX_ATTRIBUTE } from '@progress/kendo-react-data-tools';
import { TableDragSelectionReleaseEvent } from '@progress/kendo-react-data-tools';
import { TableEditableSettings } from '@progress/kendo-react-data-tools';
import { TableGroupExpandableSettings } from '@progress/kendo-react-data-tools';
import { TableKeyDownEvent } from '@progress/kendo-react-data-tools';
import { TableSelectableMode } from '@progress/kendo-react-data-tools';
import { TableSelectableSettings } from '@progress/kendo-react-data-tools';
import { TableSelectionChangeEvent } from '@progress/kendo-react-data-tools';
import { TextAreaProps } from '@progress/kendo-react-inputs';
import { TextBoxChangeEvent } from '@progress/kendo-react-inputs';
import { TextBoxProps } from '@progress/kendo-react-inputs';
import { ToolbarProps } from '@progress/kendo-react-buttons';
import { ToolbarSeparatorProps } from '@progress/kendo-react-buttons';
import { ToolbarSpacerProps } from '@progress/kendo-react-buttons';

/**
 * The value of the filter operators displayed in the boolean filter menu.
 */
export declare const booleanFilterValues: ({
    text: string;
    operator: string;
} | {
    text: string;
    operator: boolean;
})[];

/**
 * Normalize data for calling onChange.
 */
export declare const cellBoolDropdownChange: (event: any, onChange: Function) => void;

/**
 * Normalize data for calling onChange.
 */
export declare const cellInputChange: (value: any, e: React_2.SyntheticEvent<any>, props: any) => void;

/**
 * Normalize data for calling onChange.
 */
export declare const cellOperatorChange: (event: any, currentValue: any, onChange: Function) => void;

/**
 * Combine two filter descriptors into one, merging filters with the same field.
 */
export declare const combineSmartFilters: (filter: CompositeFilterDescriptor, existingFilter?: CompositeFilterDescriptor) => CompositeFilterDescriptor | null;

/**
 * Represents a composite highlight descriptor for a grid.
 * It contains a map of cell identifiers to their highlight status,
 * an array of filter descriptors, and the logical operator used to combine the filters.
 */
export declare interface CompositeHighlightDescriptor {
    /**
     * A map of cell identifiers to a boolean indicating whether the cell should be highlighted.
     */
    cells: {
        [key: string]: boolean;
    };
    /**
     * An array of filter descriptors representing the filters applied to the grid.
     */
    filters: FilterDescriptor[];
    /**
     * The logical operator ('and' | 'or') used to combine the filters.
     */
    logic: 'and' | 'or';
}

/**
 * @hidden
 */
export declare const contextMenuItemsMap: {
    create: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
    };
    edit: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
    };
    delete: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
    };
    select: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        items: {
            name: string;
            text: string;
            icon: string;
            svgIcon: SVGIcon_2;
            data: {
                action: string;
            };
        }[];
    };
    copySelection: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
        options: string;
    };
    copySelectionNoHeaders: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
    };
    paste: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
    };
    reorderRow: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        items: {
            name: string;
            text: string;
            icon: string;
            svgIcon: SVGIcon_2;
            data: {
                action: string;
            };
        }[];
    };
    exportPDF: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
    };
    exportExcel: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        items: ({
            name: string;
            text: string;
            data: {
                action: string;
            };
            options?: undefined;
        } | {
            name: string;
            text: string;
            data: {
                action: string;
            };
            options: string;
        })[];
    };
    separator: {
        name: string;
        separator: boolean;
    };
    sortAsc: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
    };
    sortDesc: {
        name: string;
        text: string;
        icon: string;
        svgIcon: SVGIcon_2;
        data: {
            action: string;
        };
    };
};

/**
 * @hidden
 */
declare interface ExtendedColumnProps extends GridColumnProps {
    declarationIndex: number;
    parentIndex: number;
    rowSpan: number;
    depth: number;
    colSpan: number;
    kFirst?: boolean;
    index: number;
    headerColSpan: number;
    children: ExtendedColumnProps[];
    left: number;
    right: number;
    rightBorder: boolean;
    ariaColumnIndex: number;
    isAccessible: boolean;
    /** @hidden _internal usage only */
    _type?: 'edit' | 'expand';
    rowSpannable?: Required<GridRowSpannableSettings>;
    defaultCell?: any;
    defaultHeaderCell?: any;
}

/**
 * @hidden
 */
export declare const filterGroupByField: (field: string, filter: CompositeFilterDescriptor | undefined) => CompositeFilterDescriptor | null;

export { getSelectedState }

export { getSelectedStateFromKeyDown }

/**
 * Calculates the status data.
 *
 * @param args StatusDataArgs
 * @returns StatusItem[]
 */
export declare const getStatusData: (args: StatusDataArgs) => StatusItem[];

/**
 * Represents the [KendoReact Grid component]({% slug overview_grid %}).
 *
 * @remarks
 * Supported children components are: {@link GridColumn}, {@link GridToolbar}, {@link GridNoRecords}, {@link StatusBar}.
 *
 * @example
 * ```jsx
 * const App = () => {
 *     const [data, setData] = useState([
 *         { foo: 'A1', bar: 'B1' },
 *         { foo: 'A2', bar: 'B2' },
 *         { foo: 'A3', bar: 'B2' }
 *     ]);
 *
 *     return (
 *         <Grid data={data} reorderable={true}>
 *             <GridColumn field="foo" />
 *             <GridColumn field="bar" />
 *         </Grid>
 *     );
 * };
 *
 * export default App;
 * ```
 */
export declare const Grid: React_2.ForwardRefExoticComponent<GridProps & React_2.RefAttributes<GridHandle | null>>;

/** The attribute required by the Grid selection on Grid `td` elements. */
export declare const GRID_COL_INDEX_ATTRIBUTE = "data-grid-col-index";

/** Attribute which disable selection start from this element. */
export declare const GRID_PREVENT_SELECTION_ELEMENT = "data-prevent-selection";

/** The attribute required by the Grid selection on Grid `tr` elements. */
export declare const GRID_ROW_INDEX_ATTRIBUTE = "data-grid-row-index";

export declare const GridAIPrompt: (props: GridAIPromptProps) => JSX.Element;

/**
 * Props for the `GridAIPrompt` component, which provides AI-powered prompt and output functionality in a grid toolbar.
 *
 * @example
 * ```tsx
 * <GridAIPrompt
 *   promptValue="Summarize this data"
 *   outputs={[{ text: "Summary...", ... }]}
 *   streaming={true}
 *   onPromptRequest={handlePrompt}
 *   suggestionsList={["Summarize", "Explain", "Generate chart"]}
 * />
 * ```
 */
export declare interface GridAIPromptProps {
    /**
     * List of AI-generated outputs to display.
     *
     * @example
     * outputs={[{ text: "AI output 1" }, { text: "AI output 2" }]}
     */
    outputs?: AIPromptOutputInterface[];
    /**
     * Enables the speech-to-text functionality for the input of the GridToolbarAIAssistant.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant enableSpeechToText={true} />
     * ```
     */
    enableSpeechToText?: boolean | SpeechToTextButtonProps;
    /**
     * Indicates whether the prompt is currently streaming or processing.
     *
     * @example
     * streaming={true}
     */
    streaming?: boolean;
    /**
     * Indicates whether the prompt is currently loading.
     *
     * @example
     * loading={true}
     */
    loading?: boolean;
    /**
     * Configuration for the output card displaying AI results.
     *
     * @example
     * outputCard={{ title: "AI Result", content: "..." }}
     */
    outputCard?: AIPromptCardInterface;
    /**
     * Current value of the prompt input field.
     *
     * @example
     * promptValue="Describe the selected rows"
     */
    promptValue?: string;
    /**
     * Placeholder text for the prompt input field.
     *
     * @example
     * promptPlaceHolder="Type your question here..."
     */
    promptPlaceHolder?: string;
    /**
     * Custom component to render the prompt input field.
     *
     * @example
     * promptInput={CustomTextArea}
     */
    promptInput?: CustomComponent<TextAreaProps>;
    /**
     * Callback fired when the active view changes.
     *
     * @param viewName The name of the new active view.
     * @example
     * onActiveViewChange={(view) => setActiveView(view)}
     */
    onActiveViewChange?: (viewName: string) => void;
    /**
     * Custom component to render the generate button.
     *
     * @example
     * generateButton={CustomGenerateButton}
     */
    generateButton?: CustomComponent<ButtonProps>;
    /**
     * Name of the currently active view.
     *
     * @example
     * activeView="prompt"
     */
    activeView?: string;
    /**
     * Array of toolbar items to display, can include prompt or output view defaults.
     *
     * @example
     * toolbarItems={[promptViewDefaults, outputViewDefaults]}
     */
    toolbarItems?: Array<typeof promptViewDefaults | typeof outputViewDefaults>;
    /**
     * Callback fired when the user clicks the Copy button in the output card.
     *
     * @example
     * onCopy={() => copyToClipboard()}
     */
    onCopy?: () => void;
    /**
     * Callback fired when the user rates the output.
     *
     * @example
     * onOutputRating={() => handleRating()}
     */
    onOutputRating?: () => void;
    /**
     * Callback fired when the user submits a prompt request.
     *
     * @param prompt The prompt text submitted by the user.
     * @example
     * onPromptRequest={(prompt) => sendPrompt(prompt)}
     */
    onPromptRequest?: (prompt: string) => void;
    /**
     * List of prompt suggestions to display to the user.
     *
     * @example
     * suggestionsList={["Summarize", "Explain", "Generate chart"]}
     */
    suggestionsList?: string[];
    /**
     * Callback fired when the user cancels the current operation.
     *
     * @example
     * onCancel={() => cancelPrompt()}
     */
    onCancel?: () => void;
    /**
     * Callback fired when the user closes the current operation.
     *
     * @example
     * onClose={() => closePrompt()}
     */
    onClose?: () => void;
}

/**
 * @hidden
 */
export declare const GridCell: (props: {
    cellProps: GridCellProps;
}) => JSX.Element | null;

/**
 * Represents the `GridCellBaseOptions` object that are passed to the handler.
 */
export declare interface GridCellBaseOptions {
    /**
     * The data item associated with the cell.
     */
    dataItem?: any;
    /**
     * The field name of the column associated with the cell.
     */
    field?: string;
}

/**
 * Represents the props of the GridCell component
 * ([more information]({% slug cells_grid %}#toc-grid-cells)).
 */
export declare interface GridCellProps extends Omit<CellProps, 'onChange' | 'render'> {
    /**
     * The zero-based index of the data item in the data collection.
     */
    dataIndex: number;
    /**
     * The index of the column in the rendered columns collection. Optional.
     */
    columnIndex?: number;
    /**
     * The total number of rendered columns in the Grid. Optional.
     */
    columnsCount?: number;
    /**
     * Defines a set of custom cell components that the Grid will render instead of the default cell.
     */
    cells?: GridCellsSettings;
    /**
     * Specifies the type of the row (e.g., data row, group header, etc.). Optional.
     */
    rowType?: GridRowType;
    /**
     * @hidden
     */
    level?: number;
    /**
     * Triggered when the cell is selected. Provides the event object.
     */
    selectionChange?: (event: {
        syntheticEvent: React.SyntheticEvent<any>;
    }) => void;
    /**
     * Triggered when the cell value is changed. Provides details about the change event.
     */
    onChange?: (event: {
        dataItem: any;
        dataIndex: number;
        syntheticEvent: React.SyntheticEvent<any>;
        field?: string;
        value?: any;
        /** @hidden */
        _expand?: boolean;
        /** @hidden */
        _group?: GroupState;
    }) => void;
    /**
     * Specifies the type of editor to be used when the cell is in edit mode.
     * Supported values are `text`, `numeric`, `boolean`, and `date`.
     */
    editor?: 'text' | 'numeric' | 'boolean' | 'date';
    /**
     * @hidden
     */
    locked?: boolean | undefined;
    /**
     * Triggered when the ContextMenu is activated on the cell.
     * Provides the event object, data item, and field name.
     */
    onContextMenu?: (event: React.MouseEvent<HTMLElement>, dataItem: any, field?: string) => void;
    /**
     * @hidden
     */
    isRtl?: boolean;
    /**
     * @hidden
     */
    unstyled?: GridClassStructure;
    /**
     * @hidden
     */
    rowDataIndex?: number;
    /**
     * @hidden
     */
    columnType?: GridColumnType;
    /**
     * @hidden
     */
    rowReorderable?: boolean;
    /**
     * @hidden
     */
    columnPosition: any;
    /** @hidden */
    group?: GroupState;
    /** @hidden */
    localization?: LocalizationService;
    /** @hidden */
    intl?: IntlService;
    /** @hidden */
    _rowSpan?: {
        count: number | null;
        value: any;
    };
}

/**
 * The settings of the cells prop options.
 */
export declare interface GridCellsSettings {
    /**
     * Custom component for rendering the header cell.
     *
     * @example
     * ```tsx
     * import { MyHeaderCell } from './MyHeaderCell';
     * <Grid cells={{ headerCell: MyHeaderCell }} />
     * ```
     */
    headerCell?: ComponentType<GridCustomHeaderCellProps>;
    /**
     * Custom component for rendering the filter cell.
     *
     * @example
     * ```tsx
     * import { MyFilterCell } from './MyFilterCell';
     * <Grid cells={{ filterCell: MyFilterCell }} />
     * ```
     */
    filterCell?: ComponentType<GridCustomFilterCellProps>;
    /**
     * Custom component for rendering the footer cell.
     *
     * @example
     * ```tsx
     * import { MyFooterCell } from './MyFooterCell';
     * <Grid cells={{ footerCell: MyFooterCell }} />
     * ```
     */
    footerCell?: ComponentType<GridCustomFooterCellProps>;
    /**
     * Custom component for rendering the group header cell.
     *
     * @example
     * ```tsx
     * import { MyGroupHeaderCell } from './MyGroupHeaderCell';
     * <Grid cells={{ groupHeader: MyGroupHeaderCell }} />
     * ```
     */
    groupHeader?: ComponentType<GridCustomCellProps>;
    /**
     * Custom component for rendering the data cell.
     *
     * @example
     * ```tsx
     * import { MyDataCell } from './MyDataCell';
     * <Grid cells={{ data: MyDataCell }} />
     * ```
     */
    data?: ComponentType<GridCustomCellProps>;
    /**
     * Custom component for rendering the group footer cell.
     *
     * @example
     * ```tsx
     * import { MyGroupFooterCell } from './MyGroupFooterCell';
     * <Grid cells={{ groupFooter: MyGroupFooterCell }} />
     * ```
     */
    groupFooter?: ComponentType<GridCustomCellProps>;
    /**
     * Custom cell components for selection columns.
     *
     * @example
     * ```tsx
     * import { MySelectDataCell } from './MySelectDataCell';
     * <Grid cells={{ select: { data: MySelectDataCell } }} />
     * ```
     */
    select?: {
        /**
         * Custom component for rendering the group header cell in selection columns.
         *
         * @example
         * ```tsx
         * import { MySelectGroupHeaderCell } from './MySelectGroupHeaderCell';
         * <Grid cells={{ select: { groupHeader: MySelectGroupHeaderCell } }} />
         * ```
         */
        groupHeader?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the data cell in selection columns.
         *
         * @example
         * ```tsx
         * import { MySelectDataCell } from './MySelectDataCell';
         * <Grid cells={{ select: { data: MySelectDataCell } }} />
         * ```
         */
        data?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the group footer cell in selection columns.
         *
         * @example
         * ```tsx
         * import { MySelectGroupFooterCell } from './MySelectGroupFooterCell';
         * <Grid cells={{ select: { groupFooter: MySelectGroupFooterCell } }} />
         * ```
         */
        groupFooter?: ComponentType<GridCustomCellProps>;
    };
    /**
     * Custom cell components for hierarchy columns.
     *
     * @example
     * ```tsx
     * import { MyHierarchyDataCell } from './MyHierarchyDataCell';
     * <Grid cells={{ hierarchy: { data: MyHierarchyDataCell } }} />
     * ```
     */
    hierarchy?: {
        /**
         * Custom component for rendering the group header cell in hierarchy columns.
         *
         * @example
         * ```tsx
         * import { MyHierarchyGroupHeaderCell } from './MyHierarchyGroupHeaderCell';
         * <Grid cells={{ hierarchy: { groupHeader: MyHierarchyGroupHeaderCell } }} />
         * ```
         */
        groupHeader?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the data cell in hierarchy columns.
         *
         * @example
         * ```tsx
         * import { MyHierarchyDataCell } from './MyHierarchyDataCell';
         * <Grid cells={{ hierarchy: { data: MyHierarchyDataCell } }} />
         * ```
         */
        data?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the group footer cell in hierarchy columns.
         *
         * @example
         * ```tsx
         * import { MyHierarchyGroupFooterCell } from './MyHierarchyGroupFooterCell';
         * <Grid cells={{ hierarchy: { groupFooter: MyHierarchyGroupFooterCell } }} />
         * ```
         */
        groupFooter?: ComponentType<GridCustomCellProps>;
    };
    /**
     * Custom cell components for group columns.
     *
     * @example
     * ```tsx
     * import { MyGroupDataCell } from './MyGroupDataCell';
     * <Grid cells={{ group: { data: MyGroupDataCell } }} />
     * ```
     */
    group?: {
        /**
         * Custom component for rendering the group header cell in group columns.
         *
         * @example
         * ```tsx
         * import { MyGroupGroupHeaderCell } from './MyGroupGroupHeaderCell';
         * <Grid cells={{ group: { groupHeader: MyGroupGroupHeaderCell } }} />
         * ```
         */
        groupHeader?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the data cell in group columns.
         *
         * @example
         * ```tsx
         * import { MyGroupDataCell } from './MyGroupDataCell';
         * <Grid cells={{ group: { data: MyGroupDataCell } }} />
         * ```
         */
        data?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the group footer cell in group columns.
         *
         * @example
         * ```tsx
         * import { MyGroupGroupFooterCell } from './MyGroupGroupFooterCell';
         * <Grid cells={{ group: { groupFooter: MyGroupGroupFooterCell } }} />
         * ```
         */
        groupFooter?: ComponentType<GridCustomCellProps>;
    };
    /**
     * Custom cell components for edit columns.
     *
     * @example
     * ```tsx
     * import { MyTextEditCell } from './MyTextEditCell';
     * <Grid cells={{ edit: { text: MyTextEditCell } }} />
     * ```
     */
    edit?: {
        /**
         * Custom component for rendering the text edit cell.
         *
         * @example
         * ```tsx
         * import { MyTextEditCell } from './MyTextEditCell';
         * <Grid cells={{ edit: { text: MyTextEditCell } }} />
         * ```
         */
        text?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the numeric edit cell.
         *
         * @example
         * ```tsx
         * import { MyNumericEditCell } from './MyNumericEditCell';
         * <Grid cells={{ edit: { numeric: MyNumericEditCell } }} />
         * ```
         */
        numeric?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the boolean edit cell.
         *
         * @example
         * ```tsx
         * import { MyBooleanEditCell } from './MyBooleanEditCell';
         * <Grid cells={{ edit: { boolean: MyBooleanEditCell } }} />
         * ```
         */
        boolean?: ComponentType<GridCustomCellProps>;
        /**
         * Custom component for rendering the date edit cell.
         *
         * @example
         * ```tsx
         * import { MyDateEditCell } from './MyDateEditCell';
         * <Grid cells={{ edit: { date: MyDateEditCell } }} />
         * ```
         */
        date?: ComponentType<GridCustomCellProps>;
    };
}

/**
 * Represents the properties of the callback used when spanning a column.
 */
export declare type GridColSpanProps = {
    /**
     * Represents the properties of the spanned column.
     */
    column: GridColumnProps;
    /**
     * Represents the current row data item.
     */
    dataItem: any;
};

/**
 * Represents the GridColumn component.
 *
 * @returns null
 */
export declare const GridColumn: React_2.FunctionComponent<GridColumnProps>;

/**
 * The type of elements that the children property of the Grid accepts.
 */
export declare interface GridColumnChildrenProps extends GridColumnProps, ReactElement<GridColumnProps> {
    /**
     * The props object containing GridColumn properties.
     */
    props: GridColumnProps;
}

/**
 * @hidden
 */
declare interface GridColumnMenuBaseProps {
    /**
     * The current column options.
     */
    column: GridColumnMenuColumnProps;
    /**
     * The method that will be called to close the column menu.
     */
    onCloseMenu?: Function;
}

export declare const GridColumnMenuCheckboxFilter: (props: GridColumnMenuCheckboxFilterProps) => JSX.Element;

/**
 * The props of the GridColumnMenuFilter component.
 */
export declare interface GridColumnMenuCheckboxFilterProps extends GridColumnMenuFilterBaseProps {
    /**
     * Controls the expand state of the filter component.
     */
    expanded?: boolean;
    /**
     * Sets the items collection that will be rendered by the GridColumnMenuCheckboxFilter component.
     */
    data: Array<string | object>;
    /**
     * Triggered on each subsequent expand state of the filter component.
     */
    onExpandChange?: (nextExpandState: boolean) => void;
    /**
     * If set to `true`, checkbox filter expand button will not be rendered and chechbox filter menu will be expanded.
     */
    alwaysExpand?: boolean;
    /**
     * Defines the component that will be rendered as a search box.
     */
    searchBox?: React_2.ComponentType<any>;
    /**
     * Defines the filter operator that will be used to filter the values via the search box.
     * "startswith"
     * "endswith"
     * "contains"
     * "doesnotcontain"
     * "isempty"
     * "isnotempty"
     * "eq" (equal to)
     * "eq" (equal to)
     * "neq" (not equal to)
     * "isnull" (is equal to null)
     * "isnotnull" (is not equal to null)
     */
    searchBoxFilterOperator?: string | Function;
    /**
     * Determines if the data in the component will be unique. By default the property is set to true.
     */
    uniqueData?: boolean;
}

/**
 * The column props passed by the ColumnMenu.
 */
export declare interface GridColumnMenuColumnProps {
    /**
     * The field to which the column is bound.
     */
    field?: string;
    /**
     * Defines the filter type that is displayed inside the filter row. Defaults to `text`.
     */
    filter?: 'text' | 'numeric' | 'boolean' | 'date';
    /**
     * The column locked state.
     */
    locked?: boolean;
    /**
     * @hidden
     */
    title?: string;
    /**
     * The column id.
     */
    id?: string;
}

/**
 * Represents the KendoReact GridColumnMenuColumnsChooser component.
 */
export declare const GridColumnMenuColumnsChooser: React_2.FunctionComponent<GridColumnMenuColumnsChooserProps>;

/**
 *  The props passed to the ColumnMenu ColumnsChooser component.
 */
declare interface GridColumnMenuColumnsChooserBaseProps extends GridColumnMenuBaseProps {
    /**
     * The columns state of the KendoReact GridColumnMenuColumnsChooser component.
     */
    columnsState?: GridColumnState[];
    /**
     * The method that will be called when the new columns state is applied.
     */
    onColumnsStateChange?: Function;
}

/**
 * The props of the GridColumnMenuColumnsChooser component.
 */
export declare interface GridColumnMenuColumnsChooserProps extends GridColumnMenuColumnsChooserBaseProps {
    /**
     * If set to `true`, column chooser expand button will not be rendered and column chooser menu will be expanded.
     */
    alwaysExpand?: boolean;
    /**
     * Controls the expand state of the column chooser component.
     */
    expanded?: boolean;
    /**
     * Triggered on each subsequent expand state of the column chooser component.
     */
    onExpandChange?: (nextExpandState: boolean) => void;
}

/**
 * Represents the KendoReact GridColumnMenuColumnsList component.
 */
export declare const GridColumnMenuColumnsList: React_2.FunctionComponent<GridColumnMenuColumnsListProps>;

/**
 * Represents the props of the KendoReact GridColumnMenuColumnsList component.
 */
export declare interface GridColumnMenuColumnsListProps {
    /**
     * The columns state of the KendoReact GridColumnMenuColumnsList component.
     */
    columnsState: GridColumnProps[];
    /**
     * The initial columns of the KendoReact GridColumnMenuColumnsList component.
     */
    columns: GridColumnProps[];
    /**
     * The onColumnsChange event handler of the KendoReact GridColumnMenuColumnsList component.
     */
    onColumnsChange: (cols: GridColumnProps[]) => void;
    /**
     * The onCloseMenu event handler of the KendoReact GridColumnMenuColumnsList component.
     */
    onCloseMenu: Function;
}

/**
 * @example
 * ```jsx-no-run
 * const TextColumnMenu = (props) => {
 *   return (
 *     <div>
 *       <GridColumnMenuSort {...props} />
 *       <GridColumnMenuFilter {...props} />
 *     </div>
 *   );
 * };
 *
 * const App = () => {
 *   const [state, setState] = React.useState(
 *     createAppState({
 *       take: 10,
 *       skip: 0,
 *     })
 *   );
 *
 *   function createAppState(dataState) {
 *     return {
 *       result: process(products.slice(0), dataState),
 *       dataState: dataState,
 *     };
 *   }
 *
 *   const dataStateChange = (event) => {
 *     setState(createAppState(event.dataState));
 *   };
 *
 *   return (
 *     <Grid
 *       data={state.result}
 *       {...state.dataState}
 *       onDataStateChange={dataStateChange}
 *       sortable={true}
 *       pageable={true}
 *     >
 *       <GridColumn field="ProductID" title="Product ID" />
 *       <GridColumn field="ProductName" columnMenu={TextColumnMenu} />
 *     </Grid>
 *   );
 * };
 * ```
 */
export declare const GridColumnMenuFilter: (props: GridColumnMenuFilterProps) => JSX.Element;

/**
 * The props passed to the ColumnMenu filter component.
 */
declare interface GridColumnMenuFilterBaseProps extends GridColumnMenuBaseProps {
    /**
     * The current filter state of the Grid.It takes value of type [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %})
     */
    filter?: CompositeFilterDescriptor;
    /**
     * The filterable option of the column.
     */
    filterable?: boolean | undefined;
    /**
     * The filter operators for the Grid filters.
     */
    filterOperators: GridFilterOperators;
    /**
     * The method that will be called to notify the parent Grid about a filter change.
     */
    onFilterChange?: (filter: CompositeFilterDescriptor | null, syntheticEvent: React.SyntheticEvent<any>) => any;
}

/**
 * @hidden
 */
export declare const GridColumnMenuFilterCell: (props: GridColumnMenuFilterCellProps) => JSX.Element;

/**
 * @hidden
 */
export declare interface GridColumnMenuFilterCellProps {
    field?: string;
    filterType: 'text' | 'numeric' | 'boolean' | 'date';
    value: any;
    operator?: string | Function;
    operators: GridFilterOperator[];
    booleanValues: GridFilterOperator[];
    onChange: (event: {
        value: any;
        operator: string | Function;
        syntheticEvent: React_2.SyntheticEvent<any>;
    }) => void;
}

/**
 * The props of the GridColumnMenuFilter component.
 */
export declare interface GridColumnMenuFilterProps extends GridColumnMenuFilterBaseProps {
    /**
     * Controls the expand state of the filter component.
     */
    expanded?: boolean;
    /**
     * Triggered on each subsequent expand state of the filter component.
     */
    onExpandChange?: (nextExpandState: boolean) => void;
    /**
     * If set to `false`, the second filter operator and the input will be hidden.
     */
    hideSecondFilter?: boolean;
    /**
     * Specifies a React element that will be cloned and rendered inside the UI of the column-menu filter component
     * ([see example]({% slug column_menu_grid %}#toc-customizing-the-filter-component)).
     */
    filterUI?: ComponentType<GridColumnMenuFilterUIProps>;
    /**
     * The child elements to be rendered inside the filter component.
     */
    children?: React_2.ReactNode;
    /**
     * If set to `true`, filter expand button will not be rendered and filter menu will be expanded.
     */
    alwaysExpand?: boolean;
}

/**
 * @hidden
 */
export declare const GridColumnMenuFilterUI: (props: GridColumnMenuFilterUIProps) => JSX.Element;

/**
 * The props that will be passed to the UI of the ColumnMenu filter component.
 */
export declare interface GridColumnMenuFilterUIProps {
    /**
     * The options of the first filter.
     */
    firstFilterProps: GridFilterCellProps;
    /**
     * The options of the second filter.
     */
    secondFilterProps: GridFilterCellProps;
    /**
     * The current value of the filter logic.
     */
    logicValue?: GridFilterOperator;
    /**
     * The list of the filter logic options.
     */
    logicData: GridFilterOperator[];
    /**
     * The method that will be called to notify the parent about a change in the filter logic.
     */
    onLogicChange: (e: any) => void;
    /**
     * Indicates if the second filter will be hidden.
     */
    hideSecondFilter?: boolean;
}

/**
 * @example
 * ```jsx-no-run
 * const TextColumnMenu = (props) => {
 *     return (
 *         <div>
 *             <GridColumnMenuSort {...props} />
 *             <GridColumnMenuGroup {...props} />
 *         </div>
 *     );
 * };
 *
 * const initialState = {
 *     take: 10,
 *     skip: 0
 * };
 *
 * const App = () => {
 *     const [dataState, setDataState] = useState(initialState);
 *     const [result, setResult] = useState(process(products.slice(0), initialState));
 *
 *     const dataStateChange = (event) => {
 *         setDataState(event.dataState);
 *         setResult(process(products.slice(0), event.dataState));
 *     }
 *
 *     return (
 *         <div>
 *             <Grid
 *                 data={result}
 *                 {...dataState}
 *                 onDataStateChange={dataStateChange}
 *                 sortable={true}
 *                 pageable={true}
 *             >
 *                 <Column field="ProductID" title="Product ID" />
 *                 <Column field="ProductName" columnMenu={TextColumnMenu} />
 *             </Grid>
 *             <br />
 *         </div>
 *     );
 * };
 *
 * export default App;
 * ```
 */
export declare const GridColumnMenuGroup: (props: GridColumnMenuGroupProps) => JSX.Element;

/**
 *  The props passed to the ColumnMenu group component.
 */
declare interface GridColumnMenuGroupBaseProps extends GridColumnMenuBaseProps {
    /**
     * The groupable option of the column.
     */
    groupable?: boolean;
    /**
     * The current group state of the Grid. It takes value of type [GroupDescriptor]({% slug api_kendo-data-query_groupdescriptor %})[]
     */
    group?: GroupDescriptor[];
    /**
     * The method that will be called to notify the parent Grid about a group change.
     */
    onGroupChange?: (groups: GroupDescriptor[], event: React.MouseEvent<HTMLAnchorElement>) => void;
}

/**
 * The props of the GridColumnMenuGroup component.
 */
declare interface GridColumnMenuGroupProps extends GridColumnMenuGroupBaseProps {
}

/**
 * The GridColumnMenuItem component that is used inside the Grid ColumnMenu.
 */
export declare const GridColumnMenuItem: (props: GridColumnMenuItemProps) => JSX.Element;

/**
 * The GridColumnMenuItemContent that will be used inside the Grid ColumnMenu.
 */
export declare const GridColumnMenuItemContent: (props: GridColumnMenuItemContentProps) => JSX.Element;

/**
 * The props of the GridColumnMenuItemContent component.
 */
declare interface GridColumnMenuItemContentProps extends KendoReactComponentBaseProps {
    /**
     * The `show` state of the component. Each change is animated with the Reveal animation.
     */
    show: boolean;
}

/**
 * The GridColumnMenuItemGroup that will be used inside the Grid ColumnMenu.
 */
export declare const GridColumnMenuItemGroup: (props: GridColumnMenuItemGroupProps) => JSX.Element;

/**
 * The props of the GridColumnMenuItemGroup component.
 */
declare interface GridColumnMenuItemGroupProps extends KendoReactComponentBaseProps {
}

/**
 * The props of the GridColumnMenuItem component.
 */
declare interface GridColumnMenuItemProps {
    /**
     * Triggered each time the title is clicked.
     */
    onClick: React_2.MouseEventHandler<HTMLElement>;
    /**
     * The title of the GridColumnMenuItem component.
     */
    title: string;
    /**
     * The class of the icon that is rendered next to the title.
     */
    iconClass?: string;
    /**
     * The SVG icon that is rendered next to the title.
     */
    svgIcon?: SVGIcon;
    /**
     * The selected state of the component.
     */
    selected?: boolean;
    /**
     * @hidden
     * States if the Column Menu item is expandable.
     */
    expandable?: boolean;
    /**
     * @hidden
     * States if the Column Menu item is expanded.
     */
    expanded?: boolean;
}

/**
 * The props which the ColumnMenu passes to its children.
 */
export declare interface GridColumnMenuProps extends GridColumnMenuFilterBaseProps, GridColumnMenuSortBaseProps, GridColumnMenuGroupBaseProps, GridColumnMenuColumnsChooserBaseProps {
    /**
     * Determines if the column menu supports keyboard navigation.
     */
    navigatable?: boolean;
    /**
     * Determines if the column menu is visible.
     */
    show?: boolean;
}

/**
 * @example
 * ```jsx-no-run
 * const ColumnMenu = (props) => {
 *     return (
 *         <div>
 *             <GridColumnMenuSort {...props} />
 *         </div>
 *     );
 * };
 *
 * const initialState = {
 *     take: 10,
 *     skip: 0
 * };
 *
 * const App = () => {
 *     const [dataState, setDataState] = useState(initialState);
 *     const [result, setResult] = useState(process(products.slice(0), initialState));
 *
 *     const dataStateChange = (event) => {
 *         setDataState(event.dataState);
 *         setResult(process(products.slice(0), event.dataState));
 *     };
 *
 *     return (
 *         <div>
 *             <div>
 *                 <Grid
 *                     data={result}
 *                     {...dataState}
 *                     onDataStateChange={dataStateChange}
 *                     sortable={true}
 *                     pageable={true}
 *                 >
 *                     <Column field="ProductID" title="Product ID" columnMenu={ColumnMenu} />
 *                     <Column field="ProductName" />
 *                 </Grid>
 *                 <br />
 *             </div>
 *         </div>
 *     );
 * };
 *
 * export default App;
 * ```
 */
export declare const GridColumnMenuSort: (props: GridColumnMenuSortProps) => JSX.Element;

/**
 *  The props passed to the ColumnMenu sort component.
 */
declare interface GridColumnMenuSortBaseProps extends GridColumnMenuBaseProps {
    /**
     * The sortable option of the column.
     */
    sortable?: GridSortSettings;
    /**
     * The current sort state of the Grid. It takes a value of type [SortDescriptor]({% slug api_kendo-data-query_sortdescriptor %})[]
     */
    sort?: SortDescriptor[];
    /**
     * The method that will be called to notify the parent Grid about a sort change.
     */
    onSortChange?: (descriptors: SortDescriptor[], e: React.SyntheticEvent<any>) => void;
}

/**
 * The props of the GridColumnMenuSort component.
 */
declare interface GridColumnMenuSortProps extends GridColumnMenuSortBaseProps {
}

/**
 * The GridColumnMenuWrapper component.
 */
export declare const GridColumnMenuWrapper: (props: GridColumnMenuWrapperProps) => JSX.Element;

/**
 * The props of the GridColumnMenuWrapper component.
 */
export declare interface GridColumnMenuWrapperProps extends GridColumnMenuProps {
    /**
     * The component to be rendered as content of the Grid column menu.
     */
    columnMenu?: React_2.ComponentType<GridColumnMenuProps> | null;
    /**
     * The icon that overrides the default(three vertical dots) icon displayed in the column menu of each column.
     */
    columnMenuIcon?: SVGIcon;
}

/**
 * The props of the GridColumn component.
 */
export declare interface GridColumnProps extends Omit<ColumnBaseProps, 'cell'> {
    /**
     * Allows the column headers to be clicked and the `sortChange` event emitted.
     * You have to handle the `sortChange` event yourself and sort the data.
     *
     * @example
     * ```jsx
     * <GridColumn sortable={true} />
     * ```
     * @default true
     */
    sortable?: boolean | GridColumnSortSettings;
    /**
     * Defines if the column is locked (frozen or sticky).
     * Locked columns are the columns that are visible at all times while the user scrolls the component horizontally.
     *
     * @example
     * ```jsx
     * <GridColumn locked={true} />
     * ```
     * @default false
     */
    locked?: boolean;
    /**
     * A collection of child columns.
     *
     * @example
     * ```jsx
     * <GridColumn>
     *   <GridColumn field="child1" />
     *   <GridColumn field="child2" />
     * </GridColumn>
     * ```
     */
    children?: GridColumnProps[] | ReactElement<GridColumnProps>[] | GridColumnChildrenProps[];
    /**
     * Specifies a React element that will be cloned and rendered inside the column menu of the Grid ([see example]({% slug column_menu_grid %}#toc-basic-usage)).
     *
     * @example
     * ```jsx
     * <GridColumn columnMenu={CustomColumnMenu} />
     * ```
     */
    columnMenu?: ComponentType<GridColumnMenuProps>;
    /**
     * Specifies the context menu settings that will be applied to the column.
     *
     * @example
     * ```jsx
     * <GridColumn contextMenu={{ enabled: true }} />
     * ```
     */
    contextMenu?: boolean | GridContextMenuOptions | ((options: GridCellBaseOptions) => boolean | GridContextMenuOptions);
    /**
     * Determines if the column can be dragged to the group panel.
     *
     * @example
     * ```jsx
     * <GridColumn groupable={false} />
     * ```
     * @default true
     */
    groupable?: boolean;
    /**
     * Defines whether the column is editable ([more information and examples]({% slug editing_inline_grid %})).
     *
     * @example
     * ```jsx
     * <GridColumn editable={true} />
     * ```
     */
    editable?: boolean;
    /**
     * Defines if a filter UI will be rendered for this column.
     *
     * @example
     * ```jsx
     * <GridColumn filterable={false} />
     * ```
     * @default true
     */
    filterable?: boolean;
    /**
     * Defines the title which will be set to the input element in the filter cell.
     *
     * @example
     * ```jsx
     * <GridColumn filterTitle="Custom Filter Title" />
     * ```
     */
    filterTitle?: string;
    /**
     * Defines the filter type that will be rendered inside the filter row.
     *
     * @example
     * ```jsx
     * <GridColumn filter="numeric" />
     * ```
     * @default 'text'
     */
    filter?: GridDataType;
    /**
     * Defines the editor type. Used when the column enters the edit mode ([more information and examples]({% slug editing_inline_grid %})).
     *
     * @example
     * ```jsx
     * <GridColumn editor="date" />
     * ```
     * @default 'text'
     */
    editor?: GridDataType;
    /**
     * The validation method for the edit field when editting is in mode `dialog`.
     *
     * The method arguments are:
     *
     * * value - The current value of the field.
     * * valueGetter - Function which can be used to get other fields value.
     * Usable when validator depends on more than one field. Supports field paths.
     * * fieldProps - Props of the Field component. Currently contains only the `name` prop.
     * Usable when one validator is used across multiple fields.
     *
     * Returns `string` to signify error or `undefined` to signify validation success.
     */
    validator?: FieldProps['validator'];
    /**
     * Overrides the default (three vertical dots) column menu icon or the icon set through the ([`columnMenuIcon`]({% slug api_grid_gridprops %}#toc-columnmenuicon)) property.
     *
     * @example
     * ```jsx
     * <GridColumn menuIcon={CustomIcon} />
     * ```
     */
    menuIcon?: SVGIcon;
    /**
     * Sets the colSpan of the column which will make the row content span over multiple cells.
     * As arguments, it takes either a number or a function that returns a number.
     *
     * @example
     * ```jsx
     * <GridColumn colSpan={2} />
     * ```
     * @default 1
     */
    colSpan?: number | ((colSpanProps: GridColSpanProps) => number);
    /**
     * Controls the visibility of the Grid's column.
     *
     * @example
     * ```jsx
     * <GridColumn hidden={true} />
     * ```
     * @default false
     */
    hidden?: boolean;
    /**
     * Sets the screen size condition that needs to be satisfied for a column to remain visible. If you set the hidden property, the behavior of media is overridden.
     *
     * @example
     * ```jsx
     * <GridColumn media="(min-width: 600px)" />
     * ```
     */
    media?: string;
    /**
     * Specifies a set of cell components that the Grid will render instead of the built-in cell.
     *
     * @example
     * ```jsx
     * <GridColumn cells={{ data: CustomDataCell }} />
     * ```
     */
    cells?: GridCellsSettings;
    /**
     * Sets the type of the column and renders a dedicated column for interaction.
     *
     * @example
     * ```jsx
     * <GridColumn columnType="checkbox" />
     * ```
     * @default "data"
     */
    columnType?: GridColumnType;
    /**
     * Defines if the cells of the column should be spanned when their values are the same.
     *
     * @example
     * ```jsx
     * <GridColumn rowSpannable={true} />
     * ```
     */
    rowSpannable?: boolean | GridRowSpannableSettings;
}

/**
 * Represents the object of the `onColumnReorder` Grid event.
 */
export declare interface GridColumnReorderEvent {
    /**
     * An event target.
     */
    target: GridHandle;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
    /**
     * The current columns collection.
     */
    columns: GridColumnProps[];
    /**
     * The id of the dragged column.
     */
    columnId?: string;
}

/**
 * Represents the object of the `onColumnResize` Grid event.
 */
export declare interface GridColumnResizeEvent {
    /**
     * An event target.
     */
    target: GridHandle;
    /**
     * A native DOM event.
     * Can be `null` when the callback source is not user action (e.g.: method call).
     */
    nativeEvent: any;
    /**
     * The current columns collection.
     */
    columns: GridColumnProps[];
    /**
     * **Deprecated**. Use `targetColumnId` instead.
     * The index of the column.
     */
    index: number;
    /**
     * **Deprecated**.
     * The new width of the column.
     */
    newWidth: number;
    /**
     * **Deprecated**.
     * The actual width of the column prior to resizing.
     */
    oldWidth: number;
    /**
     * Indicates that resizing is complete and the user has dropped the resize handler.
     */
    end: boolean;
    /**
     * The id of the clicked/dragged column.
     * When the callback source is not user action (e.g.: method call), contains only the first column id from the list.
     */
    targetColumnId?: string;
}

/**
 * The settings for sorting the Grid columns.
 */
declare interface GridColumnSortSettings extends ColumnSortSettings {
}

/**
 * Represents the object of the `onColumnsStateChange` Grid event.
 */
export declare interface GridColumnsStateChangeEvent {
    /**
     * An event target.
     */
    target: GridHandle;
    /**
     * The columns state collection.
     */
    columnsState: GridColumnState[];
}

/**
 * The state of the GridColumn
 */
export declare interface GridColumnState {
    /**
     * The id of the column.
     */
    id: string;
    /**
     * The field of the column.
     */
    field?: string;
    /**
     * The title of the column.
     */
    title?: string;
    /**
     * The value indicating whether a column is visible or not.
     */
    hidden?: boolean;
    /**
     * The width of the column (in pixels).
     */
    width?: string | number;
    /**
     * The position of the column.
     */
    orderIndex?: number;
    /**
     * A collection of child states.
     */
    children?: GridColumnState[];
}

/**
 * Sets the column type.
 *
 * @default "data"
 */
export declare type GridColumnType = 'data' | 'reorder' | 'checkbox';

/**
 * @hidden
 */
export declare class GridCommonDragLogic {
    refDragElementClue: React_2.RefObject<DragClue | null>;
    refDropElementClue: React_2.RefObject<DropClue | null>;
    columns: ExtendedColumnProps[];
    reorderable: boolean;
    groupable: boolean;
    dir: string | undefined;
    private startColumn;
    private startGroup;
    private currentColumn;
    private currentGroup;
    private columnReorder;
    private groupReorder;
    private columnToGroup;
    private groupPanelDivElement;
    get dragClueRef(): React_2.RefObject<DragClue | null>;
    get dropClueRef(): React_2.RefObject<DropClue | null>;
    get getCurrentGroupsLength(): number;
    private get dragElementClue();
    private get dropElementClue();
    constructor(columnReorder: handler, groupReorder: handler, columnToGroup: handler);
    refGroupPanelDiv: (e: any) => void;
    pressHandler: (event: any, element: HTMLTableRowElement | HTMLDivElement) => void;
    dragHandler: (event: any, element: HTMLTableRowElement | HTMLDivElement) => void;
    releaseHandler: (event: any) => void;
    private getColumnIndex;
    private getEventTarget;
    private isTargetGroupingContainer;
    private getGroupIndex;
    private isValid;
    private updateDragElementClue;
    private updateDropElementClue;
}

/**
 * @hidden
 */
export declare const GridContextMenu: (props: GridContextMenuProps) => JSX.Element;

/**
 * Represents the available types for the `GridContextMenuAnchorPart`.
 *
 * The available anchor parts are:
 * - `head`
 * - `body`
 */
export declare enum GridContextMenuAnchorPart {
    head = "head",
    body = "body"
}

/**
 * Represents the object of the `onContextMenu` Grid event.
 */
export declare interface GridContextMenuEvent extends GridEvent {
    /**
     * The data object that represents the current row.
     */
    dataItem: any;
    /**
     * The field to which the cell is bound.
     */
    field?: string;
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React.MouseEvent<any>;
}

/**
 * Represents the object of the `onContextMenuItemClick` Grid event.
 */
export declare interface GridContextMenuItemClickEvent extends GridEvent {
    /**
     * The Context menu item click event.
     */
    event: MenuSelectEvent;
    /**
     * The data object that represents the current row.
     */
    dataItem?: any;
    /**
     * The data object that represents the clicked menu item.
     */
    menuItem: any;
    /**
     * The field to which the cell is bound.
     */
    field?: string;
}

/**
 * Represents the available predefined items names for the `GridContextMenu` items.
 */
export declare enum GridContextMenuItemNames {
    create = "create",
    edit = "edit",
    delete = "delete",
    select = "select",
    copySelection = "copySelection",
    copySelectionNoHeaders = "copySelectionNoHeaders",
    paste = "paste",
    reorderRow = "reorderRow",
    exportPDF = "exportPDF",
    exportExcel = "exportExcel",
    separator = "separator",
    sortAsc = "sortAsc",
    sortDesc = "sortDesc"
}

/**
 * @hidden
 */
export declare interface GridContextMenuOpenArgs extends GridCellBaseOptions {
    event: React_2.MouseEvent<HTMLElement, MouseEvent>;
}

/**
 * Represents the `GridContextMenuOptions`.
 */
export declare interface GridContextMenuOptions {
    /**
     * The contextmenu settings for the head of the data table.
     */
    head?: boolean | (GridContextMenuItemNames | MenuItemModel)[];
    /**
     * The contextmenu settings for the body of the data table.
     */
    body?: boolean | (GridContextMenuItemNames | MenuItemModel)[];
}

/**
 * @hidden
 */
export declare interface GridContextMenuProps {
    show: boolean;
    offset: Offset;
    onClose: (event: React_2.SyntheticEvent<HTMLElement>) => void;
    onSelect: (e: {
        event: MenuSelectEvent;
        dataItem?: any;
        field?: string;
    }) => void;
    dataItem?: any;
    field?: string;
    items?: (GridContextMenuItemNames | MenuItemModel)[];
}

/**
 * The properties of the default Grid Cell.
 */
export declare interface GridCustomCellProps extends GridCellProps {
    /**
     * The props and attributes that are applied to the td element by default.
     */
    tdProps?: React.TdHTMLAttributes<HTMLTableCellElement> | null;
    /**
     * The props and attributes that are applied to the second td. Such element is
     * rendered in very rare cases when we have grouping and sticky columns.
     */
    td2Props?: React.TdHTMLAttributes<HTMLTableCellElement> | null;
    /**
     * The default children of the table cell.
     */
    children?: React.ReactNode | React.ReactNode[];
}

/**
 * The properties of the filter Grid Cell.
 */
export declare interface GridCustomFilterCellProps extends GridFilterCellProps {
    /**
     * The props and attributes that are applied to the th element by default.
     */
    thProps?: GridThAttributes | null;
    /**
     * The props and attributes that are applied to the td element by default.
     */
    tdProps?: GridTdAttributes | null;
    /**
     * The default children of the table cell.
     */
    children?: React.ReactNode | React.ReactNode[];
    /**
     * The index of the column.
     */
    index?: number;
}

/**
 * The properties of the footer Grid Cell.
 */
export declare interface GridCustomFooterCellProps extends GridFooterCellProps {
    /**
     * The props and attributes that are applied to the td element by default.
     */
    tdProps?: React.TdHTMLAttributes<HTMLTableCellElement> | null;
    /**
     * The index of the column that is rendered.
     */
    index?: number;
}

/**
 * The properties of the header Grid Cell.
 */
export declare interface GridCustomHeaderCellProps extends GridHeaderCellProps {
    /**
     * The props and attributes that are applied to the `th` element by default. The property should be used with the [HeaderThElement](slug:api_data-tools_headerthelement) component as demonstrated in [this example](slug:cells_grid#toc-group-header-group-footer-header-cell-footer-cell-filter-cell-and-data-cell).
     */
    thProps?: GridThAttributes | null;
    /**
     * The default children of the table cell.
     */
    children: React.ReactNode | React.ReactNode[];
    /**
     * The index of the column.
     */
    index?: number;
}

/**
 * The properties of the default Grid Row.
 */
export declare interface GridCustomRowProps extends GridRowProps {
    /**
     * The props and attributes that are applied to the tr element by default.
     */
    trProps?: React.HTMLAttributes<HTMLTableRowElement> | null;
    /**
     * The default children of the table row.
     */
    children?: React.ReactNode | React.ReactNode[];
}

/**
 * Represents the object of the `onDataStateChange` Grid event.
 */
export declare interface GridDataStateChangeEvent extends GridEvent {
    /**
     * The [State]({% slug api_kendo-data-query_state %}) of the Grid based on the user action.
     */
    dataState: State;
    /**
     * The [PagerTargetEvent]({% slug api_data-tools_pagertargetevent %}) that triggered the data state change.
     */
    targetEvent?: PagerTargetEvent;
}

/**
 * Exposes the data types available when setting the [filter](slug:api_grid_gridcolumnprops#toc-filter) or
 * [editor](slug:api_grid_gridcolumnprops#toc-editor) property of the Grid columns.
 */
export declare type GridDataType = 'text' | 'numeric' | 'boolean' | 'date';

/**
 * Represents the object of the `onDetailExpandChange` Grid event.
 */
export declare interface GridDetailExpandChangeEvent extends GridEvent {
    /**
     * The descriptor defining which detail rows are expanded.
     */
    detailExpand: DetailExpandDescriptor;
}

/**
 * Represents the detail row class of the KendoReact Grid. Used to define custom details for each row. Can be applied for building the hierarchy. The details for each row will be visible or hidden depending on the current `detailExpand` prop.
 *
 * @example
 * ```jsx
 * const CustomGridDetailRow = (props) => {
 *     const detailData = props.dataItem.MasterField2;
 *     return (
 *         <div>
 *             This is detail template with another grid inside it
 *             <Grid scrollable="none" data={detailData} />
 *         </div>
 *     );
 * };
 *
 * const App = () => {
 *     const [data, setData] = useState([
 *         { MasterField1: 'A1', MasterField2: [{ DetailField1: 1, DetailField2: 2 }] },
 *         { MasterField1: 'B1', MasterField2: [{ DetailField1: 3, DetailField2: 4 }] },
 *         { MasterField1: 'C1', MasterField2: [{ DetailField1: 5, DetailField2: 6 }] }
 *     ]);
 *
 *     return (
 *         <Grid data={data} detail={CustomGridDetailRow}>
 *             <GridColumn field="MasterField1" />
 *         </Grid>
 *     );
 * };
 *
 * export default App;
 * ```
 */
export declare const GridDetailRow: (props: GridDetailRowProps) => null;

/**
 * The props of the GridDetailRow component ([see example]({% slug detailrow_grid %})).
 */
export declare interface GridDetailRowProps {
    /**
     * The data object that represents the current row.
     */
    dataItem: any;
    /**
     * Zero-based index of the dataItem.
     */
    dataIndex: number;
}

/** @hidden */
export declare interface GridDragSelectionReleaseEvent extends TableDragSelectionReleaseEvent {
}

/**
 * Represents the Grid editable settings:
 * - `enabled` &mdash; Determines if the editing is enabled.
 * - `mode` &mdash; Determines the editing mode.
 *
 */
declare interface GridEditableSettings extends TableEditableSettings {
}

/**
 * @hidden
 */
export declare const GridEditCell: (props: {
    cellProps: GridCellProps;
}) => JSX.Element | null;

/**
 * Represents the object of the `onEditChange` Grid event.
 */
export declare interface GridEditChangeEvent extends GridEvent {
    /**
     * The descriptor defining which items are in edit mode.
     */
    edit: EditDescriptor;
}

/**
 * Represents the props of the KendoReact Grid Edit Dialog component.
 */
export declare type GridEditDialogProps = DialogProps & {
    /**
     * The columns of the Grid.
     */
    columns?: GridColumnProps[];
    /**
     * The data item that is currently being edited.
     */
    dataItem?: any;
    /**
     * The method that is called when the user submits the edit form.
     */
    onSubmit?: (newDataItem: any, event?: React.SyntheticEvent<any>) => void;
    /**
     * The method that is called when the user cancels the edit form.
     */
    onCancel?: (event?: React.SyntheticEvent<any>) => void;
};

/**
 * Represents the base event object of the Grid.
 */
export declare interface GridEvent extends BaseEvent<GridHandle> {
}

export declare const GridFilterCell: (props: GridFilterCellProps) => JSX.Element;

/**
 * The props of the GridFilterCell component
 * ([more information]({% slug cells_grid %}#toc-filter-cells)
 * and [example]({% slug filtering_grid %}#toc-custom-filter-cells)).
 */
export declare interface GridFilterCellProps {
    /**
     * The column field in which the cell is located.
     */
    field?: string;
    /**
     * The method that will be called if the cell needs to inform its parent Grid about a change.
     */
    onChange: (event: {
        value: any;
        operator: string | Function;
        syntheticEvent: React.SyntheticEvent<any>;
    }) => void;
    /**
     * The list of the default operators for the current filter type.
     */
    operators: GridFilterOperator[];
    /**
     * The title which will be set to the input element in the filter cell.
     */
    title?: string;
    /**
     * The type of the filter. Determines which editor will be rendered for filtering.
     */
    filterType: 'text' | 'numeric' | 'boolean' | 'date';
    /**
     * The value of the cell.
     */
    value: any;
    /**
     * The operator that will be used for the cell filtering.
     */
    operator?: string | Function;
    /**
     * The list of values for the Boolean filter.
     */
    booleanValues: GridFilterOperator[];
    /**
     * Accessible label of the filter.
     */
    ariaLabel?: string;
    /**
     * Configures the `size` of the cell.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
}

/**
 * Represents the object of the `onFilterChange` Grid event.
 */
export declare interface GridFilterChangeEvent extends GridEvent {
    /**
     * The new [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}) based on the user action.
     */
    filter: CompositeFilterDescriptor;
}

/**
 * The filter operator for the Grid filters.
 */
export declare interface GridFilterOperator extends FilterOperator {
}

/**
 * The filter operators for the Grid filters.
 *
 * @example
 * ```jsx-no-run
 * // Default Grid filter operators:
 * const filterOperators: {
 *     'text': [
 *         { text: 'grid.filterContainsOperator', operator: 'contains' },
 *         { text: 'grid.filterNotContainsOperator', operator: 'doesnotcontain' },
 *         { text: 'grid.filterEqOperator', operator: 'eq' },
 *         { text: 'grid.filterNotEqOperator', operator: 'neq' },
 *         { text: 'grid.filterStartsWithOperator', operator: 'startswith' },
 *         { text: 'grid.filterEndsWithOperator', operator: 'endswith' },
 *         { text: 'grid.filterIsNullOperator', operator: 'isnull' },
 *         { text: 'grid.filterIsNotNullOperator', operator: 'isnotnull' },
 *         { text: 'grid.filterIsEmptyOperator', operator: 'isempty' },
 *         { text: 'grid.filterIsNotEmptyOperator', operator: 'isnotempty' }
 *     ],
 *     'numeric': [
 *         { text: 'grid.filterEqOperator', operator: 'eq' },
 *         { text: 'grid.filterNotEqOperator', operator: 'neq' },
 *         { text: 'grid.filterGteOperator', operator: 'gte' },
 *         { text: 'grid.filterGtOperator', operator: 'gt' },
 *         { text: 'grid.filterLteOperator', operator: 'lte' },
 *         { text: 'grid.filterLtOperator', operator: 'lt' },
 *         { text: 'grid.filterIsNullOperator', operator: 'isnull' },
 *         { text: 'grid.filterIsNotNullOperator', operator: 'isnotnull' }
 *     ],
 *     'date': [
 *         { text: 'grid.filterEqOperator', operator: 'eq' },
 *         { text: 'grid.filterNotEqOperator', operator: 'neq' },
 *         { text: 'grid.filterAfterOrEqualOperator', operator: 'gte' },
 *         { text: 'grid.filterAfterOperator', operator: 'gt' },
 *         { text: 'grid.filterBeforeOperator', operator: 'lt' },
 *         { text: 'grid.filterBeforeOrEqualOperator', operator: 'lte' },
 *         { text: 'grid.filterIsNullOperator', operator: 'isnull' },
 *         { text: 'grid.filterIsNotNullOperator', operator: 'isnotnull' }
 *     ],
 *     'boolean': [
 *         { text: 'grid.filterEqOperator', operator: 'eq' }
 *     ]
 * }
 * ```
 */
export declare interface GridFilterOperators {
    [type: string]: GridFilterOperator[];
}

/**
 * The props of the GridFooterCell component
 * ([see example]({% slug cells_grid %}#toc-footer-cells)).
 */
export declare interface GridFooterCellProps {
    /**
     * The field to which the footer cell is bound.
     */
    field?: string;
    /**
     * The styles of the footer cell.
     */
    style?: React.CSSProperties;
    /**
     * The `colSpan` of the footer cell.
     */
    colSpan?: number;
    /**
     * The index to be applied to the `aria-colindex` attribute.
     */
    ariaColumnIndex: number;
}

/**
 * The settings for grouping the data of the Grid ([see example]({% slug groupingaggregates_grid %})).
 */
export declare interface GridGroupableSettings {
    /**
     * Determines if grouping by dragging and dropping the column headers is allowed and if the group header is visible.
     */
    enabled?: boolean;
    /**
     * Determines if the group footer row is visible when the group is collapsed. Defaults to `none`.
     */
    footer?: 'always' | 'visible' | 'none';
    /**
     * The group expandable settings.
     */
    expandable?: boolean | GridGroupExpandableSettings;
}

/**
 * @hidden
 */
export declare const GridGroupCell: (props: {
    cellProps: GridCellProps;
}) => JSX.Element | null;

/**
 * Represents the object of the `onGroupChange` Grid event.
 */
export declare interface GridGroupChangeEvent extends GridEvent {
    /**
     * An array of [GroupDescriptor]({% slug api_kendo-data-query_groupdescriptor %})[]  that corresponds to the user action.
     */
    group: GroupDescriptor[];
}

/**
 * Represents the Grid group expandable settings.
 */
declare interface GridGroupExpandableSettings extends TableGroupExpandableSettings {
    /**
     * Determines the default expand state for groups.
     * When set to `true`, all groups are expanded by default.
     */
    defaultExpand?: boolean;
    /**
     * Determines if group expanding functionality is enabled.
     */
    enabled?: boolean;
}

/**
 * Represents the object of the `onGroupExpandChange` Grid event.
 */
export declare interface GridGroupExpandChangeEvent extends GridEvent {
    /**
     * The descriptors defining which groups are expanded.
     */
    groupExpand: GroupExpandDescriptor[];
}

/**
 * Represent the `ref` of the Grid component.
 */
export declare interface GridHandle {
    /**
     * Returns the HTML element of the Grid component.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the Spreadsheet.
     */
    props: GridProps;
    /**
     * A getter of the current columns. Gets the current column width or current columns, or any other [`GridColumnProps`]({% slug api_grid_gridcolumnprops %}) for each defined column. Can be used on each Grid instance. To obtain the instance of the rendered Grid, use the `ref` callback. The following example demonstrates how to reorder the columns by dragging their handlers and check the properties afterwards. You can check the result in the browser console.
     *
     * @example
     * ```jsx
     * const App = () => {
     *     const [data, setData] = useState([
     *         { foo: 'A1', bar: 'B1' },
     *         { foo: 'A2', bar: 'B2' },
     *         { foo: 'A3', bar: 'B2' }
     *     ]);
     *
     *     const grid = useRef<GridHandle>();
     *
     *     return (
     *         <div>
     *             <Grid data={data} reorderable={true} ref={grid}>
     *                 <GridColumn field="foo" />
     *                 <GridColumn field="bar" />
     *             </Grid>
     *             <Button onClick={() => console.log(JSON.stringify(grid.current?.columns))}>
     *                 log current properties into browser console.
     *             </Button>
     *         </div>
     *     );
     * };
     *
     * export default App;
     * ```
     */
    columns: GridColumnProps[];
    /**
     * Method to allow the scroll to be set to a specific row index when the Grid is scrollable. It is zero based.
     *
     * @param options - Object, containing the rowIndex to which is going to be scrolled.
     */
    scrollIntoView: (options: {
        rowIndex: number;
    }) => void;
    /**
     * Method to fit columns according to their content.
     *
     * @param columnIds - Array of column ids to be fitted.
     */
    fitColumns: (columnIds: string[]) => void;
    /**
     * Method to trigger a PDF export of the Grid.
     * The 'pdf' prop of the Grid should be set to true or object of setting that will be applied the exported Grid.
     */
    exportAsPdf: () => void;
}

/**
 * @example
 * ```jsx
 * const App = () => {
 *     const [data, setData] = useState([
 *         { foo: 'A1', bar: 'B1', b1: 1, b2: 2 },
 *         { foo: 'A2', bar: 'B2', b1: 3, b2: 4 },
 *         { foo: 'A3', bar: 'B2', b1: 5, b2: 6 }
 *     ]);
 *     const [barDetails, setBarDetails] = useState(false);
 *
 *     const CustomHeaderCell = (props: CustomCellProps) => (
 *       <td
 *           {...props.tdProps}
 *           colSpan={1}>
 *           <span>
 *               {props.title || props.field + ' '}
 *               <Button onClick={() => setBarDetails(!barDetails)}>
 *                   {barDetails ? 'collapse' : 'expand'}
 *               </Button>
 *               {props.children}
 *           </span>
 *       </td>
 *     );
 *
 *     return (
 *         <Grid style={{ height: '420px' }} data={data} reorderable={true}>
 *             <GridColumn field="foo" />
 *             <GridColumn field="bar" cells={{ headerCell: CustomHeaderCell }}>
 *                 {barDetails && [<GridColumn field="b1" />, <GridColumn field="b2" />]}
 *             </GridColumn>
 *         </Grid>
 *     );
 * };
 *
 * export default App;
 * ```
 */
export declare const GridHeaderCell: (props: GridHeaderCellProps) => JSX.Element;

/**
 * The props of the GridHeaderCell component
 * ([more information]({% slug cells_grid %}#toc-header-cells)).
 */
export declare interface GridHeaderCellProps extends Omit<HeaderCellBaseProps, 'render'> {
    /**
     * The props of the Grid column menu wrapper.
     */
    columnMenuWrapperProps: GridColumnMenuWrapperProps;
    /**
     * @hidden
     */
    id?: string;
}

/**
 * Represents the object of the `onHeaderSelectionChange` Grid event.
 */
export declare interface GridHeaderSelectionChangeEvent extends GridEvent {
    /**
     * The new [SelectDescriptor]({% slug api_data-tools_selectdescriptor %}) based on the user action.
     */
    select: SelectDescriptor;
    /**
     * The field of the column in which the cell is located.
     */
    field?: string;
    /**
     * The current Grid leaf data items.
     */
    dataItems: any[];
}

/**
 * @hidden
 */
export declare const GridHierarchyCell: (props: {
    cellProps: GridCellProps;
}) => JSX.Element | null;

/**
 * Represents the object of the `onHighlightChange` Grid event.
 */
export declare interface GridHighlightChangeEvent {
    /**
     * The new highlight descriptor based on the user action.
     */
    highlight: GridHighlightDescriptor;
}

/**
 * Represents the highlight state descriptor for Grid items.
 * The key is the item identifier, and the value can be either a boolean (for whole row highlighting)
 * or an array of column indices (for specific cell highlighting).
 */
export declare interface GridHighlightDescriptor {
    [id: string]: boolean | number[];
}

/**
 * Represents the object of the `onItemChange` Grid event.
 */
export declare interface GridItemChangeEvent extends GridEvent {
    /**
     * The data object that represents the current row.
     */
    dataItem: any;
    /**
     * The field to which the cell is bound.
     */
    field?: string;
    /**
     * The value of the item.
     */
    value: any;
    /**
     * Zero based index of the data item.
     */
    dataIndex: number;
}

/**
 * Represents the object of the `GridKeyDownEvent` Grid event.
 */
export declare interface GridKeyDownEvent extends GridEvent, TableKeyDownEvent<GridHandle> {
}

/**
 * @hidden
 */
export declare const gridMessages: {
    "grid.detailExpand": string;
    "grid.detailCollapse": string;
    "grid.groupExpand": string;
    "grid.groupCollapse": string;
    "grid.groupClearButton": string;
    "grid.groupApplyButton": string;
    "grid.noRecords": string;
    "grid.groupPanelEmpty": string;
    "grid.filterApplyButton": string;
    "grid.filterClearButton": string;
    "grid.filterClearAllButton": string;
    "grid.filterResetButton": string;
    "grid.filterSubmitButton": string;
    "grid.filterTitle": string;
    "grid.sortAscending": string;
    "grid.sortDescending": string;
    "grid.sortClearButton": string;
    "grid.sortApplyButton": string;
    "grid.sortAriaLabel": string;
    "grid.adaptiveToolbarSortTitle": string;
    "grid.adaptiveToolbarGroupTitle": string;
    "grid.toolbarSort": string;
    "grid.toolbarAI": string;
    "grid.toolbarAIApply": string;
    "grid.aIResponseData": string;
    "grid.generatedWithAI": string;
    "grid.toolbarGroup": string;
    "grid.toolbarFilter": string;
    "grid.toolbarColumnsChooser": string;
    "grid.toolbarCheckboxFilter": string;
    "grid.groupColumn": string;
    "grid.ungroupColumn": string;
    "grid.columnMenu": string;
    "grid.pagerItemsPerPage": string;
    "grid.pagerInfo": string;
    "grid.pagerFirstPage": string;
    "grid.pagerPreviousPage": string;
    "grid.pagerNextPage": string;
    "grid.pagerLastPage": string;
    "grid.pagerPage": string;
    "grid.pagerPageSizeAriaLabel": string;
    "grid.pagerOf": string;
    "grid.pagerTotalPages": string;
    "grid.searchPlaceholder": string;
    "grid.searchboxPlaceholder": string;
    "grid.exportPDF": string;
    "grid.filterCheckAll": string;
    "grid.editDialogTitle": string;
    "grid.editDialogSaveButtonTitle": string;
    "grid.editDialogCancelButtonTitle": string;
    "grid.filterChooseOperator": string;
    "grid.filterSelectedItems": string;
    "grid.filterSelectAll": string;
    "grid.filterAriaLabel": string;
    "grid.groupPanelAriaLabel": string;
    "grid.gridAriaLabel": string;
    "grid.gridRowReorderAriaLabel": string;
    "grid.selectRow": string;
    "grid.columnMenuColumnChooserTitle": string;
    "grid.gridAdaptiveColumnMenuFilterTitle": string;
    "grid.adaptiveColumnMenuChooserTitle": string;
    "grid.adaptiveColumnMenuChooserSubTitle": string;
    "grid.adaptiveColumnMenuCheckboxFilterTitle": string;
    "grid.columnMenuColumnChooserSelectedItems": string;
    "grid.columnChooserApplyButton": string;
    "grid.columnChooserResetButton": string;
    'grid.filterEqOperator': string;
    'grid.filterNotEqOperator': string;
    'grid.filterIsNullOperator': string;
    'grid.filterIsNotNullOperator': string;
    'grid.filterIsEmptyOperator': string;
    'grid.filterIsNotEmptyOperator': string;
    'grid.filterStartsWithOperator': string;
    'grid.filterContainsOperator': string;
    'grid.filterNotContainsOperator': string;
    'grid.filterEndsWithOperator': string;
    'grid.filterGteOperator': string;
    'grid.filterGtOperator': string;
    'grid.filterLteOperator': string;
    'grid.filterLtOperator': string;
    'grid.filterIsTrue': string;
    'grid.filterIsFalse': string;
    'grid.filterBooleanAll': string;
    'grid.filterAfterOrEqualOperator': string;
    'grid.filterAfterOperator': string;
    'grid.filterBeforeOperator': string;
    'grid.filterBeforeOrEqualOperator': string;
    'grid.filterAndLogic': string;
    'grid.filterOrLogic': string;
};

/**
 * Represents the object of the `GridNavigationActionEvent` Grid event.
 */
export declare interface GridNavigationActionEvent extends GridEvent {
    /**
     * The focused element.
     */
    focusElement: any;
}

/**
 * Represents the GridNoRecords component. The component is rendered when the `data` property of the Grid is empty or `null`.
 *
 * @example
 * ```jsx
 * const App = () => {
 *     return (
 *         <Grid data={[]}>
 *             <GridNoRecords>There is no data available</GridNoRecords>
 *             <GridColumn field="id" />
 *             <GridColumn field="name" />
 *         </Grid>
 *     );
 * };
 *
 * export default App;
 * ```
 */
export declare const GridNoRecords: {
    (props: GridNoRecordsProps): JSX.Element;
    displayName: string;
};

/**
 * The props of the GridNoRecords component.
 */
export declare interface GridNoRecordsProps {
    /**
     * The React elements that will be rendered inside the Grid when no records are available.
     */
    children?: React.ReactNode;
}

/**
 * Represents the object of the `onPageChange` Grid event.
 */
export declare interface GridPageChangeEvent extends GridEvent {
    /**
     * The page information containing the current page details.
     */
    page: Page;
    /**
     * The target event that triggered the page change.
     */
    targetEvent?: PagerTargetEvent;
}

/**
 * The pager settings of the Grid ([see example]({% slug paging_grid %})).
 *
 * @example
 * ```jsx-no-run
 *
 * <Grid
 *    pageable="{{
 *        buttonCount: 2,
 *        info: false
 *    }}">
 * </Grid>
 * ```
 */
export declare interface GridPagerSettings {
    /**
     * Sets the selected value of the page size Dropdownlist.
     * It is useful when the selected value could also be a string not only a number.
     */
    pageSizeValue?: string | number;
    /**
     * Sets the maximum numeric buttons count before the buttons are collapsed.
     */
    buttonCount?: number;
    /**
     * Toggles the information about the current page and the total number of records.
     */
    info?: boolean;
    /**
     * Defines the type of the Grid pager.
     */
    type?: GridPagerType;
    /**
     * Shows a menu for selecting the page size.
     */
    pageSizes?: boolean | Array<number> | Array<number | string>;
    /**
     * Toggles the **Previous** and **Next** buttons.
     */
    previousNext?: boolean;
    /**
     * Defines if the pager will be responsive.
     * If true, hides the tools that do not fit to the available space.
     *
     * @default `true`
     */
    responsive?: boolean;
    /**
     * Providing different rendering of the page sizes select element based on the screen dimensions.
     */
    adaptive?: boolean;
    /**
     * Specifies the text that is rendered as title in the adaptive page sizes select element.
     */
    adaptiveTitle?: string;
    /**
     * Defines if the pager will be navigatable.
     */
    navigatable?: boolean;
}

/**
 * The type of the Grid pager.
 *
 * The available values are:
 * * `numeric`&mdash;Buttons with numbers.
 * * `input`&mdash;Input for typing the page number.
 *
 * @example
 * ```jsx-no-run
 *
 * <Grid
 *    pageable="{{
 *        type: 'numeric'
 *    }}">
 * </Grid>
 * ```
 */
declare type GridPagerType = 'numeric' | 'input';

/**
 * Represents the properties of the KendoReact GridPdfExportButton component.
 */
export declare const GridPdfExportButton: (props: GridPdfExportButtonProps) => JSX.Element;

/**
 * Represents the props of the GridPdfExportButton component.
 */
export declare interface GridPdfExportButtonProps extends ButtonProps {
}

/**
 * Represents the props of the [KendoReact Grid component]({% slug overview_grid %}).
 */
export declare interface GridProps extends KendoReactComponentBaseProps {
    /**
     * Enables data-processing inside the GridComponent based on its state.
     * Provides an easy, built-in way to handle data operations like sorting, filtering, grouping, and paging.
     *
     * @default false
     *
     * @example
     * ```jsx
     * <Grid
     *   autoProcessData={{
     *     filter: true,
     *     search: true,
     *     sort: true,
     *     group: true,
     *     page: true
     *   }}
     * />
     * ```
     */
    autoProcessData?: boolean | {
        filter?: boolean;
        search?: boolean;
        sort?: boolean;
        group?: boolean;
        page?: boolean;
    };
    /**
     * Sets the Grid row key prop to the value of this field in the dataItem.
     * If not set, the dataItem index will be used for the row key, which might lead to rows not updating during paging or scrolling.
     *
     * @example
     * ```jsx
     * <Grid dataItemKey="id" />
     * ```
     */
    dataItemKey?: string;
    /**
     * Sets a class for the Grid DOM element.
     *
     * @example
     * ```jsx
     * <Grid className="custom-grid-class" />
     * ```
     */
    className?: string;
    /**
     * Defines a set of custom cell components that the Grid will render instead of the default cells.
     *
     * @example
     * ```jsx
     * import { GridCustomCellProps } from '@progress/kendo-react-grid';
     *
     * const CustomCell = (props: GridCustomCellProps) => (
     *   <td {...props.tdProps}>
     *     {props.dataItem[props.field]}
     *   </td>
     * );
     *
     * <Grid
     *   cells={{
     *     data: CustomCell
     *   }}
     * />
     * ```
     */
    cells?: GridCellsSettings;
    /**
     *
     * @example
     * ```jsx
     * import { GridCustomRowProps } from '@progress/kendo-react-grid';
     *
     * const CustomRow = (props: GridCustomRowProps) => (
     *   <tr {...props.trProps} style={{ backgroundColor: props.dataItem?.highlight ? 'yellow' : 'white' }}>
     *     {props.children}
     *   </tr>
     * );
     *
     * <Grid
     *   rows={{
     *     data: CustomRow
     *   }}
     * />
     * ```
     */
    rows?: GridRowsSettings;
    /**
     * Sets the data of the Grid ([see example]({% slug paging_grid %})). If you use paging, the `data` option has to contain only the items for the current page. It takes values of type null, any or [DataResult]({% slug api_kendo-data-query_dataresult%})
     * Accepts values of type `null`, `any[]`, or `DataResult`.
     *
     * @example
     * ```jsx
     * <Grid data={data} />
     * ```
     */
    data?: any[] | DataResult | null;
    /**
     * Enables sorting for the columns with their `field` option set.
     * ([see example]({% slug sorting_grid %}))
     *
     * @example
     * ```jsx
     * <Grid sortable={true} />
     * ```
     */
    sortable?: GridSortSettings;
    /**
     * Enables clipboard copy, cut, and paste manipulations. Accepts `ClipboardSettings` or a boolean value.
     *
     * @example
     * ```jsx
     * <Grid clipboard={true}  />
     * ```
     */
    clipboard?: ClipboardSettings | boolean;
    /**
     * Fires when clipboard support is enabled, and one of the actions (e.g., copy) is triggered.
     * Accepts a `GridClipboardEvent` object.
     *
     * @example
     * ```jsx
     * <Grid
     *   clipboard={true}
     *   onClipboard={(event) => console.log('Clipboard action:', event.action)}
     * />
     * ```
     */
    onClipboard?: (event: GridClipboardEvent) => void;
    /**
     * Fires when the sorting of the Grid is changed. You must handle the event and sort the data.
     * ([see example]({% slug sorting_grid %}))
     *
     * @example
     * ```jsx
     * <Grid
     *   sortable={true}
     *   onSortChange={(event) => console.log('Sort changed:', event.sort)}
     * />
     * ```
     */
    onSortChange?: (event: GridSortChangeEvent) => void;
    /**
     * The ([descriptors]({% slug api_kendo-data-query_sortdescriptor %})) by which the data is sorted. Applies the sorting styles and buttons to the affected columns.
     *
     * @example
     * ```jsx
     * <Grid sort={[{ field: 'name', dir: 'asc' }]} />
     * ```
     */
    sort?: SortDescriptor[];
    /**
     * The default `sort` state applied to the Grid when using uncontrolled mode.
     * ([see example]({% slug sorting_grid %}))
     *
     * @example
     * ```jsx
     * <Grid defaultSort={[{ field: 'name', dir: 'asc' }]} />
     * ```
     */
    defaultSort?: SortDescriptor[];
    /**
     * Enables filtering for the columns with their `field` option set.
     *
     * @example
     * ```jsx
     * <Grid filterable={true} />
     * ```
     */
    filterable?: boolean;
    /**
     * The [descriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}) by which
     * the data is filtered ([more information and examples]({% slug filtering_grid %})). This affects
     * the values and buttons in the `FilterRow` of the Grid.
     *
     * @example
     * ```jsx
     * <Grid filter={{ logic: 'and', filters: [{ field: 'name', operator: 'contains', value: 'John' }] }} />
     * ```
     */
    filter?: CompositeFilterDescriptor;
    /**
     * The default `filter` state applied to the Grid when using uncontrolled mode.
     *
     * @example
     * ```jsx
     * <Grid defaultFilter={{ logic: 'and', filters: [{ field: 'name', operator: 'contains', value: 'John' }] }} />
     * ```
     */
    defaultFilter?: CompositeFilterDescriptor;
    /**
     * The filter operators for the Grid filters.
     *
     * @example
     * ```jsx
     * <Grid filterOperators={{ text: [{ text: 'grid.filterContainsOperator', operator: 'contains' }] }} />
     * ```
     */
    filterOperators?: GridFilterOperators;
    /**
     * Fires when the Grid filter is modified through the UI. You must handle the event and filter the data.
     *
     * @example
     * ```jsx
     * <Grid
     *   filterable={true}
     *   onFilterChange={(event) => console.log('Filter changed:', event.filter)}
     * />
     * ```
     */
    onFilterChange?: (event: GridFilterChangeEvent) => void;
    /**
     * Fires when the Grid highlight is modified. You must handle the event and filter the data.
     *
     * @example
     * ```jsx
     * <Grid
     *   onHighlightChange={(event) => console.log('Highlight changed:', event.highlight)}
     * />
     * ```
     */
    onHighlightChange?: (event: GridHighlightChangeEvent) => void;
    /**
     * Specifies whether the loader of the Grid will be displayed.
     *
     * @example
     * ```jsx
     * <Grid
     *   showLoader={true}
     *   loader={<div>Loading...</div>}
     * />
     * ```
     */
    showLoader?: boolean;
    /**
     * A custom component that the Grid will render instead of the built-in loader.
     *
     * @example
     * ```jsx
     * <Grid loader={<div>Custom Loader...</div>} />
     * ```
     */
    loader?: React.ReactNode;
    /**
     * Fires when the user reorders a row.
     *
     * @example
     * ```jsx
     * <Grid onRowReorder={(event) => console.log('Row reordered:', event)} />
     * ```
     */
    onRowReorder?: (event: GridRowReorderEvent) => void;
    /**
     * Specifies a React element that will be cloned and rendered inside the column menu of the Grid.
     *
     * @example
     * ```jsx
     * <Grid columnMenu={() => <div>Custom Column Menu</div>} />
     * ```
     */
    columnMenu?: null | ComponentType<GridColumnMenuProps>;
    /**
     * Specifies the context menu settings applied to the Grid.
     *
     * @example
     * ```jsx
     * <Grid contextMenu={true} />
     * ```
     */
    contextMenu?: boolean | GridContextMenuOptions | ((options: GridCellBaseOptions) => boolean | GridContextMenuOptions);
    /**
     * Globally overrides the default (three vertical dots) column menu icon for the whole Grid. If set, the prop can be overridden on column level
     *  using the ([menuIcon]({% slug api_grid_gridcolumnprops %}#toc-menuicon)) property.
     */
    columnMenuIcon?: SVGIcon_2;
    /**
     * Providing different rendering of the popup element based on the screen dimensions.
     */
    adaptive?: boolean;
    /**
     * Specifies the text that is rendered as title in the adaptive popup.
     */
    adaptiveTitle?: string;
    /**
     * The [descriptors]({% slug api_kendo-data-query_groupdescriptor %})[] by which the data will be grouped
     * ([more information and examples]({% slug groupingbasics_grid %})).
     *
     * @example
     * ```jsx
     * <Grid group={[{ field: 'CategoryName' }]} />
     * ```
     */
    group?: GroupDescriptor[];
    /**
     * The default `group` state applied to the Grid when using uncontrolled mode.
     *
     * @example
     * ```jsx
     * <Grid defaultGroup={[{ field: 'CategoryName' }]} />
     * ```
     */
    defaultGroup?: GroupDescriptor[];
    /**
     * Fires when the grouping of the Grid is changed. You have to handle the event yourself and group the data
     * ([more information and examples]({% slug groupingbasics_grid %})).
     *
     * @example
     * ```jsx
     * <Grid onGroupChange={(event) => console.log('Group changed:', event.group)} />
     * ```
     */
    onGroupChange?: (event: GridGroupChangeEvent) => void;
    /**
     * Configures the pager of the Grid. Accepts `GridPagerSettings` or a boolean value.([see example]({% slug paging_grid %}))
     *
     * The available options are:
     * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.
     * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.
     * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers) and `input` (input for typing the page number) values.
     * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.
     * - `pageSizeValue: String or Number`&mdash;Sets the selected value of the page size Dropdownlist. It is useful when the selected value could also be a string not only a number.
     * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.
     * - `navigatable: Boolean`&mdash;Defines if the pager will be navigatable.
     * - `responsive: Boolean`&mdash;Defines if the pager will be responsive. If true, hides the tools that do not fit to the available space.
     * - `adaptive: Boolean`&mdash;Providing different rendering of the page sizes select element based on the screen dimensions.
     * - `adaptiveTitle: String`&mdash;Specifies the text that is rendered as title in the adaptive page sizes select element.
     *
     * @example
     * ```jsx
     * <Grid pageable={{ pageSizes: true }} />
     * ```
     */
    pageable?: GridPagerSettings | boolean;
    /**
     * Defines the page size used by the Grid pager. Required for paging functionality.
     *
     * @example
     * ```jsx
     * <Grid pageSize={10} />
     * ```
     */
    pageSize?: number;
    /**
     * The pager component that the Grid will render instead of the built-in pager.
     *  It takes values of type null and ComponentType&lt;[PagerProps]({% slug api_data-tools_pagerprops %})&gt
     *
     * @example
     * ```jsx
     * <Grid pager={() => <div>Custom Pager</div>} />
     * ```
     */
    pager?: null | ComponentType<PagerProps>;
    /**
     * When set to true the Grid pdf export will be enabled.
     * If set to an object, the Grid will use the provided settings to export the PDF.
     *
     * @example
     * ```jsx
     * <Grid pdf={true} />
     * ```
     */
    pdf?: boolean | GridProps;
    /**
     * Fires when the user clicks the PDF export button.
     *
     * @example
     * ```jsx
     *
     * <Grid onPdfExport={async (event) => {
     *        const pdf = await import('@progress/kendo-react-pdf');
     *        await pdf.saveGridPDF(event.target);
     *  }} />
     * ```
     */
    onPdfExport?: (event: {
        target: HTMLDivElement;
    }) => Promise<void>;
    /**
     * Alias for the `pageSize` property. If `take` is set, `pageSize` will be ignored.
     *
     * @example
     * ```jsx
     * <Grid take={20} />
     * ```
     */
    take?: number;
    /**
     * The default `take` state applied to the Grid when using uncontrolled mode.
     *
     * @example
     * ```jsx
     * <Grid defaultTake={20} />
     * ```
     */
    defaultTake?: number;
    /**
     * Fires when the page of the Grid is changed.
     *
     * @example
     * ```jsx
     * <Grid onPageChange={(event) => console.log('Page changed:', event.page)} />
     * ```
     */
    onPageChange?: (event: GridPageChangeEvent) => void;
    /**
     * Defines the total number of data items in all pages. Required for paging functionality.
     *
     * @example
     * ```jsx
     * <Grid total={100} />
     * ```
     */
    total?: number;
    /**
     * Defines the number of records that will be skipped by the pager ([see example]({% slug paging_grid %})). Required by the paging functionality.
     *
     * @example
     * ```jsx
     * <Grid skip={10} />
     * ```
     */
    skip?: number;
    /**
     * The default `skip` state applied to the Grid when using uncontrolled mode.
     *
     * @example
     * ```jsx
     * <Grid defaultSkip={10} />
     * ```
     */
    defaultSkip?: number;
    /**
     * Determines if the scroll position will be updated after a data change.
     * If set to `true`, the scroll will remain in the same position.
     */
    fixedScroll?: boolean;
    /**
     * The descriptor by which the detail row is expanded.
     *
     * @example
     * ```jsx
     * <Grid detailExpand={{ ['item-data-key-id']: true }} />
     * ```
     */
    detailExpand?: DetailExpandDescriptor;
    /**
     * Sets a custom edit dialog component that the Grid will render instead of the built-in edit dialog.
     */
    editDialog?: (props: GridEditDialogProps) => React.ReactNode;
    /**
     * The default `detailExpand` state applied to the Grid when using uncontrolled mode.
     *
     * @example
     * ```jsx
     * <Grid defaultDetailExpand={{ ['item-data-key-id']: true }} />
     * ```
     */
    defaultDetailExpand?: DetailExpandDescriptor;
    /**
     * Fires when the user expands or collapses a detail row.
     *
     * @example
     * ```jsx
     * <Grid onDetailExpandChange={(event) => console.log('Detail expand changed:', event)} />
     * ```
     */
    onDetailExpandChange?: (event: GridDetailExpandChangeEvent) => void;
    /**
     * The descriptor by which the group is expanded.
     *
     * @example
     * ```jsx
     * <Grid groupExpand={[{ field: 'CategoryName', expanded: true }]} />
     * ```
     */
    groupExpand?: GroupExpandDescriptor[];
    /**
     * The default `groupExpand` state applied to the Grid when using uncontrolled mode.
     *
     * @example
     * ```jsx
     * <Grid defaultGroupExpand={[{ field: 'CategoryName', expanded: true }]} />
     * ```
     */
    defaultGroupExpand?: GroupExpandDescriptor[];
    /**
     * Fires when the user expands or collapses a group.
     *
     * @example
     * ```jsx
     * <Grid onGroupExpandChange={(event) => console.log('Group expand changed:', event)} />
     * ```
     */
    onGroupExpandChange?: (event: GridGroupExpandChangeEvent) => void;
    /**
     * The [descriptor]({% slug api_data-tools_selectdescriptor %}) by which the selected state of an item is defined.
     * Passing a boolean value will select the whole row, while passing an array of strings will select individual.
     *
     * @example
     * ```jsx
     * <Grid select={{ ['item-data-key-id']: true }} />
     * ```
     */
    select?: SelectDescriptor;
    /**
     *  The descriptor by which the highlight state of an item is defined.
     * Passing a boolean value will highlight the whole row, while passing an object will highlight individual cells by their field.
     *
     * @example
     * ```jsx
     * <Grid highlight={{ ['item-data-key-id']: true }} />
     * <Grid highlight={{ ['item-data-key-id']: [2, 3] }} />
     * ```
     */
    highlight?: GridHighlightDescriptor;
    /**
     * The default `select` state applied to the Grid when using uncontrolled mode.
     *
     * @example
     * ```jsx
     * <Grid defaultSelect={{ ['item-data-key-id']: true }} />
     * ```
     */
    defaultSelect?: SelectDescriptor;
    /**
     * The Grid selectable settings.
     *
     * @example
     * ```jsx
     * <Grid selectable={{ enabled: true, mode: 'single' }} />
     * ```
     */
    selectable?: boolean | GridSelectableSettings;
    /**
     * Fires when the user tries to select or deselect a row or cell.
     *
     * @example
     * ```jsx
     * <Grid onSelectionChange={(event) => console.log('Selection changed:', event)} />
     * ```
     */
    onSelectionChange?: (event: GridSelectionChangeEvent) => void;
    /**
     * Fires when the user clicks the checkbox of a column header whose type is set to `checkbox`.
     *
     * @example
     * ```jsx
     * <Grid onHeaderSelectionChange={(event) => console.log('Header selection changed:', event)} />
     * ```
     */
    onHeaderSelectionChange?: (event: GridHeaderSelectionChangeEvent) => void;
    /**
     * Fires when the user clicks a row.
     *
     * @example
     * ```jsx
     * <Grid onRowClick={(event) => console.log('Row clicked:', event)} />
     * ```
     */
    onRowClick?: (event: GridRowClickEvent) => void;
    /**
     * Fires when the user double clicks a row.
     *
     * @example
     * ```jsx
     * <Grid onRowDoubleClick={(event) => console.log('Row double clicked:', event)} />
     * ```
     */
    onRowDoubleClick?: (event: GridRowDoubleClickEvent) => void;
    /**
     * Fires when the user changes the values of the item.
     *
     * @example
     * ```jsx
     * <Grid onItemChange={(event) => console.log('Item changed:', event)} />
     * ```
     */
    onItemChange?: (event: GridItemChangeEvent) => void;
    /**
     * The descriptor by which the in-edit mode of an item is defined.
     *
     * @example
     * ```jsx
     * <Grid edit={{ ['item-data-key-id']: true }} />
     * ```
     */
    edit?: EditDescriptor;
    /**
     * The default `edit` state applied to the Grid when using uncontrolled mode.
     *
     * @example
     * ```jsx
     * <Grid defaultEdit={{ ['item-data-key-id']: true }} />
     * ```
     */
    defaultEdit?: EditDescriptor;
    /**
     * The Grid editable settings.
     *
     * @example
     * ```jsx
     * <Grid editable={{ enabled: true, mode: 'inline' }} />
     * ```
     */
    editable?: boolean | GridEditableSettings;
    /**
     * Fires when the user enters or exits an in-edit mode of a row or cell.
     *
     * @example
     * ```jsx
     * <Grid onEditChange={(event) => console.log('Edit changed:', event)} />
     * ```
     */
    onEditChange?: (event: GridEditChangeEvent) => void;
    /**
     * Defines the scroll mode that is used by the Grid ([see example]({% slug scrollmodes_grid %})).
     *
     *  The available options are:
     *  - `none`&mdash;Renders no scrollbar.
     *  - `scrollable`&mdash;This is the default scroll mode. It requires the setting of the `height` option.
     *  - `virtual`&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.
     *
     * @example
     * ```jsx
     * <Grid scrollable="virtual" />
     * ```
     */
    scrollable?: ScrollMode;
    /**
     * Defines the row height and forces an equal height to all rows ([see example]({% slug scrollmodes_grid %})).
     *
     * @example
     * ```jsx
     * <Grid rowHeight={50} />
     * ```
     */
    rowHeight?: number;
    /**
     * Defines the detail row height and forces an equal height to all detail rows.
     *
     * @example
     * ```jsx
     * <Grid detailRowHeight={100} />
     * ```
     */
    detailRowHeight?: number;
    /**
     * Specifies a React element that will be cloned and rendered inside the detail rows of the currently expanded items ([see example]({% slug hierarchy_grid %})).
     *
     * @example
     * ```jsx
     * <Grid detail={()=>(<div>Detail Content</div>)} />
     * ```
     */
    detail?: null | ComponentType<GridDetailRowProps>;
    /**
     * The descriptor by which the data is searched. Its first FilterDescriptor populates the GridSearchBox.
     *
     * @example
     * ```jsx
     * <Grid search={{ logic: 'and', filters: [{ field: 'name', operator: 'contains', value: 'test' }] }} />
     * ```
     */
    search?: CompositeFilterDescriptor;
    /**
     * The descriptor by which the data is searched by default. Its first FilterDescriptor populates the GridSearchBox.
     *
     * @example
     * ```jsx
     * <Grid defaultSearch={{ logic: 'or', filters: [{ field: 'category', operator: 'eq', value: 'electronics' }] }} />
     * ```
     */
    defaultSearch?: CompositeFilterDescriptor;
    /**
     * Defines the fields of the data that are filtered by the GridSearchBox.
     *
     * @example
     * ```jsx
     * <Grid searchFields={['name', 'category']} />
     * ```
     */
    searchFields?: (string | SearchField)[];
    /**
     * Fires when the search value of the GridSearchBox is changed.
     *
     * @example
     * ```jsx
     * <Grid onSearchChange={(event) => console.log('Search changed:', event)} />
     * ```
     */
    onSearchChange?: (event: GridSearchChangeEvent) => void;
    /**
     * Represents the `style` HTML attribute.
     *
     * @example
     * ```jsx
     * <Grid style={{ backgroundColor: 'lightblue' }} />
     * ```
     */
    style?: React.CSSProperties;
    /**
     * Fires when the data state of the Grid is changed ([more information]({% slug localoperations_grid %}) and [example]({% slug odataserveroperations_grid %})).
     *
     * @example
     * ```jsx
     * <Grid onDataStateChange={(event) => console.log('Data state changed:', event)} />
     * ```
     */
    onDataStateChange?: (event: GridDataStateChangeEvent) => void;
    /**
     * If set to `true`, the user can resize columns by dragging the edges (resize handles) of their header cells ([see example]({% slug resizing_columns_grid %})).
     *
     * @example
     * ```jsx
     * <Grid resizable={true} />
     * ```
     */
    resizable?: boolean;
    /**
     * If set to `true`, the user can reorder columns by dragging their header cells ([see example]({% slug reordering_columns_grid %})).
     *
     * @example
     * ```jsx
     * <Grid reorderable={true} />
     * ```
     */
    reorderable?: boolean;
    /**
     * Defines the row reorder settings.
     *
     * @example
     * ```jsx
     * <Grid rowReorderable={true} />
     * ```
     */
    rowReorderable?: boolean | GridRowReorderSettings;
    /**
     * Determines if grouping by dragging and dropping the column headers is allowed ([more information and examples]({% slug groupingbasics_grid %})).
     *
     * @example
     * ```jsx
     * <Grid groupable={true} />
     * ```
     */
    groupable?: GridGroupableSettings | boolean;
    /**
     * Fires when a column is resized. Only fired when the Grid is run as a client component.
     *
     * @example
     * ```jsx
     * <Grid onColumnResize={(event) => console.log('Column resized:', event)} />
     * ```
     */
    onColumnResize?: (event: GridColumnResizeEvent) => void;
    /**
     * Fires when the columns are reordered.
     *
     * @example
     * ```jsx
     * <Grid onColumnReorder={(event) => console.log('Column reordered:', event)} />
     * ```
     */
    onColumnReorder?: (event: GridColumnReorderEvent) => void;
    /**
     * Fires when Grid is scrolled. Only fired when the Grid is run as a client component.
     *
     * @example
     * ```jsx
     * <Grid onScroll={(event) => console.log('Grid scrolled:', event)} />
     * ```
     */
    onScroll?: (event: GridEvent) => void;
    /**
     * Enables virtualization of the columns. If virtualization is enabled, the columns outside the view are not rendered.
     *
     * @example
     * ```jsx
     * <Grid columnVirtualization={true} />
     * ```
     */
    columnVirtualization?: boolean;
    /**
     * If set to `true`, the user can use dedicated shortcuts to interact with the Grid.
     * By default, navigation is disabled and the Grid content is accessible in the normal tab sequence.
     *
     * @example
     * ```jsx
     * <Grid navigatable={true} />
     * ```
     */
    navigatable?: boolean | NavigatableSettings;
    /**
     * Fires when Grid keyboard navigation position is changed. Only fired when the Grid is run as a client component.
     *
     * @example
     * ```jsx
     * <Grid onNavigationAction={(event) => console.log('Navigation action:', event)} />
     * ```
     */
    onNavigationAction?: (event: GridNavigationActionEvent) => void;
    /**
     * Fires when the user press keyboard key. Only fired when the Grid is run as a client component.
     *
     * @example
     * ```jsx
     * <Grid onKeyDown={(event) => console.log('Key pressed:', event)} />
     * ```
     */
    onKeyDown?: (event: GridKeyDownEvent) => void;
    /**
     * Defines if the group descriptor columns are locked (frozen or sticky).
     * Locked columns are the columns that are visible at all times while the user scrolls the component horizontally.
     * Defaults to `false`.
     *
     * @example
     * ```jsx
     * <Grid lockGroups={true} />
     * ```
     */
    lockGroups?: boolean;
    /**
     * Configures the `size` of the Grid.
     *
     * The available options are:
     * - small
     * - medium
     *
     * @default `medium`
     * @example
     * ```jsx
     * <Grid size="small" />
     * ```
     */
    size?: 'small' | 'medium';
    /**
     * The event that is fired when the ContextMenu is activated. Only fired when the Grid is run as a client component.
     *
     * @example
     * ```jsx
     * <Grid onContextMenu={(event) => console.log('Context menu activated:', event)} />
     * ```
     */
    onContextMenu?: (event: GridContextMenuEvent) => void;
    /**
     * The event that is fired when the ContextMenu item is clicked. Only fired when the Grid is run as a client component.
     *
     * @example
     * ```jsx
     * <Grid onContextMenuItemClick={(event) => console.log('Context menu item clicked:', event)} />
     * ```
     */
    onContextMenuItemClick?: (event: GridContextMenuItemClickEvent) => void;
    /**
     * Sets the `id` property of the top div element of the component.
     *
     * @example
     * ```jsx
     * <Grid id="custom-grid-id" />
     * ```
     */
    id?: string;
    /**
     * @hidden
     */
    unstyled?: GridClassStructure;
    /**
     * Enables the built-in row span feature of the Grid.
     *
     * @example
     * ```jsx
     * <Grid rowSpannable={true} />
     * ```
     */
    rowSpannable?: boolean | GridRowSpannableSettings;
    /**
     * The collection of column states of the grid.
     *
     * @example
     * ```jsx
     * <Grid columnsState={[{ field: 'ProductName', locked: true }]} />
     * ```
     */
    columnsState?: GridColumnState[];
    /**
     * The default columns state, used only for the initial load.
     *
     * @example
     * ```jsx
     * <Grid defaultColumnsState={[{ field: 'ProductName', locked: false }]} />
     * ```
     */
    defaultColumnsState?: GridColumnState[];
    /**
     * Fires when the columns state of the Grid is changed.
     *
     * @example
     * ```jsx
     * <Grid onColumnsStateChange={(event) => console.log('Columns state changed:', event)} />
     * ```
     */
    onColumnsStateChange?: (event: GridColumnsStateChangeEvent) => void;
    /**
     * Sets the locale of the Grid when used as a server component.
     * Have not effect when the Grid is used as a client component.
     *
     * @example
     * ```jsx
     * <Grid locale="en-US" />
     * ```
     */
    locale?: string;
    /**
     * Sets the language of the Grid when used as a server component.
     * Have not effect when the Grid is used as a client component.
     *
     * @example
     * ```jsx
     * <Grid language="en" />
     * ```
     */
    language?: string;
}

/**
 * The direction in which a row can be dragged and dropped.
 */
export declare type GridReorderDropPosition = 'before' | 'after' | 'forbidden';

/**
 * The component for each of the items in the `data` property which the Grid renders.
 */
export declare const GridRow: (props: GridRowProps) => JSX.Element;

/**
 * Represents the object of the `onRowClick` Grid event.
 */
export declare interface GridRowClickEvent extends GridEvent {
    /**
     * The item from the `data` property of the Grid which corresponds to the row that is clicked.
     */
    dataItem: any;
}

/**
 * Represents the object of the `onRowDoubleClick` Grid event.
 */
export declare interface GridRowDoubleClickEvent extends GridEvent {
    /**
     * The item from the `data` property of the Grid which corresponds to the row that is clicked.
     */
    dataItem: any;
}

/**
 * The props that the Grid passes to the GridRow component when creating it. Accessible when passing a custom row to the `rows` prop of the Grid.
 */
export declare interface GridRowProps extends KendoReactComponentBaseProps {
    /**
     * The `data` object that represents the current row.
     */
    dataItem: any;
    /**
     * Indicates whether the row is an alternating row.
     */
    isAltRow: boolean;
    /**
     * Indicates whether the row has at least one edit cell.
     */
    isInEdit: boolean;
    /**
     * Indicates if the row is hidden. The hidden row is rendered above the visible area of the Grid. Occurs when the Grid uses virtualization and the row is on the current page. When `rowHeight` is set, `isHidden` is always `true`.
     */
    isHidden: boolean;
    /**
     * The event that is fired when the row is clicked.
     */
    onClick: any;
    /**
     * The event that is fired when the row is double clicked.
     */
    onDoubleClick: any;
    /**
     * Sets the height of the row.
     */
    rowHeight?: number;
    /**
     * The type of the row.
     */
    rowType: GridRowType;
    /**
     * Sets a set of rows components that the Grid will render instead of the built-in row.
     */
    rows?: GridRowsSettings;
    /**
     * The index to be applied to the `aria-rowindex` attribute.
     */
    ariaRowIndex?: number;
    /**
     * The index of the leaf dataItem in data. Used by selection.
     */
    dataIndex: number;
    /**
     * Indicates if the row is selected.
     */
    isSelected: boolean;
    /**
     * @hidden
     */
    isHighlighted?: boolean;
    /**
     * @hidden
     */
    absoluteRowIndex: number;
    /**
     * @hidden
     */
    isRowReorderable?: boolean;
}

/**
 * Represents the object of the `onReorderRow` Grid event.
 */
export declare interface GridRowReorderEvent extends Omit<GridEvent, 'syntheticEvent'> {
    /**
     * Represents the currently dragged row.
     */
    draggedDataItems: any[];
    /**
     * Represents the row over which the dragged row is dropped.
     */
    droppedDataItem: any;
    /**
     * The exact dragged row position relative to the position of the drop target row..
     */
    dropPosition: GridReorderDropPosition;
    /**
     * A native DOM event.
     */
    nativeEvent: PointerEvent | MouseEvent | TouchEvent | Event;
    /**
     * Represents a unified drag event that is triggered regardless if the native event underneath is a pointer, mouse, touch, or scroll event.
     */
    dragEvent: NormalizedDragEvent;
    /**
     * The reference of the Grid in which the row is dropped.
     */
    target: GridHandle;
}

/**
 * Represents the settings for the row reordering functionality of the Grid.
 */
export declare type GridRowReorderSettings = {
    /**
     * Determines if the row reordering functionality is enabled.
     *
     * @default false
     */
    enabled?: boolean;
    /**
     * Determines what the text of the drag clue will be.
     * Can also be a function giving the dataItem as an argument and returning a new custom drag clue as a ReactNode.
     *
     * Default value will be the text of the first visible data column of the row.
     */
    dragClue?: string | ((dataItem: any) => React.ReactNode);
};

/**
 * Represents the settings for the row-spanning functionality of the Grid.
 */
export declare type GridRowSpannableSettings = {
    /**
     * Determines if the row-spanning functionality is enabled or disabled
     */
    enabled?: boolean;
    /**
     * A function that returns the value of the cell that should span the row.
     * The value could be combined from multiple fields of the dataItem to create a unique identifier and prevent the cell from being row-spanned.
     */
    valueGetter?: (dataItem: any, field: string) => any;
};

/**
 * The settings of the rows prop options.
 */
export declare interface GridRowsSettings {
    /**
     * Custom component for rendering the group header row.
     *
     * @example
     * ```tsx
     * import { MyGroupHeaderRow } from './MyGroupHeaderRow';
     * <Grid rows={{ groupHeader: MyGroupHeaderRow }} />
     * ```
     */
    groupHeader?: ComponentType<GridCustomRowProps>;
    /**
     * Custom component for rendering the data row.
     *
     * @example
     * ```tsx
     * import { MyDataRow } from './MyDataRow';
     * <Grid rows={{ data: MyDataRow }} />
     * ```
     */
    data?: ComponentType<GridCustomRowProps>;
    /**
     * Custom component for rendering the group footer row.
     *
     * @example
     * ```tsx
     * import { MyGroupFooterRow } from './MyGroupFooterRow';
     * <Grid rows={{ groupFooter: MyGroupFooterRow }} />
     * ```
     */
    groupFooter?: ComponentType<GridCustomRowProps>;
}

/**
 * The type of the GridRow component.
 *
 * The available values are:
 * - `groupHeader`&mdash;The row is a group header.
 * - `groupFooter`&mdash;The row is a group footer.
 * - `data`&mdash;The row corresponds to an item from the `data` collection which is passed to the Grid.
 */
export declare type GridRowType = 'groupFooter' | 'groupHeader' | 'data';

/**
 * Represents the properties of the KendoReact GridSearchBox component.
 */
export declare const GridSearchBox: (props: GridSearchBoxProps) => JSX.Element;

/**
 * Represents the event object of the GridSearchBox `onChange` event.
 */
export declare interface GridSearchBoxChangeEvent extends TextBoxChangeEvent {
}

/**
 * Represents the props of the GridSearchBox component.
 */
export declare interface GridSearchBoxProps extends TextBoxProps {
    /**
     * Fires when the value of the search box is changed.
     */
    onChange?: (event: GridSearchBoxChangeEvent) => void;
}

/**
 * Represents the object of the `onSearchChange` Grid event.
 */
export declare interface GridSearchChangeEvent extends GridEvent {
    /**
     * The new search based on the user action.
     */
    search: CompositeFilterDescriptor;
}

/**
 * Represents the available selection modes.
 */
export declare type GridSelectableMode = TableSelectableMode;

/**
 * Represents the Grid selectable settings.
 */
export declare interface GridSelectableSettings extends TableSelectableSettings {
    /**
     * The available values are:
     * * `single`
     * * `multiple`
     *
     * @default "multiple"
     */
    mode?: GridSelectableMode;
}

/**
 * @hidden
 */
export declare const GridSelectionCell: (props: {
    cellProps: GridCellProps;
}) => JSX.Element | null;

/**
 * Represents the object of the `onSelectionChange` Grid event.
 */
export declare interface GridSelectionChangeEvent extends GridEvent, TableSelectionChangeEvent<GridHandle> {
    /**
     * The new [SelectDescriptor]({% slug api_data-tools_selectdescriptor %}) based on the user action.
     */
    select: SelectDescriptor;
    /**
     * The dataItem from which the selection starts(Valid for scenarios without checkbox selection).
     */
    startDataItem?: any;
    /**
     * The dataItem to which the selection ends(Valid for scenarios without checkbox selection)
     */
    endDataItem?: any;
}

/**
 * Represents the object of the `onSortChange` Grid event.
 */
export declare interface GridSortChangeEvent extends GridEvent {
    /**
     * The new ([SortDescriptor]({% slug api_kendo-data-query_sortdescriptor %})) according to the user action.
     */
    sort: SortDescriptor[];
}

/**
 * The sorting settings of the Grid ([see example]({% slug sorting_grid %})).
 *
 * @example
 * ```jsx-no-run
 *
 * <Grid
 *    sortable={true}
 * >
 * </Grid>
 * ```
 */
export declare type GridSortSettings = SortSettings;

/**
 * Represents the attributes for Grid table cell elements, extending standard HTML td element properties.
 */
export declare interface GridTdAttributes extends React.TdHTMLAttributes<HTMLTableCellElement> {
    /**
     * The column index attribute used for grid operations.
     */
    [TABLE_COL_INDEX_ATTRIBUTE]?: number;
    /**
     * The unique identifier of the column.
     */
    columnId?: string;
    /**
     * The React key for the element.
     */
    key?: string;
}

/**
 * Represents the attributes for Grid header cell elements, extending standard HTML th element properties.
 */
export declare interface GridThAttributes extends HeaderThElementProps {
    /**
     * The unique identifier of the column.
     */
    columnId: string;
    /**
     * The React key for the element.
     */
    key?: string;
}

/**
 * Represents the GridToolbar component.
 *
 * @remarks
 * Supported children components are: {@link GridToolbarAIAssistant}, {@link GridToolbarCheckboxFilter}, {@link GridToolbarColumnsChooser},
 * {@link GridToolbarFilter}, {@link GridToolbarGroup}, {@link GridToolbarSeparator}, {@link GridToolbarSort},
 * {@link GridToolbarSpacer}, {@link GridSearchBox}, {@link GridPdfExportButton}.
 *
 * @example
 * ```jsx
 * const App = () => {
 *     const [data, setData] = useState([
 *         { Column1: 'A1', Column2: 'A2' },
 *         { Column1: 'B1', Column2: 'B2' },
 *         { Column1: 'C1', Column2: 'C2' }
 *     ]);
 *
 *     const customClick = () => {
 *         alert('Custom handler in custom toolbar');
 *     };
 *
 *     return (
 *         <Grid data={data}>
 *             <GridToolbar>
 *                 <Button title="Click" onClick={customClick}>
 *                     Click
 *                 </Button>
 *             </GridToolbar>
 *         </Grid>
 *     );
 * };
 *
 * export default App;
 * ```
 */
export declare const GridToolbar: {
    (props: GridToolbarProps): JSX.Element;
    displayName: string;
};

/**
 * Represents the GridToolbarAIAssistant component.
 */
export declare const GridToolbarAIAssistant: React_2.ForwardRefExoticComponent<GridToolbarAIAssistantProps & React_2.RefAttributes<GridToolbarAIAssistantHandle>>;

/**
 * Represents the handle interface for the GridToolbarAIAssistant component.
 */
export declare interface GridToolbarAIAssistantHandle {
    /**
     * Shows the AI assistant prompt interface.
     */
    show: () => void;
    /**
     * Hides the AI assistant prompt interface.
     */
    hide: () => void;
}

export declare interface GridToolbarAIAssistantProps {
    /**
     * Defines the URL to which the request will be sent.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant requestUrl="https://example.com/api/ai" />
     * ```
     */
    requestUrl?: string;
    /**
     * Enables the speech-to-text functionality for the input of the GridToolbarAIAssistant.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant enableSpeechToText={true} />
     * ```
     */
    enableSpeechToText?: boolean | SpeechToTextButtonProps;
    /**
     * Defines the placeholder text for the AI prompt input.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant promptPlaceHolder="Ask AI to filter, sort or group" />
     * ```
     */
    promptPlaceHolder?: string;
    /**
     * Defines the list of suggestions for the AI prompt.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant suggestionsList={['Sort by Amount', 'Group by Account Type']} />
     * ```
     */
    suggestionsList?: string[];
    /**
     * Defines if the AI prompt is in streaming mode.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant streaming={true} />
     * ```
     */
    streaming?: boolean;
    /**
     * Defines if the AI prompt is in loading mode.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant loading={true} />
     * ```
     */
    loading?: boolean;
    /**
     * Defines the outputs of the AI prompt.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant outputs={[{ id: 1, title: 'Output 1', responseContent: '...' }]} />
     * ```
     */
    outputs?: AIPromptOutputInterface[];
    /**
     * Defines the options for the axios request.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant requestOptions={{ timeout: 5000 }} />
     * ```
     */
    requestOptions?: AxiosRequestConfig;
    /**
     * Called before the request is sent.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant onPromptRequest={(request) => console.log(request)} />
     * ```
     */
    onPromptRequest?: (request: GridToolbarAIAssistantRequestData, isRetry?: boolean) => void;
    /**
     * Called when the response is received.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant onResponseSuccess={(response) => console.log(response)} />
     * ```
     */
    onResponseSuccess?: (response: AxiosResponse<any>, promptMessage?: string, isRetry?: boolean) => void;
    /**
     * Called when the response returns an error.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant onResponseError={(error) => console.error(error)} />
     * ```
     */
    onResponseError?: (error: any) => void;
    /**
     * Defines the user role for the request. Defaults to 'user'.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant role="admin" />
     * ```
     */
    role?: string;
    /**
     * Customizes the AI prompt component.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant gridAIPrompt={MyCustomPromptComponent} />
     * ```
     */
    gridAIPrompt?: CustomComponent<GridAIPromptProps>;
    /**
     * Defines the icon rendered in the GridToolbarAIAssistant tool ([see example]({% slug overview_icon %})).
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant icon="home" />
     * ```
     */
    icon?: string;
    /**
     * Defines the SVG icon rendered in the GridToolbarAIAssistant tool ([see example]({% slug overview_svgicon %})).
     *
     * @example
     * ```jsx
     * import { gearIcon } from '@progress/kendo-svg-icons';
     *
     * <GridToolbarAIAssistant svgIcon={gearIcon} />
     * ```
     */
    svgIcon?: SVGIcon_2;
    /**
     * Specifies if the popup will be displayed.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant show={true} />
     * ```
     */
    show?: boolean;
    /**
     * The method that will be called to close the column menu.
     *
     * @example
     * ```jsx
     * <GridToolbarAIAssistant onCloseWindow={() => console.log('close menu');} />
     * ```
     */
    onCloseWindow?: () => void;
}

/**
 * Represents the request data structure for the GridToolbarAIAssistant component.
 */
export declare interface GridToolbarAIAssistantRequestData {
    /**
     * The role or context for the AI request.
     */
    role: string;
    /**
     * The array of column definitions with their field names.
     */
    columns: Array<{
        field: string;
    }>;
    /**
     * The headers object containing key-value pairs for the request.
     */
    headers: Record<string, string>;
    /**
     * The prompt message sent to the AI assistant.
     */
    promptMessage: string;
    /**
     * The request configuration options for the HTTP request.
     */
    requestOptions: {
        url?: string;
        method?: string;
        withCredentials?: boolean;
        responseType?: string;
        cancelToken?: any;
        [key: string]: any;
    };
}

/**
 * Represents the GridToolbarCheckboxFilter component.
 */
export declare const GridToolbarCheckboxFilter: {
    (props: GridToolbarCheckboxFilterProps): JSX.Element;
    displayName: string;
};

export declare interface GridToolbarCheckboxFilterProps {
    /**
     * Sets the items collection that will be rendered by the GridToolbarCheckboxFilter component.
     */
    data: Array<string | object>;
    /**
     * Defines the icon rendered in the GridToolbarCheckboxFilter tool ([see example]({% slug overview_icon %})).
     *
     * @example
     * ```jsx
     * <GridToolbarCheckboxFilter icon="home" />
     * ```
     */
    icon?: string;
    /**
     * Defines the SVG icon rendered in the GridToolbarCheckboxFilter tool ([see example]({% slug overview_svgicon %})).
     *
     * @example
     * ```jsx
     * import { gearIcon } from '@progress/kendo-svg-icons';
     *
     * <GridToolbarCheckboxFilter svgIcon={gearIcon} />
     * ```
     */
    svgIcon?: SVGIcon;
    /**
     * Defines the component that will be rendered as a search box.
     *
     */
    searchBox?: React_2.ComponentType<any>;
    /**
     * Defines the filter operator that will be used to filter the values via the search box.
     * "startswith"
     * "endswith"
     * "contains"
     * "doesnotcontain"
     * "isempty"
     * "isnotempty"
     * "eq" (equal to)
     * "eq" (equal to)
     * "neq" (not equal to)
     * "isnull" (is equal to null)
     * "isnotnull" (is not equal to null)
     */
    searchBoxFilterOperator?: string | Function;
    /**
     * Determines if the data in the component will be unique. By default the property is set to true.
     *
     * @example
     * ```jsx
     * <GridToolbarCheckboxFilter uniqueData={true} />
     * ```
     */
    uniqueData?: boolean;
    /**
     * Specifies if the popup will be displayed.
     *
     * @example
     * ```jsx
     * <GridToolbarCheckboxFilter show={true} />
     * ```
     */
    show?: boolean;
    /**
     * The method that will be called to close the column menu.
     *
     * @example
     * ```jsx
     * <GridToolbarCheckboxFilter onCloseMenu={() => console.log('close menu');} />
     * ```
     */
    onCloseMenu?: Function;
}

/**
 * Represents the GridToolbarColumnsChooser component.
 */
export declare const GridToolbarColumnsChooser: {
    (props: GridToolbarColumnsChooserProps): JSX.Element;
    displayName: string;
};

export declare interface GridToolbarColumnsChooserProps {
    /**
     * Defines the icon rendered in the GridToolbarSort tool ([see example]({% slug overview_icon %})).
     *
     * @example
     * ```jsx
     * <GridToolbarSort icon="home" />
     * ```
     */
    icon?: string;
    /**
     * Defines the SVG icon rendered in the GridToolbarSort tool ([see example]({% slug overview_svgicon %})).
     *
     * @example
     * ```jsx
     * import { gearIcon } from '@progress/kendo-svg-icons';
     *
     * <GridToolbarSort svgIcon={gearIcon} />
     * ```
     */
    svgIcon?: SVGIcon;
    /**
     * Specifies if the popup will be displayed.
     *
     * @example
     * ```jsx
     * <GridToolbarColumnsChooser show={true} />
     * ```
     */
    show?: boolean;
    /**
     * The method that will be called to close the column menu.
     *
     * @example
     * ```jsx
     * <GridToolbarColumnsChooser onCloseMenu={() => console.log('close menu');} />
     */
    onCloseMenu?: Function;
}

/**
 * Represents the GridToolbarFilter component.
 */
export declare const GridToolbarFilter: {
    (props: GridToolbarFilterProps): JSX.Element;
    displayName: string;
};

export declare interface GridToolbarFilterProps {
    /**
     * Defines the icon rendered in the GridToolbarFilter tool ([see example]({% slug overview_icon %})).
     *
     * @example
     * ```jsx
     * <GridToolbarFilter icon="home" />
     * ```
     */
    icon?: string;
    /**
     * Defines the SVG icon rendered in the GridToolbarFilter tool ([see example]({% slug overview_svgicon %})).
     *
     * @example
     * ```jsx
     * import { gearIcon } from '@progress/kendo-svg-icons';
     *
     * <GridToolbarFilter svgIcon={gearIcon} />
     * ```
     */
    svgIcon?: SVGIcon;
    /**
     * If set to `false`, the second filter operator and the input will be hidden.
     */
    hideSecondFilter?: boolean;
    /**
     * Specifies a React element that will be cloned and rendered inside the UI of the column-menu filter component
     * ([see example]({% slug column_menu_grid %}#toc-customizing-the-filter-component)).
     */
    filterUI?: ComponentType<GridColumnMenuFilterUIProps>;
    /**
     * Specifies if the popup will be displayed.
     *
     * @example
     * ```jsx
     * <GridToolbarFilter show={true} />
     * ```
     */
    show?: boolean;
    /**
     * The method that will be called to close the column menu.
     *
     * @example
     * ```jsx
     * <GridToolbarFilter onCloseMenu={() => console.log('close menu');} />
     * ```
     */
    onCloseMenu?: Function;
    /**
     * The method that will be called to notify the parent Grid about a filter change.
     */
    onFilterChange?: (filter: CompositeFilterDescriptor | null, syntheticEvent: React_2.SyntheticEvent<any>) => any;
}

/**
 * Represents the GridToolbarGroup component.
 */
export declare const GridToolbarGroup: {
    (props: GridToolbarGroupProps): any;
    displayName: string;
};

export declare interface GridToolbarGroupProps {
    /**
     * Defines the icon rendered in the GridToolbarGroup tool ([see example]({% slug overview_icon %})).
     *
     * @example
     * ```jsx
     * <GridToolbarGroup icon="home" />
     * ```
     */
    icon?: string;
    /**
     * Defines the SVG icon rendered in the GridToolbarGroup tool ([see example]({% slug overview_svgicon %})).
     *
     * @example
     * ```jsx
     * import { gearIcon } from '@progress/kendo-svg-icons';
     *
     * <GridToolbarGroup svgIcon={gearIcon} />
     * ```
     */
    svgIcon?: SVGIcon_2;
    /**
     * Specifies if the popup will be displayed.
     *
     * @example
     * ```jsx
     * <GridToolbarGroup show={true} />
     * ```
     */
    show?: boolean;
    /**
     * The method that will be called to close the column menu.
     *
     * @example
     * ```jsx
     * <GridToolbarGroup onCloseMenu={() => console.log('close menu');} />
     * ```
     */
    onCloseMenu?: Function;
}

/**
 * The properties of the GridToolbar component.
 */
export declare interface GridToolbarProps extends ToolbarProps {
    /**
     * @hidden
     */
    _ariaControls?: string;
}

/**
 * Represents the GridToolbarSeparator component.
 */
export declare const GridToolbarSeparator: {
    (props: GridToolbarSeparatorProps): JSX.Element;
    displayName: string;
};

/**
 * Represents the props of KendoReact GridToolbarSeparator component.
 */
export declare interface GridToolbarSeparatorProps extends ToolbarSeparatorProps {
}

/**
 * Represents the GridToolbarSort component.
 */
export declare const GridToolbarSort: {
    (props: GridToolbarSortProps): any;
    displayName: string;
};

export declare interface GridToolbarSortProps {
    /**
     * Defines the icon rendered in the GridToolbarSort tool ([see example]({% slug overview_icon %})).
     *
     * @example
     * ```jsx
     * <GridToolbarSort icon="home" />
     * ```
     */
    icon?: string;
    /**
     * Defines the SVG icon rendered in the GridToolbarSort tool ([see example]({% slug overview_svgicon %})).
     *
     * @example
     * ```jsx
     * import { gearIcon } from '@progress/kendo-svg-icons';
     *
     * <GridToolbarSort svgIcon={gearIcon} />
     * ```
     */
    svgIcon?: SVGIcon_2;
    /**
     * Specifies if the popup will be displayed.
     *
     * @example
     * ```jsx
     * <GridToolbarSort show={true} />
     * ```
     */
    show?: boolean;
    /**
     * The method that will be called to close the column menu.
     *
     * @example
     * ```jsx
     * <GridToolbarSort onCloseMenu={() => console.log('close menu');} />
     * ```
     */
    onCloseMenu?: Function;
}

/**
 * Represents the GridToolbarSpacer component.
 */
export declare const GridToolbarSpacer: {
    (props: GridToolbarSpacerProps): JSX.Element;
    displayName: string;
};

/**
 * Represents the props of KendoReact GridToolbarSpacer component.
 */
export declare interface GridToolbarSpacerProps extends ToolbarSpacerProps {
}

/**
 * @hidden
 */
declare type handler = (prevIndex: number, nextIndex: number, nativeEvent: any) => void;

/**
 * Can be used to check if filtering is applied to a specific field ([see example]({% slug column_menu_grid %}#toc-styling-the-column-menu-icon)). Useful for creating active filter indicators.
 */
export declare const isColumnMenuFilterActive: (field: string, filter?: CompositeFilterDescriptor) => boolean;

/**
 * Can be used to check if sorting is applied to a specific field ([see example]({% slug column_menu_grid %}#toc-styling-the-column-menu-icon)). Useful for creating active sort indicators.
 */
export declare const isColumnMenuSortActive: (field: string, sort?: SortDescriptor[]) => boolean;

/**
 * @hidden
 */
export declare const leafColumns: (columns: GridColumnProps[]) => GridColumnProps[];

/**
 * The text of the filter operators displayed in the filter menu.
 */
export declare const operators: GridFilterOperators;

/**
 * Represents the `skip` and `take` configurations which are wrapped in the `Page` object.
 */
declare interface Page {
    /**
     * The number of records that will be skipped.
     */
    skip: number;
    /**
     * The number of records that will be taken.
     */
    take: number;
}

/**
 * @hidden
 */
export declare const pagerFirstPage = "grid.pagerFirstPage";

/**
 * @hidden
 */
export declare const pagerInfo = "grid.pagerInfo";

/**
 * @hidden
 */
export declare const pagerItemPerPage = "grid.pagerItemsPerPage";

/**
 * @hidden
 */
export declare const pagerLastPage = "grid.pagerLastPage";

/**
 * @hidden
 */
export declare const pagerNextPage = "grid.pagerNextPage";

/**
 * @hidden
 */
export declare const pagerPreviousPage = "grid.pagerPreviousPage";

/**
 * Parse date values in the filter descriptors.
 * If the value is a string, it will be parsed to a Date object using the provided
 */
export declare const parseFilterDates: (newFilter: CompositeFilterDescriptor | FilterDescriptor, intl?: IntlService) => void;

/**
 * @hidden
 */
export declare const rootFilterOrDefault: (rootFilter: CompositeFilterDescriptor | undefined) => CompositeFilterDescriptor;

declare type ScrollMode = 'none' | 'scrollable' | 'virtual';

/**
 * Represents a server counterpart of every Grid event. It strips out all arguments from the event that are not serializable to the server.
 */
export declare type ServerEvent<T> = Omit<T, 'nativeEvent' | 'syntheticEvent' | 'target' | 'targetEvent'>;

export { setSelectedState }

/**
 * Represents the KendoReact Grid's StatusBar component.
 */
export declare const StatusBar: React_2.FunctionComponent<StatusBarProps>;

/**
 * Represents the props of the KendoReact Grid's StatusBar component.
 */
export declare interface StatusBarProps {
    /**
     * The collection of status items to display in the status bar.
     */
    data: StatusItem[];
}

/**
 * Represents the arguments of the getStatusData function.
 */
export declare type StatusDataArgs = Pick<GridSelectionChangeEvent, 'dataItems' | 'target' | 'select'> & {
    dataItemKey: Required<GridProps>['dataItemKey'];
};

/**
 * Represents the KendoReact Grid's StatusItem object.
 */
export declare interface StatusItem {
    /**
     * The type of the status item.
     * Could be `sum`, `min`, `max`, `average`, `count`, `isTrue`, `isFalse`, `earliest` or `latest`.
     */
    type: string;
    /**
     * The calculated value of the status item.
     */
    value: number | boolean | Date;
    /**
     * The formatted value of the status item.
     */
    formattedValue: string;
}

export { }
