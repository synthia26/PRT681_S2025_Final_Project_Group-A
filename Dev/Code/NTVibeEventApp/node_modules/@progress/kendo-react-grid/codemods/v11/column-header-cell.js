/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const t=require("./utils.js");function v(l,C){const e=C.jscodeshift,n=e(l.source),m=l.path.endsWith(".ts")||l.path.endsWith(".tsx");let c=!1;const u=new Set;n.find(e.Identifier).forEach(s=>{u.add(s.node.name)});const f="CustomColumnHeaderCell",h=t.findImportedName(e,n,"Grid","@progress/kendo-react-grid")||"Grid",g=t.findImportedName(e,n,"GridColumn","@progress/kendo-react-grid")||"GridColumn";return n.find(e.JSXElement,{openingElement:{name:{name:h}}}).forEach(s=>{const{isClassComponent:i,parentNode:E}=t.findParentComponent(e,s);e(s).find(e.JSXElement,{openingElement:{name:{name:g}}}).forEach((N,G)=>{const d=N.node.openingElement.attributes;if(!d)return;const o=d.find(p=>p.type==="JSXAttribute"&&p.name.name==="headerCell");if(!o)return;const a=t.generateUniqueName(`${f}$${G+1}`,u),S=o!=null&&o.value?e(o.value).toSource():"No value provided";t.removeAttribute(d,"headerCell"),t.ensureAttributeExists(e,d,"cells","headerCell",i?`this.${a}`:a),c=!0;let r;i?r=t.createMethodForClassComponent(e,a,m,"GridCustomHeaderCellProps"):r=t.createArrowFunctionForFunctionalComponent(e,a,m,"GridCustomHeaderCellProps"),t.addMethodToComponent(e,E,r,i),r&&t.addCommentToMethod(e,e(r),`Original headerCell value: ${S}`,i?"class":"function")})}),c&&m&&t.ensureImportExists(e,n,"GridCustomHeaderCellProps","@progress/kendo-react-grid"),n.toSource()}module.exports=v;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
