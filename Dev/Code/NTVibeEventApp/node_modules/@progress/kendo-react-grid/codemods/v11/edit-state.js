/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const t=require("./utils.js");function b(h,E){const e=E.jscodeshift,d=e(h.source),a=h.path.endsWith(".ts")||h.path.endsWith(".tsx");let c=!1;const u=new Set;d.find(e.Identifier).forEach(s=>{u.add(s.node.name)});const r=t.generateUniqueName("handleEditChange",u),p=t.findImportedName(e,d,"Grid","@progress/kendo-react-grid")||"Grid";return d.find(e.JSXElement,{openingElement:{name:{name:p}}}).forEach(s=>{const n=s.node.openingElement.attributes,m=n==null?void 0:n.find(i=>i.type==="JSXAttribute"&&i.name.name==="editField");if(!m)return;const l=m.value?e(m.value).toSource():"No value provided";t.removeAttribute(n,"editField"),c=!0,t.hasJSXAttribute(n,"editable")||t.addStateAttribute(e,n,"editable","true"),t.hasJSXAttribute(n,"dataItemKey")||t.addStateAttribute(e,n,"dataItemKey",'"insert dataItemKey here"');const{isClassComponent:g,isFunctionalComponent:C,parentNode:o}=t.findParentComponent(e,s);if(g){if(t.addStateDeclaration(e,o,"edit",e.objectExpression([])),t.hasJSXAttribute(n,"edit")||t.addStateAttribute(e,n,"edit","this.state.edit"),!t.hasJSXAttribute(n,"onItemChange")){t.addEventAttribute(e,n,"onItemChange","this.handleItemChange");const i=t.createClassMethod(e,"handleItemChange",[`event${a?": GridItemChangeEvent":""}`],[]);t.addMethodToComponent(e,o,i,!0)}if(!t.hasJSXAttribute(n,"onEditChange")){t.addEventAttribute(e,n,"onEditChange",`this.${r}`);const i=t.createClassMethod(e,r,[`event${a?": GridEditChangeEvent":""}`],[e.expressionStatement(e.callExpression(e.memberExpression(e.thisExpression(),e.identifier("setState")),[e.objectExpression([e.property("init",e.identifier("edit"),e.memberExpression(e.identifier("event"),e.identifier("edit")))])]))]);t.addCommentToMethod(e,e(i),`Original editField value: ${l}`,"class"),t.addMethodToComponent(e,o,i,!0)}}else if(C){if(t.addUseStateDeclaration(e,o,"edit","setEdit",e.objectExpression([]),a,"EditDescriptor"),t.hasJSXAttribute(n,"edit")||t.addStateAttribute(e,n,"edit","edit"),!t.hasJSXAttribute(n,"onItemChange")){t.addEventAttribute(e,n,"onItemChange","handleItemChange");const i=t.createArrowFunction(e,"handleItemChange",[`(event${a?": GridItemChangeEvent":""})`],[]);t.addMethodToComponent(e,o,i,!1)}if(!t.hasJSXAttribute(n,"onEditChange")){t.addEventAttribute(e,n,"onEditChange",`${r}`);const i=t.createArrowFunction(e,`${r}`,[`(event${a?": GridEditChangeEvent":""})`],[e.expressionStatement(e.callExpression(e.identifier("setEdit"),[e.memberExpression(e.identifier("event"),e.identifier("edit"))]))]);t.addCommentToMethod(e,e(i),`Original editField value: ${l}`,"function"),t.addMethodToComponent(e,o,i,!1)}}}),c&&a&&(t.ensureImportExists(e,d,"GridItemChangeEvent","@progress/kendo-react-grid"),t.ensureImportExists(e,d,"GridEditChangeEvent","@progress/kendo-react-grid"),t.ensureImportExists(e,d,"EditDescriptor","@progress/kendo-react-data-tools")),d.toSource()}module.exports=b;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
