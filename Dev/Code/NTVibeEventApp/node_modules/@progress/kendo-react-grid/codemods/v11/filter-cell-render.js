/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const t=require("./utils.js");function F(m,C){const e=C.jscodeshift,o=e(m.source),c=m.path.endsWith(".ts")||m.path.endsWith(".tsx");let u=!1;const p=new Set;o.find(e.Identifier).forEach(s=>{p.add(s.node.name)});const i=t.generateUniqueName("CustomFilterCell",p),f=t.findImportedName(e,o,"Grid","@progress/kendo-react-grid")||"Grid";return o.find(e.JSXElement,{openingElement:{name:{name:f}}}).forEach(s=>{const n=s.node.openingElement.attributes,l=n==null?void 0:n.find(d=>d.type==="JSXAttribute"&&d.name.name==="filterCellRender");if(l&&l.type==="JSXAttribute"){const d=l.value?e(l.value).toSource():"No value provided",{isClassComponent:a,isFunctionalComponent:h,parentNode:g}=t.findParentComponent(e,s);n&&t.ensureAttributeExists(e,n,"cells","filterCell",a?`this.${i}`:i);let r;a?r=t.createMethodForClassComponent(e,i,c,"GridCustomFilterCellProps"):h&&(r=t.createArrowFunctionForFunctionalComponent(e,i,c,"GridCustomFilterCellProps")),t.addMethodToComponent(e,g,r,a),r&&t.addCommentToMethod(e,e(r),`Original filterCellRender value: ${d}`,a?"class":"function"),t.removeAttribute(n,"filterCellRender")&&(u=!0)}}),u&&c&&t.ensureImportExists(e,o,"GridCustomFilterCellProps","@progress/kendo-react-grid"),o.toSource()}module.exports=F;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
