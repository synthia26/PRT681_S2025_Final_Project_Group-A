/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const n=require("./utils.js");function f(u,m){const e=m.jscodeshift,r=e(u.source),a=u.path.endsWith(".ts")||u.path.endsWith(".tsx");let E=!1;const x=new Set;r.find(e.Identifier).forEach(d=>{x.add(d.node.name)});const i=n.generateUniqueName("handleGroupExpand",x),g=n.findImportedName(e,r,"Grid","@progress/kendo-react-grid")||"Grid";return r.find(e.JSXElement,{openingElement:{name:{name:g}}}).forEach(d=>{const t=d.node.openingElement.attributes;if(!n.hasJSXAttribute(t,"groupable"))return;const s=t==null?void 0:t.find(o=>o.type==="JSXAttribute"&&o.name.name==="onExpandChange"),c=s!=null&&s.value?e(s.value).toSource():"No value provided";n.removeAttribute(t,"onExpandChange"),E=!0;const{isClassComponent:h,isFunctionalComponent:l,parentNode:p}=n.findParentComponent(e,d);if(h){if(n.addStateDeclaration(e,p,"groupExpand",e.arrayExpression([])),n.hasJSXAttribute(t,"groupExpand")||n.addStateAttribute(e,t,"groupExpand","this.state.groupExpand"),!n.hasJSXAttribute(t,"onGroupExpandChange")){n.addEventAttribute(e,t,"onGroupExpandChange",`this.${i}`);const o=n.createClassMethod(e,i,[`event${a?": GridGroupExpandChangeEvent":""}`],[e.expressionStatement(e.callExpression(e.memberExpression(e.thisExpression(),e.identifier("setState")),[e.objectExpression([e.property("init",e.identifier("groupExpand"),e.memberExpression(e.identifier("event"),e.identifier("groupExpand")))])]))]);n.addCommentToMethod(e,e(o),`Original onExpandChange value: ${c}`,"class"),n.addMethodToComponent(e,p,o,!0)}}else if(l&&(n.addUseStateDeclaration(e,p,"groupExpand","setGroupExpand",e.arrayExpression([]),a,"GroupExpandDescriptor[]"),n.hasJSXAttribute(t,"groupExpand")||n.addStateAttribute(e,t,"groupExpand","groupExpand"),!n.hasJSXAttribute(t,"onGroupExpandChange"))){n.addEventAttribute(e,t,"onGroupExpandChange",`${i}`);const o=n.createArrowFunction(e,`${i}`,[`(event${a?": GridGroupExpandChangeEvent":""})`],[e.expressionStatement(e.callExpression(e.identifier("setGroupExpand"),[e.memberExpression(e.identifier("event"),e.identifier("groupExpand"))]))]);n.addCommentToMethod(e,e(o),`Original onExpandChange value: ${c}`,"function"),n.addMethodToComponent(e,p,o,!1)}}),E&&a&&(n.ensureImportExists(e,r,"GroupExpandDescriptor","@progress/kendo-react-data-tools"),n.ensureImportExists(e,r,"GridGroupExpandChangeEvent","@progress/kendo-react-grid")),r.toSource()}module.exports=f;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
