/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const t=require("./utils.js");function N(l,C){const e=C.jscodeshift,o=e(l.source),m=l.path.endsWith(".ts")||l.path.endsWith(".tsx");let u=!1;const p=new Set;o.find(e.Identifier).forEach(i=>{p.add(i.node.name)});const r=t.generateUniqueName("CustomCell",p),f=t.findImportedName(e,o,"Grid","@progress/kendo-react-grid")||"Grid";return o.find(e.JSXElement,{openingElement:{name:{name:f}}}).forEach(i=>{const n=i.node.openingElement.attributes,d=n==null?void 0:n.find(a=>a.type==="JSXAttribute"&&a.name.name==="cellRender");if(d&&d.type==="JSXAttribute"){const a=d.value?e(d.value).toSource():"No value provided",{isClassComponent:c,isFunctionalComponent:h,parentNode:g}=t.findParentComponent(e,i);n&&t.ensureAttributeExists(e,n,"cells","data",c?`this.${r}`:r);let s;c?s=t.createMethodForClassComponent(e,r,m,"GridCustomCellProps"):h&&(s=t.createArrowFunctionForFunctionalComponent(e,r,m,"GridCustomCellProps")),t.addMethodToComponent(e,g,s,c),s&&t.addCommentToMethod(e,e(s),`Original cellRender value: ${a}`,c?"class":"function"),t.removeAttribute(n,"cellRender")&&(u=!0)}}),u&&m&&t.ensureImportExists(e,o,"GridCustomCellProps","@progress/kendo-react-grid"),o.toSource()}module.exports=N;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC1yZW5kZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2dyaWQvY29kZW1vZHMvdjExL2NlbGwtcmVuZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSSwgRmlsZUluZm8sIEpTQ29kZXNoaWZ0LCBKU1hBdHRyaWJ1dGUsIEpTWFNwcmVhZEF0dHJpYnV0ZSB9IGZyb20gJ2pzY29kZXNoaWZ0JztcbmltcG9ydCB7XG4gICAgYWRkQ29tbWVudFRvTWV0aG9kLFxuICAgIGVuc3VyZUF0dHJpYnV0ZUV4aXN0cyxcbiAgICBmaW5kUGFyZW50Q29tcG9uZW50LFxuICAgIGdlbmVyYXRlVW5pcXVlTmFtZSxcbiAgICBlbnN1cmVJbXBvcnRFeGlzdHMsXG4gICAgY3JlYXRlTWV0aG9kRm9yQ2xhc3NDb21wb25lbnQsXG4gICAgY3JlYXRlQXJyb3dGdW5jdGlvbkZvckZ1bmN0aW9uYWxDb21wb25lbnQsXG4gICAgYWRkTWV0aG9kVG9Db21wb25lbnQsXG4gICAgcmVtb3ZlQXR0cmlidXRlLFxuICAgIGZpbmRJbXBvcnRlZE5hbWVcbn0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChmaWxlSW5mbzogRmlsZUluZm8sIGFwaTogQVBJKSB7XG4gICAgY29uc3QgajogSlNDb2Rlc2hpZnQgPSBhcGkuanNjb2Rlc2hpZnQ7XG4gICAgY29uc3Qgcm9vdCA9IGooZmlsZUluZm8uc291cmNlKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZSBmaWxlIGlzIFR5cGVTY3JpcHQgb3IgVFNYXG4gICAgY29uc3QgaXNUeXBlU2NyaXB0ID0gZmlsZUluZm8ucGF0aC5lbmRzV2l0aCgnLnRzJykgfHwgZmlsZUluZm8ucGF0aC5lbmRzV2l0aCgnLnRzeCcpO1xuXG4gICAgbGV0IGFkZEltcG9ydHMgPSBmYWxzZTtcbiAgICAvLyBDb2xsZWN0IGFsbCBleGlzdGluZyBtZXRob2QgbmFtZXNcbiAgICBjb25zdCBleGlzdGluZ05hbWVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgcm9vdC5maW5kKGouSWRlbnRpZmllcikuZm9yRWFjaCgocGF0aCkgPT4ge1xuICAgICAgICBleGlzdGluZ05hbWVzLmFkZChwYXRoLm5vZGUubmFtZSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBiYXNlTmFtZSA9ICdDdXN0b21DZWxsJztcbiAgICBjb25zdCB1bmlxdWVOYW1lID0gZ2VuZXJhdGVVbmlxdWVOYW1lKGJhc2VOYW1lLCBleGlzdGluZ05hbWVzKTtcblxuICAgIC8vIEVuc3VyZXMgd2UgZmluZCB0aGUgY29ycmVjdCBHcmlkIGltcG9ydFxuICAgIC8vIGlmIHRoZSB1c2VyIGhhcyBpbXBvcnRlZCBpdCB3aXRoIGEgZGlmZmVyZW50IG5hbWVcbiAgICAvLyBlLmcuIGltcG9ydCB7IEdyaWQgYXMgS2VuZG9HcmlkIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLXJlYWN0LWdyaWQnO1xuICAgIGNvbnN0IGdyaWROYW1lID0gZmluZEltcG9ydGVkTmFtZShqLCByb290LCAnR3JpZCcsICdAcHJvZ3Jlc3Mva2VuZG8tcmVhY3QtZ3JpZCcpIHx8ICdHcmlkJztcblxuICAgIC8vIEZpbmQgYWxsIEpTWEVsZW1lbnRzIHdpdGggdGhlIG5hbWUgJ0dyaWQnXG4gICAgcm9vdC5maW5kKGouSlNYRWxlbWVudCwgeyBvcGVuaW5nRWxlbWVudDogeyBuYW1lOiB7IG5hbWU6IGdyaWROYW1lIH0gfSB9KS5mb3JFYWNoKChwYXRoKSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBwYXRoLm5vZGUub3BlbmluZ0VsZW1lbnQuYXR0cmlidXRlcztcblxuICAgICAgICAvLyBGaW5kIHRoZSAnY2VsbFJlbmRlcicgYXR0cmlidXRlXG4gICAgICAgIGNvbnN0IGNlbGxSZW5kZXJBdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzPy5maW5kKFxuICAgICAgICAgICAgKGF0dHIpID0+IGF0dHIudHlwZSA9PT0gJ0pTWEF0dHJpYnV0ZScgJiYgYXR0ci5uYW1lLm5hbWUgPT09ICdjZWxsUmVuZGVyJ1xuICAgICAgICApIGFzIEpTWEF0dHJpYnV0ZTtcblxuICAgICAgICAvLyBJZiB0aGUgJ2NlbGxSZW5kZXInIGF0dHJpYnV0ZSBleGlzdHMsIGNvcHkgaXRzIHZhbHVlIGFzIGEgY29tbWVudFxuICAgICAgICBpZiAoY2VsbFJlbmRlckF0dHJpYnV0ZSAmJiBjZWxsUmVuZGVyQXR0cmlidXRlLnR5cGUgPT09ICdKU1hBdHRyaWJ1dGUnKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsUmVuZGVyVmFsdWUgPSBjZWxsUmVuZGVyQXR0cmlidXRlLnZhbHVlXG4gICAgICAgICAgICAgICAgPyBqKGNlbGxSZW5kZXJBdHRyaWJ1dGUudmFsdWUpLnRvU291cmNlKClcbiAgICAgICAgICAgICAgICA6ICdObyB2YWx1ZSBwcm92aWRlZCc7XG5cbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIHBhcmVudCBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbnN0IHsgaXNDbGFzc0NvbXBvbmVudCwgaXNGdW5jdGlvbmFsQ29tcG9uZW50LCBwYXJlbnROb2RlIH0gPSBmaW5kUGFyZW50Q29tcG9uZW50KGosIHBhdGgpO1xuXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGUgJ2NlbGxzJyBhdHRyaWJ1dGUgZXhpc3RzXG4gICAgICAgICAgICAgICAgZW5zdXJlQXR0cmlidXRlRXhpc3RzKFxuICAgICAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgICAnY2VsbHMnLFxuICAgICAgICAgICAgICAgICAgICAnZGF0YScsXG4gICAgICAgICAgICAgICAgICAgIGlzQ2xhc3NDb21wb25lbnQgPyBgdGhpcy4ke3VuaXF1ZU5hbWV9YCA6IHVuaXF1ZU5hbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBDdXN0b21DZWxsIG1ldGhvZFxuICAgICAgICAgICAgbGV0IGN1c3RvbU1ldGhvZDtcbiAgICAgICAgICAgIGlmIChpc0NsYXNzQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tTWV0aG9kID0gY3JlYXRlTWV0aG9kRm9yQ2xhc3NDb21wb25lbnQoaiwgdW5pcXVlTmFtZSwgaXNUeXBlU2NyaXB0LCAnR3JpZEN1c3RvbUNlbGxQcm9wcycpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uYWxDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICBjdXN0b21NZXRob2QgPSBjcmVhdGVBcnJvd0Z1bmN0aW9uRm9yRnVuY3Rpb25hbENvbXBvbmVudChcbiAgICAgICAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaXNUeXBlU2NyaXB0LFxuICAgICAgICAgICAgICAgICAgICAnR3JpZEN1c3RvbUNlbGxQcm9wcydcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgdGhlIEN1c3RvbUNlbGwgbWV0aG9kIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgICAgIGFkZE1ldGhvZFRvQ29tcG9uZW50KGosIHBhcmVudE5vZGUsIGN1c3RvbU1ldGhvZCwgaXNDbGFzc0NvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCB0aGUgY2VsbFJlbmRlciB2YWx1ZSBhcyBhIGNvbW1lbnQgaW4gdGhlIEN1c3RvbUNlbGwgbWV0aG9kXG4gICAgICAgICAgICBpZiAoY3VzdG9tTWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgYWRkQ29tbWVudFRvTWV0aG9kKFxuICAgICAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgICAgICBqKGN1c3RvbU1ldGhvZCksXG4gICAgICAgICAgICAgICAgICAgIGBPcmlnaW5hbCBjZWxsUmVuZGVyIHZhbHVlOiAke2NlbGxSZW5kZXJWYWx1ZX1gLFxuICAgICAgICAgICAgICAgICAgICBpc0NsYXNzQ29tcG9uZW50ID8gJ2NsYXNzJyA6ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlICdjZWxsUmVuZGVyJyBhdHRyaWJ1dGVcbiAgICAgICAgICAgIGNvbnN0IHdhc1JlbW92ZWQgPSByZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlcyBhcyAoSlNYQXR0cmlidXRlIHwgSlNYU3ByZWFkQXR0cmlidXRlKVtdLCAnY2VsbFJlbmRlcicpO1xuICAgICAgICAgICAgaWYgKHdhc1JlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICBhZGRJbXBvcnRzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGFkZEltcG9ydHMgJiYgaXNUeXBlU2NyaXB0KSB7XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgaW1wb3J0IGZvciBHcmlkQ3VzdG9tQ2VsbFByb3BzIGV4aXN0c1xuICAgICAgICBlbnN1cmVJbXBvcnRFeGlzdHMoaiwgcm9vdCwgJ0dyaWRDdXN0b21DZWxsUHJvcHMnLCAnQHByb2dyZXNzL2tlbmRvLXJlYWN0LWdyaWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm9vdC50b1NvdXJjZSgpO1xufVxuIl0sIm5hbWVzIjpbImNlbGxSZW5kZXIiLCJmaWxlSW5mbyIsImFwaSIsImoiLCJyb290IiwiaXNUeXBlU2NyaXB0IiwiYWRkSW1wb3J0cyIsImV4aXN0aW5nTmFtZXMiLCJwYXRoIiwidW5pcXVlTmFtZSIsImdlbmVyYXRlVW5pcXVlTmFtZSIsImdyaWROYW1lIiwiZmluZEltcG9ydGVkTmFtZSIsImF0dHJpYnV0ZXMiLCJjZWxsUmVuZGVyQXR0cmlidXRlIiwiYXR0ciIsImNlbGxSZW5kZXJWYWx1ZSIsImlzQ2xhc3NDb21wb25lbnQiLCJpc0Z1bmN0aW9uYWxDb21wb25lbnQiLCJwYXJlbnROb2RlIiwiZmluZFBhcmVudENvbXBvbmVudCIsImVuc3VyZUF0dHJpYnV0ZUV4aXN0cyIsImN1c3RvbU1ldGhvZCIsImNyZWF0ZU1ldGhvZEZvckNsYXNzQ29tcG9uZW50IiwiY3JlYXRlQXJyb3dGdW5jdGlvbkZvckZ1bmN0aW9uYWxDb21wb25lbnQiLCJhZGRNZXRob2RUb0NvbXBvbmVudCIsImFkZENvbW1lbnRUb01ldGhvZCIsInJlbW92ZUF0dHJpYnV0ZSIsImVuc3VyZUltcG9ydEV4aXN0cyJdLCJtYXBwaW5ncyI6IjJDQWNBLFNBQUFBLEVBQXlCQyxFQUFvQkMsRUFBVSxDQUNuRCxNQUFNQyxFQUFpQkQsRUFBSSxZQUNyQkUsRUFBT0QsRUFBRUYsRUFBUyxNQUFNLEVBR3hCSSxFQUFlSixFQUFTLEtBQUssU0FBUyxLQUFLLEdBQUtBLEVBQVMsS0FBSyxTQUFTLE1BQU0sRUFFbkYsSUFBSUssRUFBYSxHQUVYLE1BQUFDLE1BQW9CLElBQzFCSCxFQUFLLEtBQUtELEVBQUUsVUFBVSxFQUFFLFFBQVNLLEdBQVMsQ0FDeEJELEVBQUEsSUFBSUMsRUFBSyxLQUFLLElBQUksQ0FBQSxDQUNuQyxFQUdLLE1BQUFDLEVBQWFDLEVBQUFBLG1CQURGLGFBQytCSCxDQUFhLEVBS3ZESSxFQUFXQyxFQUFBQSxpQkFBaUJULEVBQUdDLEVBQU0sT0FBUSw0QkFBNEIsR0FBSyxPQUdwRixPQUFBQSxFQUFLLEtBQUtELEVBQUUsV0FBWSxDQUFFLGVBQWdCLENBQUUsS0FBTSxDQUFFLEtBQU1RLENBQUEsQ0FBYSxDQUFBLENBQUMsRUFBRSxRQUFTSCxHQUFTLENBQ2xGLE1BQUFLLEVBQWFMLEVBQUssS0FBSyxlQUFlLFdBR3RDTSxFQUFzQkQsR0FBQSxZQUFBQSxFQUFZLEtBQ25DRSxHQUFTQSxFQUFLLE9BQVMsZ0JBQWtCQSxFQUFLLEtBQUssT0FBUyxjQUk3RCxHQUFBRCxHQUF1QkEsRUFBb0IsT0FBUyxlQUFnQixDQUM5RCxNQUFBRSxFQUFrQkYsRUFBb0IsTUFDdENYLEVBQUVXLEVBQW9CLEtBQUssRUFBRSxTQUM3QixFQUFBLG9CQUdBLENBQUUsaUJBQUFHLEVBQWtCLHNCQUFBQyxFQUF1QixXQUFBQyxDQUFlLEVBQUFDLHNCQUFvQmpCLEVBQUdLLENBQUksRUFFdkZLLEdBRUFRLEVBQUEsc0JBQ0lsQixFQUNBVSxFQUNBLFFBQ0EsT0FDQUksRUFBbUIsUUFBUVIsQ0FBVSxHQUFLQSxDQUFBLEVBSTlDLElBQUFhLEVBQ0FMLEVBQ0FLLEVBQWVDLEVBQThCLDhCQUFBcEIsRUFBR00sRUFBWUosRUFBYyxxQkFBcUIsRUFDeEZhLElBQ1FJLEVBQUFFLEVBQUEsMENBQ1hyQixFQUNBTSxFQUNBSixFQUNBLHFCQUFBLEdBS2FvQixFQUFBQSxxQkFBQXRCLEVBQUdnQixFQUFZRyxFQUFjTCxDQUFnQixFQUc5REssR0FDQUksRUFBQSxtQkFDSXZCLEVBQ0FBLEVBQUVtQixDQUFZLEVBQ2QsOEJBQThCTixDQUFlLEdBQzdDQyxFQUFtQixRQUFVLFVBQUEsRUFLbEJVLEVBQUFBLGdCQUFnQmQsRUFBcUQsWUFBWSxJQUVuRlAsRUFBQSxHQUVyQixDQUFBLENBQ0gsRUFFR0EsR0FBY0QsR0FFS3VCLEVBQUFBLG1CQUFBekIsRUFBR0MsRUFBTSxzQkFBdUIsNEJBQTRCLEVBRzVFQSxFQUFLLFVBQ2hCIn0=
