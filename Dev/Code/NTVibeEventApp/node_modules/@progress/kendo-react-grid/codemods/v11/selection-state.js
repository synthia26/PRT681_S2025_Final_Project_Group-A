/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const t=require("./utils.js");function g(c,S){const e=S.jscodeshift,s=e(c.source),o=c.path.endsWith(".ts")||c.path.endsWith(".tsx");let u=!1;const m=new Set;s.find(e.Identifier).forEach(a=>{m.add(a.node.name)});const r=t.generateUniqueName("handleSelectionChange",m),h=t.findImportedName(e,s,"Grid","@progress/kendo-react-grid")||"Grid";return s.find(e.JSXElement,{openingElement:{name:{name:h}}}).forEach(a=>{const n=a.node.openingElement.attributes,l=n==null?void 0:n.find(i=>i.type==="JSXAttribute"&&i.name.name==="selectedField");if(!l)return;const p=l.value?e(l.value).toSource():"No value provided";t.removeAttribute(n,"selectedField"),u=!0,t.hasJSXAttribute(n,"selectable")||t.addStateAttribute(e,n,"selectable","true"),t.hasJSXAttribute(n,"dataItemKey")||t.addStateAttribute(e,n,"dataItemKey",'"place your key here"');const{isClassComponent:f,isFunctionalComponent:b,parentNode:d}=t.findParentComponent(e,a);if(f){if(t.addStateDeclaration(e,d,"select",e.objectExpression([])),t.hasJSXAttribute(n,"select")||t.addStateAttribute(e,n,"select","this.state.select"),!t.hasJSXAttribute(n,"onSelectionChange")){t.addEventAttribute(e,n,"onSelectionChange",`this.${r}`);const i=t.createClassMethod(e,r,[`event${o?": GridSelectionChangeEvent":""}`],[e.expressionStatement(e.callExpression(e.memberExpression(e.thisExpression(),e.identifier("setState")),[e.objectExpression([e.property("init",e.identifier("select"),e.memberExpression(e.identifier("event"),e.identifier("select")))])]))]);t.addCommentToMethod(e,e(i),`Original selectedField value: ${p}`,"class"),t.addMethodToComponent(e,d,i,!0)}}else if(b&&(t.addUseStateDeclaration(e,d,"select","setSelect",e.objectExpression([]),o,"SelectDescriptor"),t.hasJSXAttribute(n,"select")||t.addStateAttribute(e,n,"select","select"),!t.hasJSXAttribute(n,"onSelectionChange"))){t.addEventAttribute(e,n,"onSelectionChange",`${r}`);const i=t.createArrowFunction(e,`${r}`,[`(event${o?": GridSelectionChangeEvent":""})`],[e.expressionStatement(e.callExpression(e.identifier("setSelect"),[e.memberExpression(e.identifier("event"),e.identifier("select"))]))]);t.addCommentToMethod(e,e(i),`Original selectedField value: ${p}`,"function"),t.addMethodToComponent(e,d,i,!1)}}),u&&o&&(t.ensureImportExists(e,s,"SelectDescriptor","@progress/kendo-react-data-tools"),t.ensureImportExists(e,s,"GridSelectionChangeEvent","@progress/kendo-react-grid")),s.toSource()}module.exports=g;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
