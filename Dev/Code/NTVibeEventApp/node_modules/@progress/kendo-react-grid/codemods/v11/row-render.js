/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const t=require("./utils.js");function h(u,f){const e=f.jscodeshift,n=e(u.source),c=u.path.endsWith(".ts")||u.path.endsWith(".tsx");let p=!1;const l=new Set;n.find(e.Identifier).forEach(i=>{l.add(i.node.name)});const s=t.generateUniqueName("CustomRow",l),w=t.findImportedName(e,n,"Grid","@progress/kendo-react-grid")||"Grid";return n.find(e.JSXElement,{openingElement:{name:{name:w}}}).forEach(i=>{const o=i.node.openingElement.attributes,d=o==null?void 0:o.find(a=>a.type==="JSXAttribute"&&a.name.name==="rowRender");if(d&&d.type==="JSXAttribute"){const a=d.value?e(d.value).toSource():"No value provided",{isClassComponent:m,isFunctionalComponent:C,parentNode:R}=t.findParentComponent(e,i);o&&t.ensureAttributeExists(e,o,"rows","data",m?`this.${s}`:s);let r;m?r=t.createMethodForClassComponent(e,s,c,"GridCustomRowProps"):C&&(r=t.createArrowFunctionForFunctionalComponent(e,s,c,"GridCustomRowProps")),t.addMethodToComponent(e,R,r,m),r&&t.addCommentToMethod(e,e(r),`Original rowRender value: ${a}`,m?"class":"function"),t.removeAttribute(o,"rowRender")&&(p=!0)}}),p&&c&&t.ensureImportExists(e,n,"GridCustomRowProps","@progress/kendo-react-grid"),n.toSource()}module.exports=h;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LXJlbmRlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvZ3JpZC9jb2RlbW9kcy92MTEvcm93LXJlbmRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUEksIEZpbGVJbmZvLCBKU0NvZGVzaGlmdCwgSlNYQXR0cmlidXRlLCBKU1hTcHJlYWRBdHRyaWJ1dGUgfSBmcm9tICdqc2NvZGVzaGlmdCc7XG5pbXBvcnQge1xuICAgIGFkZENvbW1lbnRUb01ldGhvZCxcbiAgICBlbnN1cmVBdHRyaWJ1dGVFeGlzdHMsXG4gICAgZmluZFBhcmVudENvbXBvbmVudCxcbiAgICBnZW5lcmF0ZVVuaXF1ZU5hbWUsXG4gICAgZW5zdXJlSW1wb3J0RXhpc3RzLFxuICAgIGNyZWF0ZU1ldGhvZEZvckNsYXNzQ29tcG9uZW50LFxuICAgIGNyZWF0ZUFycm93RnVuY3Rpb25Gb3JGdW5jdGlvbmFsQ29tcG9uZW50LFxuICAgIGFkZE1ldGhvZFRvQ29tcG9uZW50LFxuICAgIHJlbW92ZUF0dHJpYnV0ZSxcbiAgICBmaW5kSW1wb3J0ZWROYW1lXG59IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZmlsZUluZm86IEZpbGVJbmZvLCBhcGk6IEFQSSkge1xuICAgIGNvbnN0IGo6IEpTQ29kZXNoaWZ0ID0gYXBpLmpzY29kZXNoaWZ0O1xuICAgIGNvbnN0IHJvb3QgPSBqKGZpbGVJbmZvLnNvdXJjZSk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgZmlsZSBpcyBUeXBlU2NyaXB0IG9yIFRTWFxuICAgIGNvbnN0IGlzVHlwZVNjcmlwdCA9IGZpbGVJbmZvLnBhdGguZW5kc1dpdGgoJy50cycpIHx8IGZpbGVJbmZvLnBhdGguZW5kc1dpdGgoJy50c3gnKTtcblxuICAgIGxldCBhZGRJbXBvcnRzID0gZmFsc2U7XG4gICAgLy8gQ29sbGVjdCBhbGwgZXhpc3RpbmcgbWV0aG9kIG5hbWVzXG4gICAgY29uc3QgZXhpc3RpbmdOYW1lcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgIHJvb3QuZmluZChqLklkZW50aWZpZXIpLmZvckVhY2goKHBhdGgpID0+IHtcbiAgICAgICAgZXhpc3RpbmdOYW1lcy5hZGQocGF0aC5ub2RlLm5hbWUpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgYmFzZU5hbWUgPSAnQ3VzdG9tUm93JztcbiAgICBjb25zdCB1bmlxdWVOYW1lID0gZ2VuZXJhdGVVbmlxdWVOYW1lKGJhc2VOYW1lLCBleGlzdGluZ05hbWVzKTtcblxuICAgIC8vIEVuc3VyZXMgd2UgZmluZCB0aGUgY29ycmVjdCBHcmlkIGltcG9ydFxuICAgIC8vIGlmIHRoZSB1c2VyIGhhcyBpbXBvcnRlZCBpdCB3aXRoIGEgZGlmZmVyZW50IG5hbWVcbiAgICAvLyBlLmcuIGltcG9ydCB7IEdyaWQgYXMgS2VuZG9HcmlkIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLXJlYWN0LWdyaWQnO1xuICAgIGNvbnN0IGdyaWROYW1lID0gZmluZEltcG9ydGVkTmFtZShqLCByb290LCAnR3JpZCcsICdAcHJvZ3Jlc3Mva2VuZG8tcmVhY3QtZ3JpZCcpIHx8ICdHcmlkJztcblxuICAgIC8vIEZpbmQgYWxsIEpTWEVsZW1lbnRzIHdpdGggdGhlIG5hbWUgJ0dyaWQnXG4gICAgcm9vdC5maW5kKGouSlNYRWxlbWVudCwgeyBvcGVuaW5nRWxlbWVudDogeyBuYW1lOiB7IG5hbWU6IGdyaWROYW1lIH0gfSB9KS5mb3JFYWNoKChwYXRoKSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBwYXRoLm5vZGUub3BlbmluZ0VsZW1lbnQuYXR0cmlidXRlcztcblxuICAgICAgICAvLyBGaW5kIHRoZSAncm93UmVuZGVyJyBhdHRyaWJ1dGVcbiAgICAgICAgY29uc3Qgcm93UmVuZGVyQXR0cmlidXRlID0gYXR0cmlidXRlcz8uZmluZChcbiAgICAgICAgICAgIChhdHRyKSA9PiBhdHRyLnR5cGUgPT09ICdKU1hBdHRyaWJ1dGUnICYmIGF0dHIubmFtZS5uYW1lID09PSAncm93UmVuZGVyJ1xuICAgICAgICApIGFzIEpTWEF0dHJpYnV0ZTtcblxuICAgICAgICAvLyBJZiB0aGUgJ3Jvd1JlbmRlcicgYXR0cmlidXRlIGV4aXN0cywgY29weSBpdHMgdmFsdWUgYXMgYSBjb21tZW50XG4gICAgICAgIGlmIChyb3dSZW5kZXJBdHRyaWJ1dGUgJiYgcm93UmVuZGVyQXR0cmlidXRlLnR5cGUgPT09ICdKU1hBdHRyaWJ1dGUnKSB7XG4gICAgICAgICAgICBjb25zdCByb3dSZW5kZXJWYWx1ZSA9IHJvd1JlbmRlckF0dHJpYnV0ZS52YWx1ZVxuICAgICAgICAgICAgICAgID8gaihyb3dSZW5kZXJBdHRyaWJ1dGUudmFsdWUpLnRvU291cmNlKClcbiAgICAgICAgICAgICAgICA6ICdObyB2YWx1ZSBwcm92aWRlZCc7XG5cbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIHBhcmVudCBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbnN0IHsgaXNDbGFzc0NvbXBvbmVudCwgaXNGdW5jdGlvbmFsQ29tcG9uZW50LCBwYXJlbnROb2RlIH0gPSBmaW5kUGFyZW50Q29tcG9uZW50KGosIHBhdGgpO1xuXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGUgJ3Jvd3MnIGF0dHJpYnV0ZSBleGlzdHNcbiAgICAgICAgICAgICAgICBlbnN1cmVBdHRyaWJ1dGVFeGlzdHMoXG4gICAgICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgICAgICdyb3dzJyxcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEnLFxuICAgICAgICAgICAgICAgICAgICBpc0NsYXNzQ29tcG9uZW50ID8gYHRoaXMuJHt1bmlxdWVOYW1lfWAgOiB1bmlxdWVOYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgQ3VzdG9tUm93IG1ldGhvZFxuICAgICAgICAgICAgbGV0IGN1c3RvbU1ldGhvZDtcbiAgICAgICAgICAgIGlmIChpc0NsYXNzQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tTWV0aG9kID0gY3JlYXRlTWV0aG9kRm9yQ2xhc3NDb21wb25lbnQoaiwgdW5pcXVlTmFtZSwgaXNUeXBlU2NyaXB0LCAnR3JpZEN1c3RvbVJvd1Byb3BzJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb25hbENvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGN1c3RvbU1ldGhvZCA9IGNyZWF0ZUFycm93RnVuY3Rpb25Gb3JGdW5jdGlvbmFsQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgICAgICBqLFxuICAgICAgICAgICAgICAgICAgICB1bmlxdWVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBpc1R5cGVTY3JpcHQsXG4gICAgICAgICAgICAgICAgICAgICdHcmlkQ3VzdG9tUm93UHJvcHMnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRkIHRoZSBDdXN0b21Sb3cgbWV0aG9kIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgICAgIGFkZE1ldGhvZFRvQ29tcG9uZW50KGosIHBhcmVudE5vZGUsIGN1c3RvbU1ldGhvZCwgaXNDbGFzc0NvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCB0aGUgcm93UmVuZGVyIHZhbHVlIGFzIGEgY29tbWVudCBpbiB0aGUgQ3VzdG9tUm93IG1ldGhvZFxuICAgICAgICAgICAgaWYgKGN1c3RvbU1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGFkZENvbW1lbnRUb01ldGhvZChcbiAgICAgICAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgICAgICAgaihjdXN0b21NZXRob2QpLFxuICAgICAgICAgICAgICAgICAgICBgT3JpZ2luYWwgcm93UmVuZGVyIHZhbHVlOiAke3Jvd1JlbmRlclZhbHVlfWAsXG4gICAgICAgICAgICAgICAgICAgIGlzQ2xhc3NDb21wb25lbnQgPyAnY2xhc3MnIDogJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgJ3Jvd1JlbmRlcicgYXR0cmlidXRlXG4gICAgICAgICAgICBjb25zdCB3YXNSZW1vdmVkID0gcmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXMgYXMgKEpTWEF0dHJpYnV0ZSB8IEpTWFNwcmVhZEF0dHJpYnV0ZSlbXSwgJ3Jvd1JlbmRlcicpO1xuICAgICAgICAgICAgaWYgKHdhc1JlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICBhZGRJbXBvcnRzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGFkZEltcG9ydHMgJiYgaXNUeXBlU2NyaXB0KSB7XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgaW1wb3J0IGZvciBHcmlkQ3VzdG9tUm93UHJvcHMgZXhpc3RzXG4gICAgICAgIGVuc3VyZUltcG9ydEV4aXN0cyhqLCByb290LCAnR3JpZEN1c3RvbVJvd1Byb3BzJywgJ0Bwcm9ncmVzcy9rZW5kby1yZWFjdC1ncmlkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3QudG9Tb3VyY2UoKTtcbn1cbiJdLCJuYW1lcyI6WyJyb3dSZW5kZXIiLCJmaWxlSW5mbyIsImFwaSIsImoiLCJyb290IiwiaXNUeXBlU2NyaXB0IiwiYWRkSW1wb3J0cyIsImV4aXN0aW5nTmFtZXMiLCJwYXRoIiwidW5pcXVlTmFtZSIsImdlbmVyYXRlVW5pcXVlTmFtZSIsImdyaWROYW1lIiwiZmluZEltcG9ydGVkTmFtZSIsImF0dHJpYnV0ZXMiLCJyb3dSZW5kZXJBdHRyaWJ1dGUiLCJhdHRyIiwicm93UmVuZGVyVmFsdWUiLCJpc0NsYXNzQ29tcG9uZW50IiwiaXNGdW5jdGlvbmFsQ29tcG9uZW50IiwicGFyZW50Tm9kZSIsImZpbmRQYXJlbnRDb21wb25lbnQiLCJlbnN1cmVBdHRyaWJ1dGVFeGlzdHMiLCJjdXN0b21NZXRob2QiLCJjcmVhdGVNZXRob2RGb3JDbGFzc0NvbXBvbmVudCIsImNyZWF0ZUFycm93RnVuY3Rpb25Gb3JGdW5jdGlvbmFsQ29tcG9uZW50IiwiYWRkTWV0aG9kVG9Db21wb25lbnQiLCJhZGRDb21tZW50VG9NZXRob2QiLCJyZW1vdmVBdHRyaWJ1dGUiLCJlbnN1cmVJbXBvcnRFeGlzdHMiXSwibWFwcGluZ3MiOiIyQ0FjQSxTQUFBQSxFQUF5QkMsRUFBb0JDLEVBQVUsQ0FDbkQsTUFBTUMsRUFBaUJELEVBQUksWUFDckJFLEVBQU9ELEVBQUVGLEVBQVMsTUFBTSxFQUd4QkksRUFBZUosRUFBUyxLQUFLLFNBQVMsS0FBSyxHQUFLQSxFQUFTLEtBQUssU0FBUyxNQUFNLEVBRW5GLElBQUlLLEVBQWEsR0FFWCxNQUFBQyxNQUFvQixJQUMxQkgsRUFBSyxLQUFLRCxFQUFFLFVBQVUsRUFBRSxRQUFTSyxHQUFTLENBQ3hCRCxFQUFBLElBQUlDLEVBQUssS0FBSyxJQUFJLENBQUEsQ0FDbkMsRUFHSyxNQUFBQyxFQUFhQyxFQUFBQSxtQkFERixZQUMrQkgsQ0FBYSxFQUt2REksRUFBV0MsRUFBQUEsaUJBQWlCVCxFQUFHQyxFQUFNLE9BQVEsNEJBQTRCLEdBQUssT0FHcEYsT0FBQUEsRUFBSyxLQUFLRCxFQUFFLFdBQVksQ0FBRSxlQUFnQixDQUFFLEtBQU0sQ0FBRSxLQUFNUSxDQUFBLENBQWEsQ0FBQSxDQUFDLEVBQUUsUUFBU0gsR0FBUyxDQUNsRixNQUFBSyxFQUFhTCxFQUFLLEtBQUssZUFBZSxXQUd0Q00sRUFBcUJELEdBQUEsWUFBQUEsRUFBWSxLQUNsQ0UsR0FBU0EsRUFBSyxPQUFTLGdCQUFrQkEsRUFBSyxLQUFLLE9BQVMsYUFJN0QsR0FBQUQsR0FBc0JBLEVBQW1CLE9BQVMsZUFBZ0IsQ0FDNUQsTUFBQUUsRUFBaUJGLEVBQW1CLE1BQ3BDWCxFQUFFVyxFQUFtQixLQUFLLEVBQUUsU0FDNUIsRUFBQSxvQkFHQSxDQUFFLGlCQUFBRyxFQUFrQixzQkFBQUMsRUFBdUIsV0FBQUMsQ0FBZSxFQUFBQyxzQkFBb0JqQixFQUFHSyxDQUFJLEVBRXZGSyxHQUVBUSxFQUFBLHNCQUNJbEIsRUFDQVUsRUFDQSxPQUNBLE9BQ0FJLEVBQW1CLFFBQVFSLENBQVUsR0FBS0EsQ0FBQSxFQUk5QyxJQUFBYSxFQUNBTCxFQUNBSyxFQUFlQyxFQUE4Qiw4QkFBQXBCLEVBQUdNLEVBQVlKLEVBQWMsb0JBQW9CLEVBQ3ZGYSxJQUNRSSxFQUFBRSxFQUFBLDBDQUNYckIsRUFDQU0sRUFDQUosRUFDQSxvQkFBQSxHQUthb0IsRUFBQUEscUJBQUF0QixFQUFHZ0IsRUFBWUcsRUFBY0wsQ0FBZ0IsRUFHOURLLEdBQ0FJLEVBQUEsbUJBQ0l2QixFQUNBQSxFQUFFbUIsQ0FBWSxFQUNkLDZCQUE2Qk4sQ0FBYyxHQUMzQ0MsRUFBbUIsUUFBVSxVQUFBLEVBS2xCVSxFQUFBQSxnQkFBZ0JkLEVBQXFELFdBQVcsSUFFbEZQLEVBQUEsR0FFckIsQ0FBQSxDQUNILEVBRUdBLEdBQWNELEdBRUt1QixFQUFBQSxtQkFBQXpCLEVBQUdDLEVBQU0scUJBQXNCLDRCQUE0QixFQUczRUEsRUFBSyxVQUNoQiJ9
