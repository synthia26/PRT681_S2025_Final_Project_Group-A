/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const t=require("./utils.js");function v(d,C){const e=C.jscodeshift,n=e(d.source),a=d.path.endsWith(".ts")||d.path.endsWith(".tsx");let c=!1;const u=new Set;n.find(e.Identifier).forEach(r=>{u.add(r.node.name)});const f="CustomColumnCell",g=t.findImportedName(e,n,"Grid","@progress/kendo-react-grid")||"Grid",E=t.findImportedName(e,n,"GridColumn","@progress/kendo-react-grid")||"GridColumn";return n.find(e.JSXElement,{openingElement:{name:{name:g}}}).forEach(r=>{const{isClassComponent:i,parentNode:h}=t.findParentComponent(e,r);e(r).find(e.JSXElement,{openingElement:{name:{name:E}}}).forEach((N,G)=>{const m=N.node.openingElement.attributes;if(!m)return;const o=m.find(p=>p.type==="JSXAttribute"&&p.name.name==="cell");if(!o)return;const l=t.generateUniqueName(`${f}$${G+1}`,u),S=o!=null&&o.value?e(o.value).toSource():"No value provided";t.removeAttribute(m,"cell"),t.ensureAttributeExists(e,m,"cells","data",i?`this.${l}`:l),c=!0;let s;i?s=t.createMethodForClassComponent(e,l,a,"GridCustomCellProps"):s=t.createArrowFunctionForFunctionalComponent(e,l,a,"GridCustomCellProps"),t.addMethodToComponent(e,h,s,i),s&&t.addCommentToMethod(e,e(s),`Original cell value: ${S}`,i?"class":"function")})}),c&&a&&t.ensureImportExists(e,n,"GridCustomCellProps","@progress/kendo-react-grid"),n.toSource()}module.exports=v;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
