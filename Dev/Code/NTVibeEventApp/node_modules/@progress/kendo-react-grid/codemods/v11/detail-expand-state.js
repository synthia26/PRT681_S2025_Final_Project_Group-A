/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use strict";const t=require("./utils.js");function f(l,m){const e=m.jscodeshift,i=e(l.source),d=l.path.endsWith(".ts")||l.path.endsWith(".tsx");let E=!1;const x=new Set;i.find(e.Identifier).forEach(s=>{x.add(s.node.name)});const o=t.generateUniqueName("handleDetailExpandChange",x),u=t.findImportedName(e,i,"Grid","@progress/kendo-react-grid")||"Grid";return i.find(e.JSXElement,{openingElement:{name:{name:u}}}).forEach(s=>{const n=s.node.openingElement.attributes;if(!t.hasJSXAttribute(n,"detail"))return;const r=n==null?void 0:n.find(a=>a.type==="JSXAttribute"&&a.name.name==="onExpandChange"),c=r!=null&&r.value?e(r.value).toSource():"No value provided";t.removeAttribute(n,"onExpandChange"),E=!0;const{isClassComponent:h,isFunctionalComponent:g,parentNode:p}=t.findParentComponent(e,s);if(h){if(t.addStateDeclaration(e,p,"detailExpand",e.objectExpression([])),t.hasJSXAttribute(n,"detailExpand")||t.addStateAttribute(e,n,"detailExpand","this.state.detailExpand"),!t.hasJSXAttribute(n,"onDetailExpandChange")){t.addEventAttribute(e,n,"onDetailExpandChange",`this.${o}`);const a=t.createClassMethod(e,o,[`event${d?": GridDetailExpandChangeEvent":""}`],[e.expressionStatement(e.callExpression(e.memberExpression(e.thisExpression(),e.identifier("setState")),[e.objectExpression([e.property("init",e.identifier("detailExpand"),e.memberExpression(e.identifier("event"),e.identifier("detailExpand")))])]))]);t.addCommentToMethod(e,e(a),`Original onExpandChange value: ${c}`,"class"),t.addMethodToComponent(e,p,a,!0)}}else if(g&&(t.addUseStateDeclaration(e,p,"detailExpand","setDetailExpand",e.objectExpression([]),d,"DetailExpandDescriptor"),t.hasJSXAttribute(n,"detailExpand")||t.addStateAttribute(e,n,"detailExpand","detailExpand"),!t.hasJSXAttribute(n,"onDetailExpandChange"))){t.addEventAttribute(e,n,"onDetailExpandChange",`${o}`);const a=t.createArrowFunction(e,`${o}`,[`(event${d?": GridDetailExpandChangeEvent":""})`],[e.expressionStatement(e.callExpression(e.identifier("setDetailExpand"),[e.memberExpression(e.identifier("event"),e.identifier("detailExpand"))]))]);t.addCommentToMethod(e,e(a),`Original onExpandChange value: ${c}`,"function"),t.addMethodToComponent(e,p,a,!1)}}),E&&d&&(t.ensureImportExists(e,i,"GridDetailExpandChangeEvent","@progress/kendo-react-grid"),t.ensureImportExists(e,i,"DetailExpandDescriptor","@progress/kendo-react-data-tools")),i.toSource()}module.exports=f;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
